{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\components\\Tinymce\\components\\EditorImage.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\components\\Tinymce\\components\\EditorImage.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n// import { getToken } from 'api/qiniu'\n\nexport default {\n  name: 'EditorSlideUpload',\n  props: {\n    color: {\n      type: String,\n      default: '#1890ff'\n    }\n  },\n  data: function data() {\n    return {\n      dialogVisible: false,\n      listObj: {},\n      fileList: []\n    };\n  },\n  methods: {\n    checkAllSuccess: function checkAllSuccess() {\n      var _this = this;\n      return Object.keys(this.listObj).every(function (item) {\n        return _this.listObj[item].hasSuccess;\n      });\n    },\n    handleSubmit: function handleSubmit() {\n      var _this2 = this;\n      var arr = Object.keys(this.listObj).map(function (v) {\n        return _this2.listObj[v];\n      });\n      if (!this.checkAllSuccess()) {\n        this.$message('Please wait for all images to be uploaded successfully. If there is a network problem, please refresh the page and upload again!');\n        return;\n      }\n      this.$emit('successCBK', arr);\n      this.listObj = {};\n      this.fileList = [];\n      this.dialogVisible = false;\n    },\n    handleSuccess: function handleSuccess(response, file) {\n      var uid = file.uid;\n      var objKeyArr = Object.keys(this.listObj);\n      for (var i = 0, len = objKeyArr.length; i < len; i++) {\n        if (this.listObj[objKeyArr[i]].uid === uid) {\n          this.listObj[objKeyArr[i]].url = response.files.file;\n          this.listObj[objKeyArr[i]].hasSuccess = true;\n          return;\n        }\n      }\n    },\n    handleRemove: function handleRemove(file) {\n      var uid = file.uid;\n      var objKeyArr = Object.keys(this.listObj);\n      for (var i = 0, len = objKeyArr.length; i < len; i++) {\n        if (this.listObj[objKeyArr[i]].uid === uid) {\n          delete this.listObj[objKeyArr[i]];\n          return;\n        }\n      }\n    },\n    beforeUpload: function beforeUpload(file) {\n      var _self = this;\n      var _URL = window.URL || window.webkitURL;\n      var fileName = file.uid;\n      this.listObj[fileName] = {};\n      return new Promise(function (resolve, reject) {\n        var img = new Image();\n        img.src = _URL.createObjectURL(file);\n        img.onload = function () {\n          _self.listObj[fileName] = {\n            hasSuccess: false,\n            uid: file.uid,\n            width: this.width,\n            height: this.height\n          };\n        };\n        resolve(true);\n      });\n    }\n  }\n};",{"version":3,"names":["name","props","color","type","String","default","data","dialogVisible","listObj","fileList","methods","checkAllSuccess","_this","Object","keys","every","item","hasSuccess","handleSubmit","_this2","arr","map","v","$message","$emit","handleSuccess","response","file","uid","objKeyArr","i","len","length","url","files","handleRemove","beforeUpload","_self","_URL","window","URL","webkitURL","fileName","Promise","resolve","reject","img","Image","src","createObjectURL","onload","width","height"],"sources":["src/components/Tinymce/components/EditorImage.vue"],"sourcesContent":["<template>\n  <div class=\"upload-container\">\n    <el-button :style=\"{background:color,borderColor:color}\" icon=\"el-icon-upload\" size=\"mini\" type=\"primary\" @click=\" dialogVisible=true\">\n      upload\n    </el-button>\n    <el-dialog :visible.sync=\"dialogVisible\">\n      <el-upload\n        :multiple=\"true\"\n        :file-list=\"fileList\"\n        :show-file-list=\"true\"\n        :on-remove=\"handleRemove\"\n        :on-success=\"handleSuccess\"\n        :before-upload=\"beforeUpload\"\n        class=\"editor-slide-upload\"\n        action=\"https://httpbin.org/post\"\n        list-type=\"picture-card\"\n      >\n        <el-button size=\"small\" type=\"primary\">\n          Click upload\n        </el-button>\n      </el-upload>\n      <el-button @click=\"dialogVisible = false\">\n        Cancel\n      </el-button>\n      <el-button type=\"primary\" @click=\"handleSubmit\">\n        Confirm\n      </el-button>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n// import { getToken } from 'api/qiniu'\n\nexport default {\n  name: 'EditorSlideUpload',\n  props: {\n    color: {\n      type: String,\n      default: '#1890ff'\n    }\n  },\n  data() {\n    return {\n      dialogVisible: false,\n      listObj: {},\n      fileList: []\n    }\n  },\n  methods: {\n    checkAllSuccess() {\n      return Object.keys(this.listObj).every(item => this.listObj[item].hasSuccess)\n    },\n    handleSubmit() {\n      const arr = Object.keys(this.listObj).map(v => this.listObj[v])\n      if (!this.checkAllSuccess()) {\n        this.$message('Please wait for all images to be uploaded successfully. If there is a network problem, please refresh the page and upload again!')\n        return\n      }\n      this.$emit('successCBK', arr)\n      this.listObj = {}\n      this.fileList = []\n      this.dialogVisible = false\n    },\n    handleSuccess(response, file) {\n      const uid = file.uid\n      const objKeyArr = Object.keys(this.listObj)\n      for (let i = 0, len = objKeyArr.length; i < len; i++) {\n        if (this.listObj[objKeyArr[i]].uid === uid) {\n          this.listObj[objKeyArr[i]].url = response.files.file\n          this.listObj[objKeyArr[i]].hasSuccess = true\n          return\n        }\n      }\n    },\n    handleRemove(file) {\n      const uid = file.uid\n      const objKeyArr = Object.keys(this.listObj)\n      for (let i = 0, len = objKeyArr.length; i < len; i++) {\n        if (this.listObj[objKeyArr[i]].uid === uid) {\n          delete this.listObj[objKeyArr[i]]\n          return\n        }\n      }\n    },\n    beforeUpload(file) {\n      const _self = this\n      const _URL = window.URL || window.webkitURL\n      const fileName = file.uid\n      this.listObj[fileName] = {}\n      return new Promise((resolve, reject) => {\n        const img = new Image()\n        img.src = _URL.createObjectURL(file)\n        img.onload = function() {\n          _self.listObj[fileName] = { hasSuccess: false, uid: file.uid, width: this.width, height: this.height }\n        }\n        resolve(true)\n      })\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.editor-slide-upload {\n  margin-bottom: 20px;\n  ::v-deep .el-upload--picture-card {\n    width: 100%;\n  }\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;;AAEA;EACAA,IAAA;EACAC,KAAA;IACAC,KAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA;IACA;EACA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,aAAA;MACAC,OAAA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,eAAA,WAAAA,gBAAA;MAAA,IAAAC,KAAA;MACA,OAAAC,MAAA,CAAAC,IAAA,MAAAN,OAAA,EAAAO,KAAA,WAAAC,IAAA;QAAA,OAAAJ,KAAA,CAAAJ,OAAA,CAAAQ,IAAA,EAAAC,UAAA;MAAA;IACA;IACAC,YAAA,WAAAA,aAAA;MAAA,IAAAC,MAAA;MACA,IAAAC,GAAA,GAAAP,MAAA,CAAAC,IAAA,MAAAN,OAAA,EAAAa,GAAA,WAAAC,CAAA;QAAA,OAAAH,MAAA,CAAAX,OAAA,CAAAc,CAAA;MAAA;MACA,UAAAX,eAAA;QACA,KAAAY,QAAA;QACA;MACA;MACA,KAAAC,KAAA,eAAAJ,GAAA;MACA,KAAAZ,OAAA;MACA,KAAAC,QAAA;MACA,KAAAF,aAAA;IACA;IACAkB,aAAA,WAAAA,cAAAC,QAAA,EAAAC,IAAA;MACA,IAAAC,GAAA,GAAAD,IAAA,CAAAC,GAAA;MACA,IAAAC,SAAA,GAAAhB,MAAA,CAAAC,IAAA,MAAAN,OAAA;MACA,SAAAsB,CAAA,MAAAC,GAAA,GAAAF,SAAA,CAAAG,MAAA,EAAAF,CAAA,GAAAC,GAAA,EAAAD,CAAA;QACA,SAAAtB,OAAA,CAAAqB,SAAA,CAAAC,CAAA,GAAAF,GAAA,KAAAA,GAAA;UACA,KAAApB,OAAA,CAAAqB,SAAA,CAAAC,CAAA,GAAAG,GAAA,GAAAP,QAAA,CAAAQ,KAAA,CAAAP,IAAA;UACA,KAAAnB,OAAA,CAAAqB,SAAA,CAAAC,CAAA,GAAAb,UAAA;UACA;QACA;MACA;IACA;IACAkB,YAAA,WAAAA,aAAAR,IAAA;MACA,IAAAC,GAAA,GAAAD,IAAA,CAAAC,GAAA;MACA,IAAAC,SAAA,GAAAhB,MAAA,CAAAC,IAAA,MAAAN,OAAA;MACA,SAAAsB,CAAA,MAAAC,GAAA,GAAAF,SAAA,CAAAG,MAAA,EAAAF,CAAA,GAAAC,GAAA,EAAAD,CAAA;QACA,SAAAtB,OAAA,CAAAqB,SAAA,CAAAC,CAAA,GAAAF,GAAA,KAAAA,GAAA;UACA,YAAApB,OAAA,CAAAqB,SAAA,CAAAC,CAAA;UACA;QACA;MACA;IACA;IACAM,YAAA,WAAAA,aAAAT,IAAA;MACA,IAAAU,KAAA;MACA,IAAAC,IAAA,GAAAC,MAAA,CAAAC,GAAA,IAAAD,MAAA,CAAAE,SAAA;MACA,IAAAC,QAAA,GAAAf,IAAA,CAAAC,GAAA;MACA,KAAApB,OAAA,CAAAkC,QAAA;MACA,WAAAC,OAAA,WAAAC,OAAA,EAAAC,MAAA;QACA,IAAAC,GAAA,OAAAC,KAAA;QACAD,GAAA,CAAAE,GAAA,GAAAV,IAAA,CAAAW,eAAA,CAAAtB,IAAA;QACAmB,GAAA,CAAAI,MAAA;UACAb,KAAA,CAAA7B,OAAA,CAAAkC,QAAA;YAAAzB,UAAA;YAAAW,GAAA,EAAAD,IAAA,CAAAC,GAAA;YAAAuB,KAAA,OAAAA,KAAA;YAAAC,MAAA,OAAAA;UAAA;QACA;QACAR,OAAA;MACA;IACA;EACA;AACA"}]}