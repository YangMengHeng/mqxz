{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/project/lamp-web1(\\u539F\\u7248)/lamp-web-master/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"core-js/modules/es6.array.sort\");\nvar _defineProperty2 = _interopRequireDefault(require(\"E:/project/lamp-web1(\\u539F\\u7248)/lamp-web-master/node_modules/@babel/runtime/helpers/defineProperty.js\"));\nrequire(\"core-js/modules/es6.regexp.search\");\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\nvar _utils = require(\"@/utils/utils\");\nvar _OptLog = _interopRequireDefault(require(\"@/api/OptLog.js\"));\nvar _elDragDialog = _interopRequireDefault(require(\"@/directive/el-drag-dialog\"));\nvar _commons = require(\"@/utils/commons\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'OptLog',\n  directives: {\n    elDragDialog: _elDragDialog.default\n  },\n  components: {\n    Pagination: _Pagination.default\n  },\n  filters: {\n    timeFilter: function timeFilter(time) {\n      if (time < 500) {\n        return 'success';\n      } else if (time < 1000) {\n        return '';\n      } else if (time < 1500) {\n        return 'warning';\n      } else {\n        return 'danger';\n      }\n    }\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      loading: false,\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      queryParams: (0, _commons.initQueryParams)({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        },\n        sort: 'createTime'\n      }),\n      selection: [],\n      tableData: {},\n      enums: {\n        LogType: {},\n        HttpMethod: {}\n      },\n      drawer: false,\n      currentRow: {}\n    };\n  },\n  computed: {\n    typeFilters: function typeFilters() {\n      return (0, _utils.convertEnum)(this.enums.LogType);\n    },\n    httpMethodFilters: function httpMethodFilters() {\n      return (0, _utils.convertEnum)(this.enums.HttpMethod);\n    }\n  },\n  mounted: function mounted() {\n    (0, _commons.initEnums)(['LogType', 'HttpMethod'], this.enums);\n    this.fetch();\n  },\n  methods: {\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    exportExcelPreview: function exportExcelPreview() {\n      var _this = this;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      _OptLog.default.preview(this.queryParams).then(function (response) {\n        var res = response.data;\n        _this.preview.isVisible = true;\n        _this.preview.context = res.data;\n      });\n    },\n    exportExcel: function exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      _OptLog.default.export(this.queryParams).then(function (response) {\n        (0, _commons.downloadFile)(response);\n      });\n    },\n    fetch: function fetch() {\n      var _this2 = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      _OptLog.default.page(this.queryParams).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this2.tableData = res.data;\n        }\n      }).finally(function () {\n        return _this2.loading = false;\n      });\n    },\n    clear: function clear(type) {\n      var _this3 = this;\n      this.$confirm('确认要清除日志吗？', this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      }).then(function () {\n        _OptLog.default.clear({\n          type: type\n        }).then(function (response) {\n          var res = response.data;\n          if (res.isSuccess) {\n            _this3.$message({\n              message: _this3.$t(\"tips.deleteSuccess\"),\n              type: \"success\"\n            });\n          }\n          _this3.search();\n        });\n      }).catch(function () {});\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this4 = this;\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var logIds = _this4.selection.map(function (item) {\n          return item.id;\n        });\n        _this4.delete(logIds);\n      }).catch(function () {\n        _this4.clearSelections();\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(logIds) {\n      var _this5 = this;\n      _OptLog.default.delete(logIds).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this5.$message({\n            message: _this5.$t('tips.deleteSuccess'),\n            type: 'success'\n          });\n        }\n        _this5.search();\n      });\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n    },\n    reset: function reset() {\n      this.queryParams = (0, _commons.initQueryParams)({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        }\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    transTime: function transTime(time) {\n      return \"\".concat(time, \" ms\");\n    },\n    sortChange: function sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange: function filterChange(filters) {\n      for (var key in filters) {\n        if (key.includes('.')) {\n          var val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n      this.search();\n    },\n    cellClick: function cellClick(row, column) {\n      var _this6 = this;\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      var flag = false;\n      this.selection.forEach(function (item) {\n        if (item.id === row.id) {\n          flag = true;\n          _this6.$refs.table.toggleRowSelection(row);\n        }\n      });\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    onView: function onView(row) {\n      var _this7 = this;\n      _OptLog.default.get(row.id).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this7.currentRow = res.data;\n          _this7.drawer = true;\n        }\n      });\n    },\n    closeDrawer: function closeDrawer(done) {\n      done();\n      this.currentRow = {};\n    },\n    uaForamt: function uaForamt(row) {\n      var ua = (0, _utils.readUserAgent)(row.ua);\n      return ua.terminal + '  |  ' + ua.browser;\n    }\n  }\n};\nexports.default = _default;",null]}