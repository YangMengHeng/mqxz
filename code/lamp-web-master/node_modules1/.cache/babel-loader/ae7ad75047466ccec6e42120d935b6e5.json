{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\tenant\\tenant\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\tenant\\tenant\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/project/lamp-web1(\\u539F\\u7248)/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport commonApi from '@/api/Common.js';\nimport db from '@/utils/localstorage';\nimport tenantApi from '@/api/Tenant.js';\nimport { validCode } from '@/utils/my-validate';\nimport { Base64 } from 'js-base64';\nexport default {\n  name: 'TenantEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      type: 'add',\n      updateFileData: {\n        bizType: 'TENANT_LOGO',\n        bizId: ''\n      },\n      passwordErrorLockTimeHidden: true,\n      passwordErrorLockTime: 0,\n      passwordErrorLockTimeUnit: '0',\n      passwordErrorLockTimeOptions: [{\n        value: '0',\n        label: '当天凌晨'\n      }, {\n        value: 'h',\n        label: '小时'\n      }, {\n        value: 'd',\n        label: '天'\n      }, {\n        value: 'w',\n        label: '周'\n      }, {\n        value: 'm',\n        label: '月'\n      }],\n      tenant: this.initTenant(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      confirmDisabled: false,\n      roles: [],\n      rules: {\n        code: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 3,\n          max: 10,\n          message: this.$t('rules.range4to10'),\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (_this.type === 'add') {\n              if (!validCode(value)) {\n                callback('企业编码只能是字母、数字或_');\n              } else {\n                tenantApi.check(value).then(function (response) {\n                  var res = response.data;\n                  if (res.data) {\n                    callback('编码已经存在');\n                  } else {\n                    callback();\n                  }\n                });\n              }\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    },\n    passwordErrorNumTips: function passwordErrorNumTips() {\n      return \"\\u5BC6\\u7801\\u8F93\\u9519\".concat(this.tenant.passwordErrorNum, \"\\u6B21\\u6570\\u540E\\u9501\\u5B9A\\u8D26\\u53F7\");\n    },\n    passwordErrorLockTimeTips: function passwordErrorLockTimeTips() {\n      var msg = '';\n      switch (this.passwordErrorLockTimeUnit) {\n        case 'h':\n          msg = \"\".concat(this.passwordErrorLockTime, \"\\u5C0F\\u65F6\");\n          break;\n        case 'd':\n          msg = \"\".concat(this.passwordErrorLockTime, \"\\u5929\");\n          break;\n        case 'w':\n          msg = \"\".concat(this.passwordErrorLockTime, \"\\u5468\");\n          break;\n        case 'm':\n          msg = \"\".concat(this.passwordErrorLockTime, \"\\u6708\");\n          break;\n        case '0':\n        default:\n          msg = \"\\u5F53\\u592923:59:59\";\n          break;\n      }\n      return \"\\u5BC6\\u7801\\u8F93\\u9519\".concat(this.tenant.passwordErrorNum, \"\\u6B21\\u6570\\u540E\\u9501\\u5B9A\\u8D26\\u53F7\").concat(msg);\n    },\n    uploadFileUrl: function uploadFileUrl() {\n      return commonApi.uploadFile;\n    },\n    uploadFileHeaders: function uploadFileHeaders() {\n      return {\n        token: 'Bearer ' + db.get(\"TOKEN\", \"\"),\n        tenant: db.get(\"TENANT\", \"\") || \"\",\n        Authorization: \"Basic \".concat(Base64.encode(\"\".concat(process.env.VUE_APP_CLIENT_ID, \":\").concat(process.env.VUE_APP_CLIENT_SECRET)))\n      };\n    },\n    passwordErrorLockTimeComputed: function passwordErrorLockTimeComputed() {\n      switch (this.passwordErrorLockTimeUnit) {\n        case '0':\n          return this.passwordErrorLockTime;\n        case 'h':\n        case 'd':\n        case 'w':\n        case 'm':\n        default:\n          return this.passwordErrorLockTime + this.passwordErrorLockTimeUnit;\n      }\n    }\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n    window.onresize = function () {\n      return function () {\n        _this2.width = _this2.initWidth();\n      }();\n    };\n  },\n  methods: {\n    initTenant: function initTenant() {\n      return {\n        id: '',\n        code: '',\n        name: '',\n        duty: '',\n        expirationTime: null,\n        logo: '',\n        describe: ''\n        // passwordExpire: 0,\n        // isMultipleLogin: true,\n        // passwordErrorNum: 10,\n        // passwordErrorLockTime: '0'\n      };\n    },\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '800px';\n      }\n    },\n    setTenant: function setTenant(val) {\n      this.tenant = _objectSpread({}, val);\n      this.updateFileData.bizId = this.tenant.id;\n    },\n    close: function close() {\n      this.$emit('close');\n    },\n    submitForm: function submitForm() {\n      var _this3 = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          _this3.tenant.passwordErrorLockTime = _this3.passwordErrorLockTimeComputed;\n          _this3.confirmDisabled = true;\n          if (_this3.type === 'add') {\n            _this3.save();\n          } else {\n            _this3.update();\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    save: function save() {\n      var _this4 = this;\n      tenantApi.save(this.tenant).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this4.isVisible = false;\n          _this4.$message({\n            message: _this4.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          _this4.$emit('success');\n        }\n      }).finally(function () {\n        _this4.confirmDisabled = false;\n        return true;\n      });\n    },\n    update: function update() {\n      var _this5 = this;\n      tenantApi.update(this.tenant).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this5.isVisible = false;\n          _this5.$message({\n            message: _this5.$t('tips.updateSuccess'),\n            type: 'success'\n          });\n          _this5.$emit('success');\n        }\n      }).finally(function () {\n        _this5.confirmDisabled = false;\n        return true;\n      });\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.tenant = this.initTenant();\n    },\n    passwordErrorLockTimeUnitChange: function passwordErrorLockTimeUnitChange(unit) {\n      if (unit === '0') {\n        this.tenant.passwordErrorLockTime = 0;\n        this.passwordErrorLockTimeHidden = true;\n      } else {\n        this.passwordErrorLockTimeHidden = false;\n      }\n    },\n    handleAvatarSuccess: function handleAvatarSuccess(res, file) {\n      if (!res.isSuccess) {\n        this.$message.error(res.msg);\n        return;\n      }\n      var fileResult = res.data;\n      this.tenant.logo = fileResult['url'];\n    },\n    handleAvatarError: function handleAvatarError(res, file) {\n      this.$message.error(res.msg);\n    },\n    beforeAvatarUpload: function beforeAvatarUpload(file) {\n      var isJPG = file.type === 'image/jpeg' || file.type === 'image/png';\n      var isLt2M = file.size / 1024 / 1024 < 10;\n      if (!isJPG) {\n        this.$message.error('上传头像图片只能是 JPG / png 格式!');\n      }\n      if (!isLt2M) {\n        this.$message.error('上传头像图片大小不能超过 10MB!');\n      }\n      return isJPG && isLt2M;\n    }\n  }\n};",null]}