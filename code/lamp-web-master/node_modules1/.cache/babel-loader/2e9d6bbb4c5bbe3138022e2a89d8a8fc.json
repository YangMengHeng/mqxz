{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\dictionary.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\dictionary.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _defineProperty from \"E:/project/lamp-web-master(finish/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.regexp.search\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination';\nimport DictionaryEdit from \"./edit\";\nimport dictionaryApi from '@/api/Dictionary.js';\nimport { initQueryParams } from '@/utils/commons';\nexport default {\n  name: 'DictionaryManage',\n  components: {\n    Pagination: Pagination,\n    DictionaryEdit: DictionaryEdit\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var map = {\n        false: 'danger',\n        true: 'success'\n      };\n      return map[status] || 'success';\n    }\n  },\n  data: function data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({}),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      }\n    };\n  },\n  computed: {},\n  watch: {},\n  mounted: function mounted() {\n    this.fetch();\n  },\n  methods: {\n    editClose: function editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess: function editSuccess() {\n      this.search();\n    },\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n      this.$emit('dictionaryClick', {\n        id: -1\n      });\n    },\n    reset: function reset() {\n      this.queryParams = initQueryParams({});\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this = this;\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var types = [];\n        _this.selection.forEach(function (u) {\n          types.push(u.type);\n        });\n        _this.delete(types);\n      }).catch(function () {\n        _this.clearSelections();\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(types) {\n      var _this2 = this;\n      dictionaryApi.deleteType(types).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this2.$message({\n            message: _this2.$t('tips.deleteSuccess'),\n            type: 'success'\n          });\n        }\n        _this2.search();\n      });\n    },\n    add: function add() {\n      this.dialog.type = 'add';\n      this.dialog.isVisible = true;\n      this.$refs.edit.setDictionary(false);\n    },\n    edit: function edit(row) {\n      this.$refs.edit.setDictionary(row);\n      this.dialog.type = 'edit';\n      this.dialog.isVisible = true;\n    },\n    fetch: function fetch() {\n      var _this3 = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.loading = true;\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      this.queryParams.sort = '';\n      this.queryParams.order = '';\n      dictionaryApi.pageType(this.queryParams).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this3.tableData = res.data;\n        }\n      }).finally(function () {\n        return _this3.loading = false;\n      });\n    },\n    sortChange: function sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange: function filterChange(filters) {\n      for (var key in filters) {\n        if (key.includes('.')) {\n          var val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n      this.search();\n    },\n    rowClick: function rowClick(row) {\n      this.$emit('dictionaryClick', row);\n    }\n  }\n};",{"version":3,"names":["Pagination","DictionaryEdit","dictionaryApi","initQueryParams","name","components","filters","statusFilter","status","map","false","true","data","dialog","isVisible","type","tableKey","queryParams","selection","loading","tableData","total","computed","watch","mounted","fetch","methods","editClose","editSuccess","search","onSelectChange","_objectSpread","$emit","id","reset","$refs","table","clearSort","clearFilter","singleDelete","row","clearSelection","toggleRowSelection","batchDelete","_this","length","$message","message","$t","$confirm","confirmButtonText","cancelButtonText","then","types","forEach","u","push","delete","catch","clearSelections","_delete","_this2","deleteType","response","res","isSuccess","add","edit","setDictionary","_this3","params","arguments","undefined","current","size","sort","order","pageType","finally","sortChange","val","prop","filterChange","key","includes","split","model","rowClick"],"sources":["src/views/lamp/system/dictionary/dictionary.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.keyword')\" size=\"small\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.label\" clearable/>\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\" size=\"small\">{{ $t('table.search') }}</el-button>\n      <el-dropdown class=\"filter-item\" trigger=\"click\"\n                   v-has-any-permission=\"['authority:dictionary:delete','authority:dictionary:add']\">\n        <el-button size=\"small\">\n          {{ $t('table.more') }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"add\" v-has-permission=\"['authority:dictionary:add']\">\n            {{ $t('table.add') }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['authority:dictionary:delete']\">\n            {{ $t('table.delete') }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @row-click=\"rowClick\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      size=\"mini\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.dictionary.type')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"type\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.type }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.dictionary.label')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"name\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.label }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        column-key=\"state\"\n        :filters=\"[{ text: $t('common.state.valid'), value: true }, { text: $t('common.state.invalid'), value: false }]\"\n        :label=\"$t('table.dictionary.state')\"\n        class-name=\"status-col\"\n        width=\"70px\"\n      >\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.state | statusFilter\">{{ row.state ? $t('common.state.valid') :\n            $t('common.state.invalid') }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.operation')\" align=\"center\" class-name=\"small-padding fixed-width\"\n                       width=\"70px\">\n        <template slot-scope=\"{row}\">\n          <i @click=\"edit(row)\" class=\"el-icon-edit table-operation\" style=\"color: #2db7f5;\"\n             v-hasPermission=\"['authority:dictionary:edit']\"/>\n          <i @click=\"singleDelete(row)\" class=\"el-icon-delete \" style=\"color: #f50;\"\n             v-hasPermission=\"['authority:dictionary:delete']\"/>\n          <el-link class=\"no-perm\" v-has-no-permission=\"['authority:dictionary:edit','authority:dictionary:delete']\">{{ $t('tips.noPermission') }}\n          </el-link>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\" :total=\"Number(tableData.total)\"\n                @pagination=\"fetch\" v-show=\"tableData.total>0\"/>\n    <dictionary-edit :dialog-visible=\"dialog.isVisible\" :type=\"dialog.type\" @close=\"editClose\" @success=\"editSuccess\"\n                     ref=\"edit\"/>\n  </div>\n</template>\n\n<script>\n  import Pagination from '@/components/Pagination'\n  import DictionaryEdit from './edit'\n  import dictionaryApi from '@/api/Dictionary.js'\n  import {initQueryParams} from '@/utils/commons'\n\n  export default {\n    name: 'DictionaryManage',\n    components: {Pagination, DictionaryEdit},\n    filters: {\n      statusFilter(status) {\n        const map = {\n          false: 'danger',\n          true: 'success'\n        }\n        return map[status] || 'success'\n      }\n    },\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: 'add'\n        },\n        tableKey: 0,\n        queryParams: initQueryParams({}),\n        selection: [],\n        loading: false,\n        tableData: {\n          total: 0\n        }\n      }\n    },\n    computed: {},\n    watch: {},\n    mounted() {\n      this.fetch()\n    },\n    methods: {\n      editClose() {\n        this.dialog.isVisible = false\n      },\n      editSuccess() {\n        this.search()\n      },\n      onSelectChange(selection) {\n        this.selection = selection\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        })\n        this.$emit('dictionaryClick', {id: -1})\n      },\n      reset() {\n        this.queryParams = initQueryParams({});\n        this.$refs.table.clearSort();\n        this.$refs.table.clearFilter();\n        this.search()\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection()\n        this.$refs.table.toggleRowSelection(row, true)\n        this.batchDelete()\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t('tips.noDataSelected'),\n            type: 'warning'\n          })\n          return\n        }\n        this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          const types = []\n          this.selection.forEach((u) => {\n            types.push(u.type)\n          })\n          this.delete(types)\n        }).catch(() => {\n          this.clearSelections()\n        })\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection()\n      },\n      delete(types) {\n        dictionaryApi.deleteType(types)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.deleteSuccess'),\n                type: 'success'\n              })\n            }\n            this.search()\n          })\n      },\n      add() {\n        this.dialog.type = 'add'\n        this.dialog.isVisible = true\n        this.$refs.edit.setDictionary(false)\n      },\n      edit(row) {\n        this.$refs.edit.setDictionary(row)\n        this.dialog.type = 'edit'\n        this.dialog.isVisible = true\n      },\n      fetch(params = {}) {\n        this.loading = true\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n        this.queryParams.sort = '';\n        this.queryParams.order = '';\n\n        dictionaryApi.pageType(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      rowClick(row) {\n        this.$emit('dictionaryClick', row)\n      }\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"],"mappings":"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"}]}