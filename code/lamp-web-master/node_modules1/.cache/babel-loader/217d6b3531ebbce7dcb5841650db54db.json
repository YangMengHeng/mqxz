{"remainingRequest":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\lamp-web-master\\src\\views\\lamp\\resources\\msg\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\lamp-web-master\\src\\views\\lamp\\resources\\msg\\edit.vue","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nvar _toConsumableArray2 = _interopRequireDefault(require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/toConsumableArray.js\"));\nvar _Msg = _interopRequireDefault(require(\"@/api/Msg.js\"));\nvar _Role = _interopRequireDefault(require(\"@/api/Role.js\"));\nvar _User = _interopRequireDefault(require(\"@/api/User.js\"));\nvar _Tinymce = _interopRequireDefault(require(\"@/components/Tinymce\"));\nvar _commons = require(\"@/utils/commons.js\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'MsgEdit',\n  components: {\n    Tinymce: _Tinymce.default\n  },\n  filters: {},\n  props: {},\n  data: function data() {\n    var _this = this;\n    return {\n      allUserList: [],\n      allRoleList: [],\n      oldChooseUserIdList: [[]],\n      oldChooseRoleIdList: [[]],\n      dialog: {\n        isVisible: false\n      },\n      type: 'add',\n      msg: this.initMsg(),\n      disabled: false,\n      disabledReceiveType: false,\n      enums: {\n        MsgBizType: {},\n        MsgType: {}\n      },\n      rules: {\n        \"msgDTO.title\": [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 255,\n          message: \"长度在 1 到 255 个字符\",\n          trigger: 'blur'\n        }],\n        \"msgDTO.content\": [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 65535,\n          message: \"长度在 1 到 65535 个字符\",\n          trigger: 'blur'\n        }],\n        \"msgDTO.msgType\": {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'change'\n        },\n        \"roleCodeList\": {\n          validator: function validator(rule, value, callback) {\n            if (_this.msg.receiveType === 'role' && _this.msg.msgDTO.msgType.code !== 'PUBLICITY' && _this.msg.roleCodeList.length <= 0) {\n              callback('请选择角色');\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        },\n        \"userIdList\": {\n          validator: function validator(rule, value, callback) {\n            if (_this.msg.receiveType === 'user' && _this.msg.msgDTO.msgType.code !== 'PUBLICITY' && _this.msg.userIdList.length <= 0) {\n              callback('请选择用户');\n            } else {\n              callback();\n            }\n          },\n          trigger: 'blur'\n        },\n        \"msgDTO.handlerUrl\": {\n          min: 1,\n          max: 255,\n          message: \"长度在 1 到 255 个字符\",\n          trigger: 'blur'\n        }\n      }\n    };\n  },\n  computed: {},\n  watch: {\n    $route: function $route() {\n      if (this.$route.path === '/resources/msg/edit') {\n        this.loadMsg();\n        this.loadUserList();\n        this.loadRoleList();\n      }\n    }\n  },\n  mounted: function mounted() {\n    this.loadMsg();\n    this.loadUserList();\n    this.loadRoleList();\n    (0, _commons.initMsgEnums)(['MsgType', 'MsgBizType'], this.enums);\n  },\n  methods: {\n    initMsg: function initMsg() {\n      return {\n        userIdList: [],\n        roleCodeList: [],\n        receiveType: 'user',\n        msgDTO: {\n          id: '',\n          bizId: '',\n          bizType: {\n            code: ''\n          },\n          msgType: {\n            code: ''\n          },\n          title: '',\n          content: '',\n          author: '',\n          handlerUrl: '',\n          handlerParams: '',\n          isSingleHandle: true\n        }\n      };\n    },\n    loadMsg: function loadMsg() {\n      var _this2 = this;\n      var type = this.$route.query.type;\n      var id = this.$route.query.id;\n      this.type = type;\n      if (type === 'view') {\n        _Msg.default.get(id).then(function (response) {\n          var res = response.data;\n          if (res.isSuccess) {\n            _this2.msg.msgDTO = res.data;\n            if (_this2.msg.msgDTO.bizType === null) {\n              _this2.msg.msgDTO.bizType = {\n                code: ''\n              };\n            }\n            if (_this2.msg.msgDTO.msgType === null) {\n              _this2.msg.msgDTO.msgType = {\n                code: ''\n              };\n            }\n          }\n        });\n      } else {\n        this.reset();\n      }\n    },\n    loadUserList: function loadUserList() {\n      var _this3 = this;\n      _User.default.page({\n        current: 1,\n        size: 10000,\n        model: {\n          status: true\n        }\n      }).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          if (res.data.records.length > 0) {\n            _this3.allUserList = [{\n              id: '-1',\n              name: '全选'\n            }].concat((0, _toConsumableArray2.default)(res.data.records));\n          }\n        }\n      });\n    },\n    loadRoleList: function loadRoleList() {\n      var _this4 = this;\n      _Role.default.page({\n        current: 1,\n        size: 10000,\n        model: {\n          status: true\n        }\n      }).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          if (res.data.records.length > 0) {\n            _this4.allRoleList = [{\n              code: '-1',\n              name: '全选'\n            }].concat((0, _toConsumableArray2.default)(res.data.records));\n          }\n        }\n      });\n    },\n    msgTypeChange: function msgTypeChange(select) {\n      if (select === 'PUBLICITY') {\n        this.disabledReceiveType = true;\n      } else {\n        this.disabledReceiveType = false;\n      }\n    },\n    userSelect: function userSelect(val) {\n      //保留所有值\n      var allValues = this.allUserList.map(function (item) {\n        return item.id;\n      });\n\n      // 用来储存上一次的值，可以进行对比\n      var oldVal = this.oldChooseUserIdList.length === 1 ? [] : this.oldChooseUserIdList[1];\n\n      // 若是全部选择\n      if (val.includes('-1')) {\n        this.msg.userIdList = allValues;\n      }\n\n      // 取消全部选中  上次有 当前没有 表示取消全选\n      if (oldVal.includes('-1') && !val.includes('-1')) {\n        this.msg.userIdList = [];\n      }\n\n      // 点击非全部选中  需要排除全部选中 以及 当前点击的选项\n      // 新老数据都有全部选中\n      if (oldVal.includes('-1') && val.includes('-1')) {\n        var index = val.indexOf('-1');\n        val.splice(index, 1); // 排除全选选项\n        this.msg.userIdList = val;\n      }\n\n      //全选未选 但是其他选项全部选上 则全选选上 上次和当前 都没有全选\n      if (!oldVal.includes('-1') && !val.includes('-1')) {\n        if (val.length === allValues.length - 1) {\n          this.msg.userIdList = ['-1'].concat(val);\n        }\n      }\n\n      //储存当前最后的结果 作为下次的老数据\n      this.oldChooseUserIdList[1] = this.msg.userIdList;\n    },\n    roleSelect: function roleSelect(val) {\n      //保留所有值\n      var allValues = this.allRoleList.map(function (item) {\n        return item.code;\n      });\n\n      // 用来储存上一次的值，可以进行对比\n      var oldVal = this.oldChooseRoleIdList.length === 1 ? [] : this.oldChooseRoleIdList[1];\n\n      // 若是全部选择\n      if (val.includes('-1')) {\n        this.msg.roleCodeList = allValues;\n      }\n\n      // 取消全部选中  上次有 当前没有 表示取消全选\n      if (oldVal.includes('-1') && !val.includes('-1')) {\n        this.msg.roleCodeList = [];\n      }\n\n      // 点击非全部选中  需要排除全部选中 以及 当前点击的选项\n      // 新老数据都有全部选中\n      if (oldVal.includes('-1') && val.includes('-1')) {\n        var index = val.indexOf('-1');\n        val.splice(index, 1); // 排除全选选项\n        this.msg.roleCodeList = val;\n      }\n\n      //全选未选 但是其他选项全部选上 则全选选上 上次和当前 都没有全选\n      if (!oldVal.includes('-1') && !val.includes('-1')) {\n        if (val.length === allValues.length - 1) {\n          this.msg.roleCodeList = ['-1'].concat(val);\n        }\n      }\n\n      //储存当前最后的结果 作为下次的老数据\n      this.oldChooseRoleIdList[1] = this.msg.roleCodeList;\n    },\n    reset: function reset() {\n      var _this5 = this;\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.msg = this.initMsg();\n      this.disabledReceiveType = false;\n\n      //这里报错\n      // this.$nextTick(() =>\n      //   this.$refs.content.setContent('')\n      // )\n\n      // 设置设置的时间短了 也报错\n      setTimeout(function () {\n        _this5.$refs.content.setContent('');\n      }, 1000);\n    },\n    submitForm: function submitForm(draft) {\n      var vm = this;\n      console.log(vm.msg);\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          vm.editSubmit(draft);\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit(draft) {\n      var vm = this;\n      if (vm.type === 'edit') {\n        vm.update();\n      } else {\n        vm.save();\n      }\n    },\n    save: function save() {\n      var vm = this;\n      vm.disabled = true;\n      _Msg.default.save(vm.msg).then(function (response) {\n        vm.disabled = false;\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.$message({\n            message: vm.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          vm.reset();\n          vm.$router.push('/resources/msg');\n        }\n      });\n    },\n    update: function update() {\n      var vm = this;\n      vm.disabled = true;\n      _Msg.default.update(vm.msg).then(function (response) {\n        vm.disabled = false;\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.$message({\n            message: vm.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          vm.reset();\n          vm.$router.push('/resources/msg');\n        }\n      });\n    }\n  }\n};\nexports.default = _default;",null]}