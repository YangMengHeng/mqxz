{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\activiti\\reimbursement\\ruTask\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\activiti\\reimbursement\\ruTask\\index.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.search\";\nimport _defineProperty from \"C:/Users/Planck/Desktop/mycode/lamp/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/web.dom.iterable\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport ModelEdit from \"./edit\";\nimport activitiApi from \"@/api/Activiti.js\";\nimport userApi from \"@/api/User.js\";\nimport { initQueryParams } from '@/utils/commons';\nexport default {\n  name: \"RuTaskManage\",\n  components: {\n    Pagination: Pagination,\n    ModelEdit: ModelEdit\n  },\n  filters: {},\n  data: function data() {\n    return {\n      dialogVisible: false,\n      taskTransVisible: false,\n      dialogImageUrl: \"\",\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      tableKey: 0,\n      isHist: false,\n      queryParams: initQueryParams({\n        model: {}\n      }),\n      suspendStateType: {\n        start: '1',\n        stop: '2'\n      },\n      isHistType: [{\n        value: false,\n        label: '待办任务'\n      }, {\n        value: true,\n        label: '已办任务'\n      }],\n      users: [],\n      selection: [],\n      loading: false,\n      tableData: {\n        records: [],\n        total: 0\n      },\n      targetUser: null,\n      targetRow: null\n    };\n  },\n  computed: {},\n  mounted: function mounted() {\n    this.fetch();\n  },\n  methods: {\n    fetch: function fetch() {\n      var _this = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      var api;\n      if (this.isHist) {\n        api = activitiApi.pageHiTaskReimbursement(this.queryParams);\n      } else {\n        api = activitiApi.pageTaskReimbursement(this.queryParams);\n      }\n      api.then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this.tableData.records = res.data.records;\n          _this.tableData.total = res.data.total;\n        }\n      }).finally(function () {\n        return _this.loading = false;\n      });\n    },\n    cellClick: function cellClick(row, column) {\n      var _this2 = this;\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      var flag = false;\n      this.selection.forEach(function (item) {\n        if (item.id === row.id) {\n          flag = true;\n          _this2.$refs.table.toggleRowSelection(row);\n        }\n      });\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    editClose: function editClose() {\n      this.reset();\n    },\n    taskTransVisibleClose: function taskTransVisibleClose() {\n      this.reset();\n      this.targetUser = null;\n      this.targetRow = null;\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n    },\n    reset: function reset() {\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleTransView: function singleTransView(row) {\n      var _this3 = this;\n      var vm = this;\n      vm.taskTransVisible = true;\n      this.targetRow = row;\n      userApi.find({}).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.users = res.data;\n        } else {\n          _this3.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(function () {\n        return _this3.loading = false;\n      });\n    },\n    singleTrans: function singleTrans(row) {\n      var _this4 = this;\n      var vm = this;\n      var data = {\n        taskId: vm.targetRow.id,\n        userId: vm.targetUser\n      };\n      activitiApi.updateAssignee(data).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this4.$message({\n            message: _this4.$t(\"tips.updateSuccess\"),\n            type: 'success'\n          });\n          _this4.search();\n        } else {\n          _this4.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(function () {\n        return _this4.loading = false;\n      });\n    },\n    singleUpdate: function singleUpdate(row) {\n      var _this5 = this;\n      var vm = this;\n      var data = {\n        instId: row.procInstId,\n        suspendState: row.suspendState\n      };\n      activitiApi.updateSuspendStateInst(data).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this5.$message({\n            message: _this5.$t(\"tips.updateSuccess\"),\n            type: 'success'\n          });\n          _this5.search();\n        } else {\n          _this5.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(function () {\n        return _this5.loading = false;\n      });\n    },\n    singleFormView: function singleFormView(row) {\n      this.$refs.modelEdit.open(row);\n    },\n    singleDelete: function singleDelete(row) {\n      var _this6 = this;\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      }).then(function () {\n        _this6.delete([row.id]);\n      }).catch(function () {\n        _this6.reset();\n      });\n    },\n    delete: function _delete(data) {\n      var _this7 = this;\n      activitiApi.deleteInst(data).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this7.$message({\n            message: _this7.$t(\"tips.deleteSuccess\"),\n            type: 'success'\n          });\n          _this7.search();\n        } else {\n          _this7.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(function () {\n        return _this7.loading = false;\n      });\n    },\n    singleDetail: function singleDetail(row) {\n      this.singleFormView(row);\n    },\n    getFormQuery: function getFormQuery() {\n      var _this8 = this;\n      activitiApi.formQuery({}).then(function (response) {\n        var res = response.data;\n      }).finally(function () {\n        return _this8.loading = false;\n      });\n    }\n  }\n};",null]}