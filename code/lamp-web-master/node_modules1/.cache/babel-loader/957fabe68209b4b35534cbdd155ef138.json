{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\resources\\msg\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\resources\\msg\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.sort\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.search\";\nimport _defineProperty from \"E:/project/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport msgApi from \"@/api/Msg.js\";\nimport { convertEnum } from \"@/utils/utils\";\nimport elDragDialog from '@/directive/el-drag-dialog';\nimport FileImport from \"@/components/lamp/Import\";\nimport { downloadFile, initMsgEnums, initQueryParams } from '@/utils/commons';\nexport default {\n  name: \"MsgList\",\n  directives: {\n    elDragDialog: elDragDialog\n  },\n  components: {\n    Pagination: Pagination,\n    FileImport: FileImport\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var map = {\n        WAITING: \"danger\",\n        SUCCESS: \"success\",\n        FAIL: \"error\"\n      };\n      return map[status] || \"success\";\n    }\n  },\n  data: function data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: \"\".concat(process.env.VUE_APP_BASE_API, \"/msg/msg/import\")\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {\n          msgType: {\n            code: null\n          },\n          bizType: {\n            code: null\n          }\n        }\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {\n        MsgType: {},\n        MsgBizType: {}\n      }\n    };\n  },\n  computed: {\n    msgTypeFilters: function msgTypeFilters() {\n      return convertEnum(this.enums.MsgType);\n    },\n    bizTypeFilters: function bizTypeFilters() {\n      return convertEnum(this.enums.MsgBizType);\n    }\n  },\n  watch: {\n    '$route': function $route(to) {\n      if (to.path === '/resources/msg') {\n        this.fetch();\n      }\n    }\n  },\n  mounted: function mounted() {\n    initMsgEnums(['MsgType', 'MsgBizType'], this.enums);\n    this.fetch();\n  },\n  methods: {\n    filterStatus: function filterStatus(value, row) {\n      return row.status === value;\n    },\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n    },\n    reset: function reset() {\n      this.queryParams = initQueryParams({\n        model: {\n          msgType: {\n            code: null\n          },\n          bizType: {\n            code: null\n          }\n        }\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview: function exportExcelPreview() {\n      var _this = this;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出消息数据';\n      msgApi.preview(this.queryParams).then(function (response) {\n        var res = response.data;\n        _this.preview.isVisible = true;\n        _this.preview.context = res.data;\n      });\n    },\n    exportExcel: function exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出消息数据';\n      msgApi.export(this.queryParams).then(function (response) {\n        downloadFile(response);\n      });\n    },\n    importExcel: function importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess: function importSuccess() {\n      this.search();\n    },\n    importClose: function importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this2 = this;\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      }).then(function () {\n        var ids = [];\n        _this2.selection.forEach(function (u) {\n          ids.push(u.id);\n        });\n        _this2.delete(ids);\n      }).catch(function () {\n        _this2.clearSelections();\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(ids) {\n      var _this3 = this;\n      msgApi.delete(ids).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this3.$message({\n            message: _this3.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n        }\n        _this3.search();\n      });\n    },\n    batchMark: function batchMark() {\n      var _this4 = this;\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(\"确认全部标记为已读吗？\", this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      }).then(function () {\n        var ids = [];\n        _this4.selection.forEach(function (u) {\n          ids.push(u.id);\n        });\n        _this4.mark(ids, function () {\n          _this4.search();\n        });\n      }).catch(function () {\n        _this4.clearSelections();\n      });\n    },\n    mark: function mark(ids, callback) {\n      msgApi.mark(ids).then(function (response) {\n        var res = response.data;\n        if (typeof callback === \"function\") {\n          callback(ids);\n        }\n      });\n    },\n    view: function view(row) {\n      var _this5 = this;\n      if (row.isRead) {\n        this.$router.push({\n          path: \"/resources/msg/edit\",\n          query: {\n            id: row.id,\n            type: \"view\"\n          }\n        });\n      } else {\n        this.mark([row.id], function (ids) {\n          _this5.$router.push({\n            path: \"/resources/msg/edit\",\n            query: {\n              id: row.id,\n              type: \"view\"\n            }\n          });\n        });\n      }\n    },\n    edit: function edit(row) {\n      this.$router.push({\n        path: \"/resources/msg/edit\",\n        query: {\n          id: row.id,\n          type: \"edit\"\n        }\n      });\n    },\n    fetch: function fetch() {\n      var _this6 = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      msgApi.page(this.queryParams).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this6.tableData = res.data;\n        }\n      }).finally(function () {\n        return _this6.loading = false;\n      });\n    },\n    sortChange: function sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange: function filterChange(filters) {\n      for (var key in filters) {\n        if (key.includes('.')) {\n          var val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n      this.search();\n    },\n    cellClick: function cellClick(row, column) {\n      var _this7 = this;\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      var flag = false;\n      this.selection.forEach(function (item) {\n        if (item.id === row.id) {\n          flag = true;\n          _this7.$refs.table.toggleRowSelection(row);\n        }\n      });\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n};",{"version":3,"names":["Pagination","msgApi","convertEnum","elDragDialog","FileImport","downloadFile","initMsgEnums","initQueryParams","name","directives","components","filters","statusFilter","status","map","WAITING","SUCCESS","FAIL","data","dialog","isVisible","type","preview","context","fileImport","action","concat","process","env","VUE_APP_BASE_API","tableKey","queryParams","model","msgType","code","bizType","selection","loading","tableData","total","enums","MsgType","MsgBizType","computed","msgTypeFilters","bizTypeFilters","watch","$route","to","path","fetch","mounted","methods","filterStatus","value","row","onSelectChange","search","_objectSpread","reset","$refs","table","clearSort","clearFilter","exportExcelPreview","_this","timeRange","extra","createTime_st","createTime_ed","fileName","then","response","res","exportExcel","export","importExcel","import","setModel","importSuccess","importClose","singleDelete","clearSelection","toggleRowSelection","batchDelete","_this2","length","$message","message","$t","$confirm","confirmButtonText","cancelButtonText","ids","forEach","u","push","id","delete","catch","clearSelections","_delete","_this3","isSuccess","batchMark","_this4","mark","callback","view","_this5","isRead","$router","query","edit","_this6","params","arguments","undefined","current","size","page","finally","sortChange","val","sort","prop","order","filterChange","key","includes","split","cellClick","column","_this7","flag","item"],"sources":["src/views/lamp/resources/msg/index.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input\n        :placeholder=\"$t('table.msg.title')\"\n        class=\"filter-item search-item\"\n        v-model=\"queryParams.model.title\"\n      />\n      <el-input\n        :placeholder=\"$t('table.msg.content')\"\n        class=\"filter-item search-item\"\n        v-model=\"queryParams.model.content\"\n      />\n      <el-date-picker\n        :range-separator=\"null\"\n        class=\"filter-item search-item date-range-item\"\n        end-placeholder=\"结束日期\"\n        format=\"yyyy-MM-dd HH:mm:ss\"\n        start-placeholder=\"开始日期\"\n        type=\"daterange\"\n        v-model=\"queryParams.timeRange\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">\n        {{ $t(\"table.search\") }}\n      </el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">\n        {{ $t(\"table.reset\") }}\n      </el-button>\n      <router-link :to=\"{ path: '/resources/msg/edit', query: { type: 'add' } }\">\n        <el-button class=\"filter-item\" plain type=\"danger\" v-has-permission=\"['msg:msg:add']\">\n          {{ $t(\"table.add\") }}\n        </el-button>\n      </router-link>\n      <el-dropdown\n        class=\"filter-item\"\n        trigger=\"click\"\n        v-has-any-permission=\"['msg:msg:delete', 'msg:msg:export']\"\n      >\n        <el-button>\n          {{ $t(\"table.more\") }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <!--          <router-link :to=\"{ path: '/resources/msg/edit', query: { type: 'add' } }\">-->\n          <!--            <el-dropdown-item v-has-permission=\"['msg:msg:add']\">-->\n          <!--              {{ $t(\"table.add\") }}-->\n          <!--            </el-dropdown-item>-->\n          <!--          </router-link>-->\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['msg:msg:delete']\">\n            {{ $t(\"table.delete\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"batchMark\" v-has-permission=\"['msg:msg:mark']\">\n            标记已读\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['msg:msg:export']\">\n            {{ $t(\"table.export\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['msg:msg:export']\">\n            {{ $t(\"table.exportPreview\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"importExcel\" v-has-permission=\"['msg:msg:import']\">\n            {{ $t(\"table.import\") }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column\n        :label=\"$t('table.msg.title')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        prop=\"templateId\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.title }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.msg.content')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        prop=\"receiver\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.content }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.msg.author')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.author }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        :filters=\"bizTypeFilters\"\n        :label=\"$t('table.msg.bizType')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        column-key=\"bizType.code\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.bizType ? scope.row.bizType.desc : \"\" }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        :filters=\"msgTypeFilters\"\n        :label=\"$t('table.msg.msgType')\"\n        :show-overflow-tooltip=\"true\"\n        class-name=\"status-col\"\n        column-key=\"msgType.code\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{\n            scope.row.msgType\n              ? scope.row.msgType.desc\n              : scope.row.msgType\n          }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        :filters=\"[\n          { text: '已读', value: 'true' },\n          { text: '未读', value: 'false' }\n        ]\"\n        :label=\"$t('table.msg.isRead')\"\n        align=\"center\"\n        column-key=\"isRead\"\n        prop=\"isRead\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>\n            <el-tag :type=\"scope.row.isRead ? 'success' : 'danger'\" slot>{{\n              scope.row.isRead ? \"已读\" : \"未读\"\n            }}</el-tag>\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.createTime')\"\n        align=\"center\"\n        prop=\"createTime\"\n        sortable=\"custom\"\n        width=\"170px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.operation')\"\n        align=\"center\"\n        class-name=\"small-padding fixed-width\"\n        width=\"100px\"\n        column-key=\"operation\"\n      >\n        <template slot-scope=\"{ row }\">\n          <i\n            @click=\"view(row)\"\n            class=\"el-icon-view table-operation\"\n            style=\"color: #2db7f5;\"\n            v-hasPermission=\"['msg:msg:view']\"\n          />\n          <i\n            @click=\"singleDelete(row)\"\n            class=\"el-icon-delete table-operation\"\n            style=\"color: #f50;\"\n            v-hasPermission=\"['msg:msg:delete']\"\n          />\n          <el-link\n            class=\"no-perm\"\n            v-has-no-permission=\"['msg:msg:view', 'msg:msg:delete']\"\n          >{{ $t(\"tips.noPermission\") }}\n          </el-link\n          >\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination\n      :limit.sync=\"queryParams.size\"\n      :page.sync=\"queryParams.current\"\n      :total=\"Number(tableData.total)\"\n      @pagination=\"fetch\"\n      v-show=\"tableData.total > 0\"\n    />\n    <file-import\n      :dialog-visible=\"fileImport.isVisible\"\n      :type=\"fileImport.type\"\n      :action=\"fileImport.action\" accept=\".xls,.xlsx\"\n      @close=\"importClose\"\n      @success=\"importSuccess\"\n      ref=\"import\"\n    />\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n      v-el-drag-dialog\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import Pagination from \"@/components/Pagination\";\n  import msgApi from \"@/api/Msg.js\";\n  import {convertEnum} from \"@/utils/utils\";\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import FileImport from \"@/components/lamp/Import\"\n  import {downloadFile, initMsgEnums, initQueryParams} from '@/utils/commons'\n\n\n  export default {\n    name: \"MsgList\",\n    directives: {elDragDialog},\n    components: {Pagination, FileImport},\n    filters: {\n      statusFilter(status) {\n        const map = {\n          WAITING: \"danger\",\n          SUCCESS: \"success\",\n          FAIL: \"error\"\n        };\n        return map[status] || \"success\";\n      }\n    },\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: \"add\"\n        },\n        preview: {\n          isVisible: false,\n          context: ''\n        },\n        fileImport: {\n          isVisible: false,\n          type: \"import\",\n          action: `${process.env.VUE_APP_BASE_API}/msg/msg/import`\n        },\n        tableKey: 0,\n        queryParams: initQueryParams({\n          model: {\n            msgType: {code: null},\n            bizType: {code: null},\n          }\n        }),\n        selection: [],\n        loading: false,\n        tableData: {\n          total: 0\n        },\n        enums: {\n          MsgType: {},\n          MsgBizType: {},\n        },\n      };\n    },\n    computed: {\n      msgTypeFilters() {\n        return convertEnum(this.enums.MsgType);\n      },\n      bizTypeFilters() {\n        return convertEnum(this.enums.MsgBizType);\n      }\n    },\n    watch: {\n      '$route'(to) {\n        if (to.path === '/resources/msg') {\n          this.fetch();\n        }\n      }\n    },\n    mounted() {\n      initMsgEnums(['MsgType', 'MsgBizType'], this.enums)\n      this.fetch();\n    },\n    methods: {\n      filterStatus(value, row) {\n        return row.status === value;\n      },\n      onSelectChange(selection) {\n        this.selection = selection;\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        });\n      },\n      reset() {\n        this.queryParams = initQueryParams({\n          model:{\n            msgType: {code: null},\n            bizType: {code: null},\n          }\n        });\n        this.$refs.table.clearSort();\n        this.$refs.table.clearFilter();\n        this.search();\n      },\n      exportExcelPreview() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出消息数据';\n        msgApi.preview(this.queryParams).then(response => {\n          const res = response.data;\n          this.preview.isVisible = true;\n          this.preview.context = res.data;\n        });\n      },\n      exportExcel() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出消息数据';\n        msgApi.export(this.queryParams).then(response => {\n          downloadFile(response);\n        });\n      },\n      importExcel() {\n        this.fileImport.type = \"upload\";\n        this.fileImport.isVisible = true;\n        this.$refs.import.setModel(false);\n      },\n      importSuccess() {\n        this.search();\n      },\n      importClose() {\n        this.fileImport.isVisible = false;\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection()\n        this.$refs.table.toggleRowSelection(row, true);\n        this.batchDelete();\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t(\"tips.noDataSelected\"),\n            type: \"warning\"\n          });\n          return;\n        }\n        this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n          .then(() => {\n            const ids = [];\n            this.selection.forEach(u => {\n              ids.push(u.id);\n            });\n            this.delete(ids);\n          })\n          .catch(() => {\n            this.clearSelections();\n          });\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection();\n      },\n\n      delete(ids) {\n        msgApi.delete(ids).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: \"success\"\n            });\n          }\n          this.search();\n        });\n      },\n      batchMark() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t(\"tips.noDataSelected\"),\n            type: \"warning\"\n          });\n          return;\n        }\n        this.$confirm(\"确认全部标记为已读吗？\", this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n          .then(() => {\n            const ids = [];\n            this.selection.forEach(u => {\n              ids.push(u.id);\n            });\n            this.mark(ids, ()=>{\n              this.search();\n            });\n          })\n          .catch(() => {\n            this.clearSelections();\n          });\n      },\n      mark(ids, callback) {\n        msgApi.mark(ids).then(response => {\n          const res = response.data;\n          if (typeof callback === \"function\") {\n            callback(ids);\n          }\n        });\n      },\n      view(row) {\n        if (row.isRead) {\n          this.$router.push({\n            path: \"/resources/msg/edit\",\n            query: {\n              id: row.id,\n              type: \"view\"\n            }\n          });\n        } else {\n          this.mark([row.id], ids => {\n            this.$router.push({\n              path: \"/resources/msg/edit\",\n              query: {\n                id: row.id,\n                type: \"view\"\n              }\n            });\n          });\n        }\n      },\n      edit(row) {\n        this.$router.push({\n          path: \"/resources/msg/edit\",\n          query: {\n            id: row.id,\n            type: \"edit\"\n          }\n        });\n      },\n      fetch(params = {}) {\n        this.loading = true;\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n        msgApi.page(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      cellClick(row, column) {\n        if (column['columnKey'] === \"operation\") {\n          return;\n        }\n        let flag = false;\n        this.selection.forEach((item) => {\n          if (item.id === row.id) {\n            flag = true;\n            this.$refs.table.toggleRowSelection(row);\n          }\n        })\n\n        if (!flag) {\n          this.$refs.table.toggleRowSelection(row, true);\n        }\n      }\n    }\n  };\n</script>\n<style lang=\"scss\" scoped></style>\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyOA,OAAAA,UAAA;AACA,OAAAC,MAAA;AACA,SAAAC,WAAA;AACA,OAAAC,YAAA;AACA,OAAAC,UAAA;AACA,SAAAC,YAAA,EAAAC,YAAA,EAAAC,eAAA;AAGA;EACAC,IAAA;EACAC,UAAA;IAAAN,YAAA,EAAAA;EAAA;EACAO,UAAA;IAAAV,UAAA,EAAAA,UAAA;IAAAI,UAAA,EAAAA;EAAA;EACAO,OAAA;IACAC,YAAA,WAAAA,aAAAC,MAAA;MACA,IAAAC,GAAA;QACAC,OAAA;QACAC,OAAA;QACAC,IAAA;MACA;MACA,OAAAH,GAAA,CAAAD,MAAA;IACA;EACA;EACAK,IAAA,WAAAA,KAAA;IACA;MACAC,MAAA;QACAC,SAAA;QACAC,IAAA;MACA;MACAC,OAAA;QACAF,SAAA;QACAG,OAAA;MACA;MACAC,UAAA;QACAJ,SAAA;QACAC,IAAA;QACAI,MAAA,KAAAC,MAAA,CAAAC,OAAA,CAAAC,GAAA,CAAAC,gBAAA;MACA;MACAC,QAAA;MACAC,WAAA,EAAAxB,eAAA;QACAyB,KAAA;UACAC,OAAA;YAAAC,IAAA;UAAA;UACAC,OAAA;YAAAD,IAAA;UAAA;QACA;MACA;MACAE,SAAA;MACAC,OAAA;MACAC,SAAA;QACAC,KAAA;MACA;MACAC,KAAA;QACAC,OAAA;QACAC,UAAA;MACA;IACA;EACA;EACAC,QAAA;IACAC,cAAA,WAAAA,eAAA;MACA,OAAA1C,WAAA,MAAAsC,KAAA,CAAAC,OAAA;IACA;IACAI,cAAA,WAAAA,eAAA;MACA,OAAA3C,WAAA,MAAAsC,KAAA,CAAAE,UAAA;IACA;EACA;EACAI,KAAA;IACA,mBAAAC,OAAAC,EAAA;MACA,IAAAA,EAAA,CAAAC,IAAA;QACA,KAAAC,KAAA;MACA;IACA;EACA;EACAC,OAAA,WAAAA,QAAA;IACA7C,YAAA,iCAAAkC,KAAA;IACA,KAAAU,KAAA;EACA;EACAE,OAAA;IACAC,YAAA,WAAAA,aAAAC,KAAA,EAAAC,GAAA;MACA,OAAAA,GAAA,CAAA1C,MAAA,KAAAyC,KAAA;IACA;IACAE,cAAA,WAAAA,eAAApB,SAAA;MACA,KAAAA,SAAA,GAAAA,SAAA;IACA;IACAqB,MAAA,WAAAA,OAAA;MACA,KAAAP,KAAA,CAAAQ,aAAA,KACA,KAAA3B,WAAA,CACA;IACA;IACA4B,KAAA,WAAAA,MAAA;MACA,KAAA5B,WAAA,GAAAxB,eAAA;QACAyB,KAAA;UACAC,OAAA;YAAAC,IAAA;UAAA;UACAC,OAAA;YAAAD,IAAA;UAAA;QACA;MACA;MACA,KAAA0B,KAAA,CAAAC,KAAA,CAAAC,SAAA;MACA,KAAAF,KAAA,CAAAC,KAAA,CAAAE,WAAA;MACA,KAAAN,MAAA;IACA;IACAO,kBAAA,WAAAA,mBAAA;MAAA,IAAAC,KAAA;MACA,SAAAlC,WAAA,CAAAmC,SAAA;QACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAC,aAAA,QAAArC,WAAA,CAAAmC,SAAA;QACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAE,aAAA,QAAAtC,WAAA,CAAAmC,SAAA;MACA;MACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAG,QAAA;MACArE,MAAA,CAAAqB,OAAA,MAAAS,WAAA,EAAAwC,IAAA,WAAAC,QAAA;QACA,IAAAC,GAAA,GAAAD,QAAA,CAAAtD,IAAA;QACA+C,KAAA,CAAA3C,OAAA,CAAAF,SAAA;QACA6C,KAAA,CAAA3C,OAAA,CAAAC,OAAA,GAAAkD,GAAA,CAAAvD,IAAA;MACA;IACA;IACAwD,WAAA,WAAAA,YAAA;MACA,SAAA3C,WAAA,CAAAmC,SAAA;QACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAC,aAAA,QAAArC,WAAA,CAAAmC,SAAA;QACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAE,aAAA,QAAAtC,WAAA,CAAAmC,SAAA;MACA;MACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAG,QAAA;MACArE,MAAA,CAAA0E,MAAA,MAAA5C,WAAA,EAAAwC,IAAA,WAAAC,QAAA;QACAnE,YAAA,CAAAmE,QAAA;MACA;IACA;IACAI,WAAA,WAAAA,YAAA;MACA,KAAApD,UAAA,CAAAH,IAAA;MACA,KAAAG,UAAA,CAAAJ,SAAA;MACA,KAAAwC,KAAA,CAAAiB,MAAA,CAAAC,QAAA;IACA;IACAC,aAAA,WAAAA,cAAA;MACA,KAAAtB,MAAA;IACA;IACAuB,WAAA,WAAAA,YAAA;MACA,KAAAxD,UAAA,CAAAJ,SAAA;IACA;IACA6D,YAAA,WAAAA,aAAA1B,GAAA;MACA,KAAAK,KAAA,CAAAC,KAAA,CAAAqB,cAAA;MACA,KAAAtB,KAAA,CAAAC,KAAA,CAAAsB,kBAAA,CAAA5B,GAAA;MACA,KAAA6B,WAAA;IACA;IACAA,WAAA,WAAAA,YAAA;MAAA,IAAAC,MAAA;MACA,UAAAjD,SAAA,CAAAkD,MAAA;QACA,KAAAC,QAAA;UACAC,OAAA,OAAAC,EAAA;UACApE,IAAA;QACA;QACA;MACA;MACA,KAAAqE,QAAA,MAAAD,EAAA,6BAAAA,EAAA;QACAE,iBAAA,OAAAF,EAAA;QACAG,gBAAA,OAAAH,EAAA;QACApE,IAAA;MACA,GACAkD,IAAA;QACA,IAAAsB,GAAA;QACAR,MAAA,CAAAjD,SAAA,CAAA0D,OAAA,WAAAC,CAAA;UACAF,GAAA,CAAAG,IAAA,CAAAD,CAAA,CAAAE,EAAA;QACA;QACAZ,MAAA,CAAAa,MAAA,CAAAL,GAAA;MACA,GACAM,KAAA;QACAd,MAAA,CAAAe,eAAA;MACA;IACA;IACAA,eAAA,WAAAA,gBAAA;MACA,KAAAxC,KAAA,CAAAC,KAAA,CAAAqB,cAAA;IACA;IAEAgB,MAAA,WAAAG,QAAAR,GAAA;MAAA,IAAAS,MAAA;MACArG,MAAA,CAAAiG,MAAA,CAAAL,GAAA,EAAAtB,IAAA,WAAAC,QAAA;QACA,IAAAC,GAAA,GAAAD,QAAA,CAAAtD,IAAA;QACA,IAAAuD,GAAA,CAAA8B,SAAA;UACAD,MAAA,CAAAf,QAAA;YACAC,OAAA,EAAAc,MAAA,CAAAb,EAAA;YACApE,IAAA;UACA;QACA;QACAiF,MAAA,CAAA7C,MAAA;MACA;IACA;IACA+C,SAAA,WAAAA,UAAA;MAAA,IAAAC,MAAA;MACA,UAAArE,SAAA,CAAAkD,MAAA;QACA,KAAAC,QAAA;UACAC,OAAA,OAAAC,EAAA;UACApE,IAAA;QACA;QACA;MACA;MACA,KAAAqE,QAAA,qBAAAD,EAAA;QACAE,iBAAA,OAAAF,EAAA;QACAG,gBAAA,OAAAH,EAAA;QACApE,IAAA;MACA,GACAkD,IAAA;QACA,IAAAsB,GAAA;QACAY,MAAA,CAAArE,SAAA,CAAA0D,OAAA,WAAAC,CAAA;UACAF,GAAA,CAAAG,IAAA,CAAAD,CAAA,CAAAE,EAAA;QACA;QACAQ,MAAA,CAAAC,IAAA,CAAAb,GAAA;UACAY,MAAA,CAAAhD,MAAA;QACA;MACA,GACA0C,KAAA;QACAM,MAAA,CAAAL,eAAA;MACA;IACA;IACAM,IAAA,WAAAA,KAAAb,GAAA,EAAAc,QAAA;MACA1G,MAAA,CAAAyG,IAAA,CAAAb,GAAA,EAAAtB,IAAA,WAAAC,QAAA;QACA,IAAAC,GAAA,GAAAD,QAAA,CAAAtD,IAAA;QACA,WAAAyF,QAAA;UACAA,QAAA,CAAAd,GAAA;QACA;MACA;IACA;IACAe,IAAA,WAAAA,KAAArD,GAAA;MAAA,IAAAsD,MAAA;MACA,IAAAtD,GAAA,CAAAuD,MAAA;QACA,KAAAC,OAAA,CAAAf,IAAA;UACA/C,IAAA;UACA+D,KAAA;YACAf,EAAA,EAAA1C,GAAA,CAAA0C,EAAA;YACA5E,IAAA;UACA;QACA;MACA;QACA,KAAAqF,IAAA,EAAAnD,GAAA,CAAA0C,EAAA,aAAAJ,GAAA;UACAgB,MAAA,CAAAE,OAAA,CAAAf,IAAA;YACA/C,IAAA;YACA+D,KAAA;cACAf,EAAA,EAAA1C,GAAA,CAAA0C,EAAA;cACA5E,IAAA;YACA;UACA;QACA;MACA;IACA;IACA4F,IAAA,WAAAA,KAAA1D,GAAA;MACA,KAAAwD,OAAA,CAAAf,IAAA;QACA/C,IAAA;QACA+D,KAAA;UACAf,EAAA,EAAA1C,GAAA,CAAA0C,EAAA;UACA5E,IAAA;QACA;MACA;IACA;IACA6B,KAAA,WAAAA,MAAA;MAAA,IAAAgE,MAAA;MAAA,IAAAC,MAAA,GAAAC,SAAA,CAAA9B,MAAA,QAAA8B,SAAA,QAAAC,SAAA,GAAAD,SAAA;MACA,KAAA/E,OAAA;MACA,SAAAN,WAAA,CAAAmC,SAAA;QACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAC,aAAA,QAAArC,WAAA,CAAAmC,SAAA;QACA,KAAAnC,WAAA,CAAAoC,KAAA,CAAAE,aAAA,QAAAtC,WAAA,CAAAmC,SAAA;MACA;MAEA,KAAAnC,WAAA,CAAAuF,OAAA,GAAAH,MAAA,CAAAG,OAAA,GAAAH,MAAA,CAAAG,OAAA,QAAAvF,WAAA,CAAAuF,OAAA;MACA,KAAAvF,WAAA,CAAAwF,IAAA,GAAAJ,MAAA,CAAAI,IAAA,GAAAJ,MAAA,CAAAI,IAAA,QAAAxF,WAAA,CAAAwF,IAAA;MAEAtH,MAAA,CAAAuH,IAAA,MAAAzF,WAAA,EAAAwC,IAAA,WAAAC,QAAA;QACA,IAAAC,GAAA,GAAAD,QAAA,CAAAtD,IAAA;QACA,IAAAuD,GAAA,CAAA8B,SAAA;UACAW,MAAA,CAAA5E,SAAA,GAAAmC,GAAA,CAAAvD,IAAA;QACA;MACA,GAAAuG,OAAA;QAAA,OAAAP,MAAA,CAAA7E,OAAA;MAAA;IACA;IACAqF,UAAA,WAAAA,WAAAC,GAAA;MACA,KAAA5F,WAAA,CAAA6F,IAAA,GAAAD,GAAA,CAAAE,IAAA;MACA,KAAA9F,WAAA,CAAA+F,KAAA,GAAAH,GAAA,CAAAG,KAAA;MACA,SAAA/F,WAAA,CAAA6F,IAAA;QACA,KAAAnE,MAAA;MACA;IACA;IACAsE,YAAA,WAAAA,aAAApH,OAAA;MACA,SAAAqH,GAAA,IAAArH,OAAA;QACA,IAAAqH,GAAA,CAAAC,QAAA;UACA,IAAAN,GAAA;UACAA,GAAA,CAAAK,GAAA,CAAAE,KAAA,YAAAvH,OAAA,CAAAqH,GAAA;UACA,KAAAjG,WAAA,CAAAC,KAAA,CAAAgG,GAAA,CAAAE,KAAA,YAAAP,GAAA;QACA;UACA,KAAA5F,WAAA,CAAAC,KAAA,CAAAgG,GAAA,IAAArH,OAAA,CAAAqH,GAAA;QACA;MACA;MACA,KAAAvE,MAAA;IACA;IACA0E,SAAA,WAAAA,UAAA5E,GAAA,EAAA6E,MAAA;MAAA,IAAAC,MAAA;MACA,IAAAD,MAAA;QACA;MACA;MACA,IAAAE,IAAA;MACA,KAAAlG,SAAA,CAAA0D,OAAA,WAAAyC,IAAA;QACA,IAAAA,IAAA,CAAAtC,EAAA,KAAA1C,GAAA,CAAA0C,EAAA;UACAqC,IAAA;UACAD,MAAA,CAAAzE,KAAA,CAAAC,KAAA,CAAAsB,kBAAA,CAAA5B,GAAA;QACA;MACA;MAEA,KAAA+E,IAAA;QACA,KAAA1E,KAAA,CAAAC,KAAA,CAAAsB,kBAAA,CAAA5B,GAAA;MACA;IACA;EACA;AACA"}]}