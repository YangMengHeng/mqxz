{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\activiti\\deploymentManager\\upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\activiti\\deploymentManager\\upload.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/project/lamp-web1(\\u539F\\u7248)/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport elDragDialog from '@/directive/el-drag-dialog';\nimport fileUpload from \"@/components/lamp/fileUpload\";\nexport default {\n  name: 'DeploymentManagerUpload',\n  directives: {\n    elDragDialog: elDragDialog,\n    fileUpload: fileUpload\n  },\n  components: {\n    fileUpload: fileUpload\n  },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'add'\n    }\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      accept: \"application/zip,application/octet-stream,application/x-zip-compressed\",\n      action: \"\".concat(process.env.VUE_APP_BASE_API, \"/activiti/definition/upload\"),\n      attachment: this.initAttachment(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      fileLength: 0,\n      disabled: false,\n      rules: {\n        fileLength: {\n          required: true,\n          trigger: \"change\",\n          validator: function validator(rule, value, callback) {\n            var vm = _this;\n            if (vm.fileLength === 0) {\n              callback(new Error(\"请上传文件\"));\n            } else if (vm.fileLength > 5) {\n              callback(new Error(\"一次性只能上传5个文件\"));\n            } else {\n              callback();\n            }\n          }\n        }\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title: function title() {\n      return this.$t('common.upload');\n    }\n  },\n  watch: {},\n  mounted: function mounted() {\n    var _this2 = this;\n    window.onresize = function () {\n      return function () {\n        _this2.width = _this2.initWidth();\n      }();\n    };\n  },\n  methods: {\n    initAttachment: function initAttachment() {\n      return {\n        id: '',\n        bizId: '',\n        bizType: '',\n        file: null,\n        defName: ''\n      };\n    },\n    handleDrag: function handleDrag() {\n      console.log(\"\\u6211\\u88AB\\u62D6\\u52A8\\u4E86\");\n    },\n    // 附件长度校验\n    fileLengthVaild: function fileLengthVaild(data) {\n      var vm = this;\n      vm.fileLength = data || 0;\n    },\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '800px';\n      }\n    },\n    setAttachment: function setAttachment(val) {\n      var vm = this;\n      if (val) {\n        vm.attachment = _objectSpread({}, val);\n      }\n    },\n    close: function close() {\n      this.$emit('close');\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.attachment = this.initAttachment();\n      this.$refs.fileRef.init({\n        id: \"\",\n        bizId: \"\",\n        bizType: \"\"\n      });\n    },\n    submitForm: function submitForm() {\n      var vm = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit() {\n      var vm = this;\n      vm.disabled = true;\n      vm.$refs.fileRef.submitFile(this.attachment.id, this.attachment.bizId, this.attachment.bizType, this.attachment.defName);\n    },\n    setIdAndSubmit: function setIdAndSubmit(isUploadCompleted) {\n      var vm = this;\n      if (isUploadCompleted) {\n        vm.disabled = false;\n        vm.isVisible = false;\n        vm.$message({\n          message: vm.$t('tips.createSuccess'),\n          type: 'success'\n        });\n        vm.$emit('success');\n      }\n    }\n  }\n};",null]}