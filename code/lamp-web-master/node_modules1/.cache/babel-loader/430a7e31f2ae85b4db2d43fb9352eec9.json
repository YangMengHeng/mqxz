{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\menu\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\menu\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/project/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport resourceApi from '@/api/Resource.js';\nexport default {\n  name: 'ResourceEdit',\n  components: {},\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'add'\n    }\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      resource: this.initResource(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        code: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 500,\n          message: '不能超过500字符',\n          trigger: 'blur'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (!_this.resource.id) {\n              // this.$get(`system/user/check/${value}`).then((r) => {\n              //   if (!r.data) {\n              //     callback(this.$t('rules.usernameExist'))\n              //   } else {\n              //     callback()\n              //   }\n              // })\n            } else {\n              // callback()\n            }\n            callback();\n          },\n          trigger: 'blur'\n        }],\n        name: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title: function title() {\n      return this.type === 'add' ? this.$t('common.add') : this.$t('common.edit');\n    }\n  },\n  watch: {},\n  mounted: function mounted() {\n    var _this2 = this;\n    window.onresize = function () {\n      return function () {\n        _this2.width = _this2.initWidth();\n      }();\n    };\n  },\n  methods: {\n    initResource: function initResource() {\n      return {\n        id: '',\n        name: '',\n        code: '',\n        describe: ''\n      };\n    },\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '800px';\n      }\n    },\n    setResource: function setResource(val) {\n      var that = this;\n      if (val) {\n        that.resource = _objectSpread({}, val);\n      }\n    },\n    close: function close() {\n      this.$emit('close');\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.resource = this.initResource();\n    },\n    submitForm: function submitForm() {\n      var that = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          that.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit() {\n      var that = this;\n      if (that.type === 'add') {\n        that.save();\n      } else {\n        that.update();\n      }\n    },\n    save: function save() {\n      var that = this;\n      resourceApi.save(this.resource).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          that.isVisible = false;\n          that.$message({\n            message: that.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          that.$emit('success');\n        }\n      });\n    },\n    update: function update() {\n      var _this3 = this;\n      resourceApi.update(this.resource).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this3.isVisible = false;\n          _this3.$message({\n            message: _this3.$t('tips.updateSuccess'),\n            type: 'success'\n          });\n          _this3.$emit('success');\n        }\n      });\n    }\n  }\n};",null]}