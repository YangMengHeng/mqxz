{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\components\\Tinymce\\dynamicLoadScript.js","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\components\\Tinymce\\dynamicLoadScript.js","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nvar callbacks = [];\nfunction loadedTinymce() {\n  // to fixed https://github.com/PanJiaChen/vue-element-admin/issues/2144\n  // check is successfully downloaded script\n  return window.tinymce;\n}\nvar dynamicLoadScript = function dynamicLoadScript(src, callback) {\n  var existingScript = document.getElementById(src);\n  var cb = callback || function () {};\n  if (!existingScript) {\n    var script = document.createElement('script');\n    script.src = src; // src url for the third-party library being loaded.\n    script.id = src;\n    document.body.appendChild(script);\n    callbacks.push(cb);\n    var onEnd = 'onload' in script ? stdOnEnd : ieOnEnd;\n    onEnd(script);\n  }\n  if (existingScript && cb) {\n    if (loadedTinymce()) {\n      cb(null, existingScript);\n    } else {\n      callbacks.push(cb);\n    }\n  }\n  function stdOnEnd(script) {\n    script.onload = function () {\n      // this.onload = null here is necessary\n      // because even IE9 works not like others\n      this.onerror = this.onload = null;\n      var _iterator = _createForOfIteratorHelper(callbacks),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _cb = _step.value;\n          _cb(null, script);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      callbacks = null;\n    };\n    script.onerror = function () {\n      this.onerror = this.onload = null;\n      cb(new Error('Failed to load ' + src), script);\n    };\n  }\n  function ieOnEnd(script) {\n    script.onreadystatechange = function () {\n      if (this.readyState !== 'complete' && this.readyState !== 'loaded') return;\n      this.onreadystatechange = null;\n      var _iterator2 = _createForOfIteratorHelper(callbacks),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var _cb2 = _step2.value;\n          _cb2(null, script); // there is no way to catch loading errors in IE8\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      callbacks = null;\n    };\n  }\n};\nexport default dynamicLoadScript;",null]}