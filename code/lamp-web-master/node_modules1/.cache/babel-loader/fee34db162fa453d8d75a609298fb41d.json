{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\gateway\\blocklist\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\gateway\\blocklist\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/project/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport elDragDialog from '@/directive/el-drag-dialog';\nimport blockListApi from \"@/api/BlockList.js\";\nexport default {\n  name: \"BlockListEdit\",\n  directives: {\n    elDragDialog: elDragDialog\n  },\n  components: {},\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: \"add\"\n    }\n  },\n  data: function data() {\n    return {\n      confirmDisabled: false,\n      blockList: this.initBlockList(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        requestMethod: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        requestUri: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }\n      },\n      // 枚举\n      enums: {},\n      // 字典\n      dicts: {}\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title: function title() {\n      return this.$t(\"common.\" + this.type);\n    }\n  },\n  watch: {},\n  mounted: function mounted() {\n    var _this = this;\n    window.onresize = function () {\n      return function () {\n        _this.width = _this.initWidth();\n      }();\n    };\n  },\n  methods: {\n    initBlockList: function initBlockList() {\n      return {\n        id: \"\",\n        ip: '',\n        requestUri: '',\n        requestMethod: '',\n        limitStart: '',\n        limitEnd: '',\n        state: true,\n        limit: null\n      };\n    },\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return \"90%\";\n      } else if (this.screenWidth < 1400) {\n        return \"45%\";\n      } else {\n        return \"800px\";\n      }\n    },\n    setBlockList: function setBlockList() {\n      var val = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var vm = this;\n      vm.dicts = val['dicts'];\n      vm.enums = val['enums'];\n      if (val['row']) {\n        vm.blockList = _objectSpread({}, val['row']);\n        if (vm.blockList.limitStart != null && vm.blockList.limitEnd != null) {\n          vm.blockList.limit = [vm.blockList.limitStart, vm.blockList.limitEnd];\n        }\n      }\n    },\n    close: function close() {\n      this.$emit(\"close\");\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.confirmDisabled = false;\n      this.blockList = this.initBlockList();\n    },\n    submitForm: function submitForm() {\n      var vm = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit() {\n      var vm = this;\n      if (this.blockList.limit != null && this.blockList.limit.length == 2) {\n        this.blockList.limitStart = this.blockList.limit[0];\n        this.blockList.limitEnd = this.blockList.limit[1];\n      }\n      if (vm.type === \"edit\") {\n        vm.update();\n      } else {\n        vm.save();\n      }\n    },\n    save: function save() {\n      var vm = this;\n      vm.confirmDisabled = true;\n      blockListApi.save(this.blockList).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: vm.$t(\"tips.createSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      }).finally(function () {\n        return vm.confirmDisabled = false;\n      });\n    },\n    update: function update() {\n      var _this2 = this;\n      var vm = this;\n      vm.confirmDisabled = true;\n      blockListApi.update(this.blockList).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: _this2.$t(\"tips.updateSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      }).finally(function () {\n        return vm.confirmDisabled = false;\n      });\n    }\n  }\n};",null]}