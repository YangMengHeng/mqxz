{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\edit.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es6.array.find\";\nimport _defineProperty from \"C:/Users/Planck/Desktop/mycode/lamp/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"C:/Users/Planck/Desktop/mycode/lamp/lamp-web-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport smsTemplateApi from '@/api/SmsTemplate.js';\nimport smsTaskApi from '@/api/SmsTask.js';\nimport { validMobile } from '@/utils/my-validate';\nimport SendStatusIndex from \"./sendStatusIndex\";\nexport default {\n  name: 'SmsTaskEdit',\n  components: {\n    SendStatusIndex: SendStatusIndex\n  },\n  filters: {\n    statusFilter: function statusFilter(status) {\n      var map = {\n        WAITING: 'danger',\n        SUCCESS: 'success',\n        FAIL: 'error'\n      };\n      return map[status] || 'success';\n    }\n  },\n  props: {},\n  data: function data() {\n    var _this = this;\n    return {\n      dialog: {\n        isVisible: false\n      },\n      type: 'add',\n      smsTask: this.initSmsTask(),\n      smsTemplateList: [],\n      telNumList: [],\n      telNumVisible: false,\n      telNum: '',\n      timing: false,\n      disabled: false,\n      smsTemplate: '',\n      content: '',\n      rules: {\n        topic: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 255,\n          message: this.$t('rules.range4to10'),\n          trigger: 'blur'\n        }],\n        templateId: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        },\n        sendTime: {\n          validator: function validator(rule, value, callback) {\n            var vm = _this;\n            if (vm.timing) {\n              if (vm.smsTask.sendTime) {\n                callback();\n              } else {\n                callback('请选择发送日期');\n              }\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }\n      },\n      pickerOptions: {\n        shortcuts: [{\n          text: '一小时后',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() + 3600 * 1000 * 1);\n            picker.$emit('pick', date);\n          }\n        }, {\n          text: '明天',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() + 3600 * 1000 * 24);\n            picker.$emit('pick', date);\n          }\n        }, {\n          text: '一周后',\n          onClick: function onClick(picker) {\n            var date = new Date();\n            date.setTime(date.getTime() + 3600 * 1000 * 24 * 7);\n            picker.$emit('pick', date);\n          }\n        }]\n      }\n    };\n  },\n  computed: {},\n  watch: {\n    $route: function $route() {\n      if (this.$route.path === '/resources/sms/edit') {\n        this.initSmsTemplateList();\n        this.loadSendStatus();\n      }\n    }\n  },\n  mounted: function mounted() {\n    //在vue的mount阶段执行的函数都是顺序执行，不会阻塞的，所以如果希望mount阶段的函数也是阻塞的，需要额外写一个async函数，然后把需要同步执行的函数写到里面，然后在mount阶段调用这个额外写的函数\n    this.initSmsTemplateList();\n    this.loadSendStatus();\n  },\n  methods: {\n    loadSendStatus: function loadSendStatus() {\n      var type = this.$route.query.type;\n      var id = this.$route.query.id;\n      if (type === 'view') {\n        this.$refs.statusList.setTaskId(id);\n      }\n    },\n    loadSmsTask: function () {\n      var _loadSmsTask = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n        var type, id;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              type = this.$route.query.type;\n              id = this.$route.query.id;\n              this.type = type;\n              if (type) {\n                // 切换到别的页面时，无需重置表单\n                // this.smsTask = this.initSmsTask()\n                this.reset();\n              }\n              if (type === 'view') {\n                this.disabled = true;\n              } else {\n                this.disabled = false;\n              }\n              if (!id) {\n                _context.next = 8;\n                break;\n              }\n              _context.next = 8;\n              return smsTaskApi.get(id).then(function (response) {\n                var res = response.data;\n                _this2.smsTask = _objectSpread(_objectSpread({}, _this2.smsTask), res.data);\n                if (type !== 'edit') {\n                  _this2.smsTask.id = '';\n                }\n                _this2.changeTemplate(_this2.smsTask.templateId);\n                // this.telNumList = this.smsTask.telNum.split(\",\")\n                _this2.telNumList = _this2.smsTask.telNumList;\n                if (_this2.smsTask.templateParams) {\n                  _this2.smsTask.templateParam = JSON.parse(_this2.smsTask.templateParams);\n                }\n                _this2.smsTask.content = res.data.content;\n                console.log('查询');\n                if (_this2.smsTask.sendTime) {\n                  _this2.timing = true;\n                } else {\n                  _this2.timing = false;\n                }\n                _this2.smsTemplate = _this2.smsTemplateList.find(function (item) {\n                  return item.id === _this2.smsTask.templateId;\n                });\n              });\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function loadSmsTask() {\n        return _loadSmsTask.apply(this, arguments);\n      }\n      return loadSmsTask;\n    }(),\n    changeTemplate: function changeTemplate(id) {\n      var vm = this;\n      // vm.preSearch()\n      if (id) {\n        //遍历模板添加文本框\n        var _iterator = _createForOfIteratorHelper(vm.smsTemplateList),\n          _step;\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var item = _step.value;\n            if (item.id === id) {\n              var templateParam = {};\n              if (typeof item.templateParams == 'string') {\n                templateParam = JSON.parse(item.templateParams);\n              } else {\n                templateParam = item.templateParams;\n              }\n              for (var prop in templateParam) {\n                templateParam[prop] = '';\n              }\n              vm.smsTemplate = item;\n              if (vm.type !== 'view') {\n                console.log('赋值');\n                vm.smsTask.templateParam = templateParam;\n                // vm.smsTask.content = item.content\n                this.content = item.content;\n              }\n              break;\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n        vm.changeContent();\n      }\n    },\n    //模板文本框输入内容\n    templateCode: function templateCode(val, key) {\n      var vm = this;\n      vm.smsTask.templateParam[key] = val;\n      vm.changeContent();\n    },\n    //短信内容处理\n    changeContent: function changeContent() {\n      var vm = this;\n      if (!vm.smsTemplate) {\n        return;\n      }\n      var type = vm.smsTemplate.providerType.code;\n      var content = vm.smsTemplate.content;\n      for (var key in vm.smsTask.templateParam) {\n        var strs = '';\n        if (type == \"TENCENT\") {\n          strs = '{' + key + '}';\n        } else {\n          strs = '${' + key + '}';\n        }\n        if (vm.smsTask.templateParam[key]) {\n          content = content.replace(strs, vm.smsTask.templateParam[key]);\n        }\n      }\n      if (vm.type !== 'view') {\n        console.log('赋值');\n        vm.smsTask.content = content;\n      }\n    },\n    initSmsTemplateList: function () {\n      var _initSmsTemplateList = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var _this3 = this;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return smsTemplateApi.page({\n                current: 1,\n                size: 10000,\n                model: {}\n              }).then(function (response) {\n                var res = response.data;\n                if (res.isSuccess) {\n                  _this3.smsTemplateList = res.data.records;\n                }\n              });\n            case 2:\n              _context2.next = 4;\n              return this.loadSmsTask();\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function initSmsTemplateList() {\n        return _initSmsTemplateList.apply(this, arguments);\n      }\n      return initSmsTemplateList;\n    }(),\n    initSmsTask: function initSmsTask() {\n      return {\n        templateId: '',\n        topic: '',\n        templateParam: {},\n        sendTime: null,\n        content: '',\n        draft: false,\n        status: {\n          code: '',\n          desc: ''\n        }\n      };\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.smsTask = this.initSmsTask();\n      this.telNumList = [];\n    },\n    submitForm: function submitForm(draft) {\n      var vm = this;\n      if (vm.smsTask.templateParam && Object.keys(vm.smsTask.templateParam).length > 0) {\n        var flag = false;\n        for (var key in vm.smsTask.templateParam) {\n          if (!vm.smsTask.templateParam[key]) {\n            flag = true;\n            break;\n          }\n        }\n        if (flag) {\n          vm.$message({\n            message: '发送内容不能为空',\n            type: 'error'\n          });\n          return;\n        }\n      } else {\n        vm.$message({\n          message: '发送内容不能为空',\n          type: 'error'\n        });\n        return;\n      }\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          vm.editSubmit(draft);\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit(draft) {\n      var vm = this;\n      vm.smsTask.draft = draft;\n      vm.smsTask.telNum = vm.telNumList;\n      if (!vm.timing) {\n        vm.smsTask.sendTime = null;\n      }\n      if (vm.type === 'edit') {\n        vm.update();\n      } else {\n        vm.save();\n      }\n    },\n    save: function save() {\n      var vm = this;\n      vm.disabled = true;\n      smsTaskApi.save(vm.smsTask).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.$message({\n            message: vm.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          vm.reset();\n          vm.$router.push('/resources/sms');\n        }\n      }).finally(function () {\n        vm.disabled = false;\n      });\n    },\n    update: function update() {\n      var vm = this;\n      vm.disabled = true;\n      smsTaskApi.update(vm.smsTask).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.$message({\n            message: vm.$t('tips.createSuccess'),\n            type: 'success'\n          });\n          vm.reset();\n          vm.$router.push('/resources/sms');\n        }\n      }).finally(function () {\n        return vm.disabled = false;\n      });\n    },\n    handleClose: function handleClose(tag) {\n      this.telNumList.splice(this.telNumList.indexOf(tag), 1);\n    },\n    showInput: function showInput() {\n      var _this4 = this;\n      this.telNumVisible = true;\n      this.$nextTick(function () {\n        _this4.$refs.saveTagInput.$refs.input.focus();\n      });\n    },\n    handleInputConfirm: function handleInputConfirm() {\n      var vm = this;\n      // 正则校验\n      var inputValue = vm.telNum;\n      if (inputValue) {\n        if (!validMobile(inputValue)) {\n          this.$message({\n            message: '该手机号不合法',\n            type: 'error'\n          });\n          vm.$refs.saveTagInput.focus();\n          return;\n        }\n        if (this.telNumList.indexOf(inputValue) === -1) {\n          vm.telNumList.push(inputValue);\n          vm.telNumVisible = false;\n          vm.telNum = '';\n        } else {\n          this.$message({\n            message: '该账号已经存在',\n            type: 'error'\n          });\n          vm.$refs.saveTagInput.focus();\n        }\n      } else {\n        this.telNumVisible = false;\n      }\n    }\n  }\n};",null]}