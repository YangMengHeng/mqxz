{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.array.sort\";\nimport _defineProperty from \"E:/project/lamp-web-master(finish/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.regexp.search\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination';\nimport { readUserAgent } from '@/utils/utils';\nimport optLogApi from '@/api/OptLog.js';\nimport { convertEnum } from '@/utils/utils';\nimport elDragDialog from '@/directive/el-drag-dialog';\nimport { downloadFile, initEnums, initQueryParams } from '@/utils/commons';\nexport default {\n  name: 'OptLog',\n  directives: {\n    elDragDialog: elDragDialog\n  },\n  components: {\n    Pagination: Pagination\n  },\n  filters: {\n    timeFilter: function timeFilter(time) {\n      if (time < 500) {\n        return 'success';\n      } else if (time < 1000) {\n        return '';\n      } else if (time < 1500) {\n        return 'warning';\n      } else {\n        return 'danger';\n      }\n    }\n  },\n  data: function data() {\n    return {\n      tableKey: 0,\n      loading: false,\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      queryParams: initQueryParams({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        },\n        sort: 'createTime'\n      }),\n      selection: [],\n      tableData: {},\n      enums: {\n        LogType: {},\n        HttpMethod: {}\n      },\n      drawer: false,\n      currentRow: {}\n    };\n  },\n  computed: {\n    typeFilters: function typeFilters() {\n      return convertEnum(this.enums.LogType);\n    },\n    httpMethodFilters: function httpMethodFilters() {\n      return convertEnum(this.enums.HttpMethod);\n    }\n  },\n  mounted: function mounted() {\n    initEnums(['LogType', 'HttpMethod'], this.enums);\n    this.fetch();\n  },\n  methods: {\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    exportExcelPreview: function exportExcelPreview() {\n      var _this = this;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      optLogApi.preview(this.queryParams).then(function (response) {\n        var res = response.data;\n        _this.preview.isVisible = true;\n        _this.preview.context = res.data;\n      });\n    },\n    exportExcel: function exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      optLogApi.export(this.queryParams).then(function (response) {\n        downloadFile(response);\n      });\n    },\n    fetch: function fetch() {\n      var _this2 = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      optLogApi.page(this.queryParams).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this2.tableData = res.data;\n        }\n      }).finally(function () {\n        return _this2.loading = false;\n      });\n    },\n    clear: function clear(type) {\n      var _this3 = this;\n      this.$confirm('确认要清除日志吗？', this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      }).then(function () {\n        optLogApi.clear({\n          type: type\n        }).then(function (response) {\n          var res = response.data;\n          if (res.isSuccess) {\n            _this3.$message({\n              message: _this3.$t(\"tips.deleteSuccess\"),\n              type: \"success\"\n            });\n          }\n          _this3.search();\n        });\n      }).catch(function () {});\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this4 = this;\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        });\n        return;\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(function () {\n        var logIds = _this4.selection.map(function (item) {\n          return item.id;\n        });\n        _this4.delete(logIds);\n      }).catch(function () {\n        _this4.clearSelections();\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(logIds) {\n      var _this5 = this;\n      optLogApi.delete(logIds).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this5.$message({\n            message: _this5.$t('tips.deleteSuccess'),\n            type: 'success'\n          });\n        }\n        _this5.search();\n      });\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n    },\n    reset: function reset() {\n      this.queryParams = initQueryParams({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        }\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    transTime: function transTime(time) {\n      return \"\".concat(time, \" ms\");\n    },\n    sortChange: function sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange: function filterChange(filters) {\n      for (var key in filters) {\n        if (key.includes('.')) {\n          var val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n      this.search();\n    },\n    cellClick: function cellClick(row, column) {\n      var _this6 = this;\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      var flag = false;\n      this.selection.forEach(function (item) {\n        if (item.id === row.id) {\n          flag = true;\n          _this6.$refs.table.toggleRowSelection(row);\n        }\n      });\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    onView: function onView(row) {\n      var _this7 = this;\n      optLogApi.get(row.id).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this7.currentRow = res.data;\n          _this7.drawer = true;\n        }\n      });\n    },\n    closeDrawer: function closeDrawer(done) {\n      done();\n      this.currentRow = {};\n    },\n    uaForamt: function uaForamt(row) {\n      var ua = readUserAgent(row.ua);\n      return ua.terminal + '  |  ' + ua.browser;\n    }\n  }\n};",{"version":3,"names":["Pagination","readUserAgent","optLogApi","convertEnum","elDragDialog","downloadFile","initEnums","initQueryParams","name","directives","components","filters","timeFilter","time","data","tableKey","loading","preview","isVisible","context","queryParams","model","type","key","httpMethod","sort","selection","tableData","enums","LogType","HttpMethod","drawer","currentRow","computed","typeFilters","httpMethodFilters","mounted","fetch","methods","onSelectChange","exportExcelPreview","_this","timeRange","extra","createTime_st","createTime_ed","fileName","then","response","res","exportExcel","export","_this2","params","arguments","length","undefined","current","size","page","isSuccess","finally","clear","_this3","$confirm","$t","confirmButtonText","cancelButtonText","$message","message","search","catch","singleDelete","row","$refs","table","clearSelection","toggleRowSelection","batchDelete","_this4","logIds","map","item","id","delete","clearSelections","_delete","_this5","_objectSpread","reset","clearSort","clearFilter","transTime","concat","sortChange","val","prop","order","filterChange","includes","split","cellClick","column","_this6","flag","forEach","onView","_this7","get","closeDrawer","done","uaForamt","ua","terminal","browser"],"sources":["src/views/lamp/system/optLog/index.vue"],"sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.optLog.userName')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.userName\"/>\n      <el-input :placeholder=\"$t('table.optLog.requestIp')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.requestIp\"/>\n      <el-date-picker\n        :range-separator=\"null\"\n        :start-placeholder=\"$t('table.createTime')\"\n        class=\"filter-item search-item date-range-item\"\n        format=\"yyyy-MM-dd HH:mm:ss\"\n        type=\"datetimerange\"\n        v-model=\"queryParams.timeRange\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">{{ $t('table.search') }}</el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">{{ $t('table.reset') }}</el-button>\n      <el-dropdown class=\"filter-item\" trigger=\"click\" v-has-any-permission=\"['authority:optLog:delete','authority:optLog:export']\">\n        <el-button>\n          {{ $t('table.more') }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['authority:optLog:delete']\">{{ $t('table.delete') }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['authority:optLog:export']\">{{ $t('table.export') }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['authority:optLog:export']\">\n            {{ $t(\"table.exportPreview\") }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n      <el-dropdown class=\"filter-item\" trigger=\"click\" v-has-any-permission=\"['authority:optLog:delete']\">\n        <el-button>\n          清理日志\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"clear(1)\" >\n            保留一个月\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(2)\" >\n            保留三个月\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(3)\" >\n            保留六个月\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(4)\" >\n            保留一年\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(5)\" >\n            保留一千条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(6)\" >\n            保留一万条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(7)\" >\n            保留三万条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(8)\" >\n            保留十万条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(9)\" >\n            清空所有\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.optLog.userName')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"userName\"\n                       width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.userName }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.requestUri')\" :show-overflow-tooltip=\"true\" align=\"left\"\n                       min-width=\"120px\" prop=\"requestUri\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.requestUri }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        :filters=\"httpMethodFilters\"\n        :label=\"$t('table.optLog.httpMethod')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        column-key=\"httpMethod\"\n        prop=\"httpMethod\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.httpMethod.desc }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.requestIp')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"requestIp\" width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.requestIp }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.description')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       min-width=\"100px\" prop=\"description\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.description }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :filter-multiple=\"false\" :filters=\"typeFilters\" :label=\"$t('table.optLog.type')\"\n                       :show-overflow-tooltip=\"true\" align=\"center\" column-key=\"type\" prop=\"type\" width=\"80px\">\n        <template slot-scope=\"scope\">\n          <span>\n            <el-badge :type=\"(scope.row.type && scope.row.type.code == 'OPT')? 'success':'danger' \" class=\"item\"\n                      is-dot/>\n            {{ scope.row.type.desc }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.actionMethod')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       min-width=\"120px\" prop=\"actionMethod\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.classPath + '.' + scope.row.actionMethod }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('table.optLog.startTime')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"startTime\" sortable=\"custom\" width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.startTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.consumingTime')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"consumingTime\" width=\"110px\">\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.consumingTime | timeFilter\">{{ transTime(row.consumingTime) }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column :formatter=\"uaForamt\" label=\"终端 | 浏览器\" prop=\"ua\" width=\"120\"/>\n      <el-table-column :label=\"$t('table.operation')\" column-key=\"operation\" align=\"center\" class-name=\"small-padding fixed-width\"\n                       width=\"110px\">\n        <template slot-scope=\"{row}\">\n          <i @click=\"singleDelete(row)\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\"\n             v-has-permission=\"['authority:optLog:delete']\"/>\n          <i @click=\"onView(row)\" class=\"el-icon-view table-operation\" style=\"color: #87d068;\"\n             v-has-permission=\"['authority:optLog:view']\"/>\n          <el-link class=\"no-perm\" v-has-no-permission=\"['authority:optLog:delete','authority:optLog:view']\">{{ $t('tips.noPermission') }}\n          </el-link>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\" :total=\"Number(tableData.total)\"\n                @pagination=\"fetch\" v-show=\"tableData.total>0\"/>\n\n    <el-drawer :before-close=\"closeDrawer\" :visible.sync=\"drawer\" direction=\"rtl\" v-model=\"currentRow\">\n      <div class=\"clearfix\" slot=\"title\">\n        <el-badge :type=\"(currentRow.type && currentRow.type.code == 'OPT')? 'success':'danger' \" class=\"item\" is-dot/>\n        {{ currentRow.type ? currentRow.type.desc : '' }}\n        {{ currentRow.requestUri }}\n      </div>\n      <el-scrollbar style=\"height: 100%;\">\n        <el-card class=\"box-card\">\n          <div class=\"box-item\">\n            <span class=\"field-label\">执行方法:</span>\n            <aside>{{ currentRow.classPath + '.' + currentRow.actionMethod + '()' }}</aside>\n          </div>\n\n          <div class=\"box-item\">\n            <span class=\"field-label\">请求参数:</span>\n            <aside style>{{ currentRow.params }}</aside>\n          </div>\n\n          <div class=\"box-item\">\n            <span class=\"field-label\">响应信息:</span>\n            <aside style>\n              <pre style=\"white-space: pre-wrap;\">{{ currentRow.result ? JSON.stringify(JSON.parse(currentRow.result), null, 4) : '' }}</pre>\n            </aside>\n          </div>\n          <div class=\"box-item\" v-if=\"currentRow.type && currentRow.type['code']==='EX'\">\n            <span class=\"field-label\">错误信息:</span>\n            <aside>{{ currentRow.exDetail }}</aside>\n          </div>\n        </el-card>\n      </el-scrollbar>\n    </el-drawer>\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n      v-el-drag-dialog\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n<script>\n  import Pagination from '@/components/Pagination'\n  import {readUserAgent} from '@/utils/utils'\n  import optLogApi from '@/api/OptLog.js'\n  import {convertEnum} from '@/utils/utils'\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import { downloadFile, initEnums, initQueryParams } from '@/utils/commons'\n\n  export default {\n    name: 'OptLog',\n    directives: { elDragDialog },\n    components: {Pagination},\n    filters: {\n      timeFilter(time) {\n        if (time < 500) {\n          return 'success'\n        } else if (time < 1000) {\n          return ''\n        } else if (time < 1500) {\n          return 'warning'\n        } else {\n          return 'danger'\n        }\n      }\n    },\n    data() {\n      return {\n        tableKey: 0,\n        loading: false,\n        preview: {\n          isVisible: false,\n          context: ''\n        },\n        queryParams: initQueryParams({\n          model: {\n            type: {\n              key: null\n            },\n            httpMethod: {\n              key: null\n            }\n          },\n          sort: 'createTime'\n        }),\n        selection: [],\n        tableData: {},\n        enums: {\n          LogType: {},\n          HttpMethod: {},\n        },\n        drawer: false,\n        currentRow: {}\n      }\n    },\n    computed: {\n      typeFilters() {\n        return convertEnum(this.enums.LogType)\n      },\n      httpMethodFilters() {\n        return convertEnum(this.enums.HttpMethod)\n      }\n    },\n    mounted() {\n      initEnums(['LogType', 'HttpMethod'], this.enums)\n      this.fetch()\n    },\n    methods: {\n      onSelectChange(selection) {\n        this.selection = selection\n      },\n      exportExcelPreview() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出操作日志';\n        optLogApi.preview(this.queryParams).then(response => {\n          const res = response.data;\n          this.preview.isVisible = true;\n          this.preview.context = res.data;\n        });\n      },\n      exportExcel() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出操作日志';\n        optLogApi.export(this.queryParams).then(response => {\n          downloadFile(response);\n        });\n      },\n      fetch(params = {}) {\n        this.loading = true;\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n        optLogApi.page(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      clear(type) {\n        this.$confirm('确认要清除日志吗？', this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n          .then(() => {\n            optLogApi.clear({type: type}).then(response => {\n              const res = response.data;\n              if (res.isSuccess) {\n                this.$message({\n                  message: this.$t(\"tips.deleteSuccess\"),\n                  type: \"success\"\n                });\n              }\n\n              this.search();\n            });\n\n          })\n          .catch(() => {\n          });\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection()\n        this.$refs.table.toggleRowSelection(row, true)\n        this.batchDelete()\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t('tips.noDataSelected'),\n            type: 'warning'\n          })\n          return\n        }\n        this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          const logIds = this.selection.map(item => item.id)\n          this.delete(logIds)\n        }).catch(() => {\n          this.clearSelections()\n        })\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection()\n      },\n      delete(logIds) {\n        optLogApi.delete(logIds)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.deleteSuccess'),\n                type: 'success'\n              })\n            }\n            this.search()\n          })\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        })\n      },\n      reset() {\n        this.queryParams = initQueryParams({\n          model: {\n            type: {\n              key: null\n            },\n            httpMethod: {\n              key: null\n            }\n          }\n        });\n        this.$refs.table.clearSort()\n        this.$refs.table.clearFilter()\n        this.search()\n      },\n      transTime(time) {\n        return `${time} ms`\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      cellClick (row, column) {\n        if (column['columnKey'] === \"operation\") {\n          return;\n        }\n        let flag = false;\n        this.selection.forEach((item)=>{\n          if(item.id === row.id) {\n            flag = true;\n            this.$refs.table.toggleRowSelection(row);\n          }\n        })\n\n        if(!flag){\n          this.$refs.table.toggleRowSelection(row, true);\n        }\n      },\n      onView(row) {\n        optLogApi.get(row.id) .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.currentRow = res.data\n            this.drawer = true\n          }\n        })\n      },\n      closeDrawer(done) {\n        done()\n        this.currentRow = {}\n      },\n      uaForamt(row) {\n        let ua = readUserAgent(row.ua)\n        return ua.terminal + '  |  ' + ua.browser\n      }\n\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n  .item {\n    margin-top: 7px;\n  }\n\n  .drawer-item {\n    margin-top: 6px;\n  }\n\n  .box-item {\n    margin-top: 15px;\n\n    aside {\n      word-wrap: break-word;\n      margin-top: 15px;\n    }\n\n    pre {\n      white-space: pre-wrap;\n      font-size: 0.8em;\n      line-height: 1.5em;\n    }\n  }\n</style>\n"],"mappings":"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"}]}