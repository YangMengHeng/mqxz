{"remainingRequest":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\lamp-web-master\\src\\views\\lamp\\activiti\\deploymentManager\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\lamp-web-master\\src\\views\\lamp\\activiti\\deploymentManager\\index.vue","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.regexp.search\");\nvar _defineProperty2 = _interopRequireDefault(require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/defineProperty.js\"));\nrequire(\"core-js/modules/web.dom.iterable\");\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\nvar _xmlView = _interopRequireDefault(require(\"./xmlView\"));\nvar _upload = _interopRequireDefault(require(\"./upload\"));\nvar _Activiti = _interopRequireDefault(require(\"@/api/Activiti.js\"));\nvar _commons = require(\"@/utils/commons\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: \"DeploymentManage\",\n  components: {\n    Pagination: _Pagination.default,\n    XmlView: _xmlView.default,\n    Upload: _upload.default\n  },\n  filters: {},\n  data: function data() {\n    return {\n      viewUrl: null,\n      viewXMLTag: false,\n      uploadTag: false,\n      viewTag: false,\n      suspendStateType: {\n        start: '1',\n        stop: '2'\n      },\n      tableKey: 0,\n      queryParams: (0, _commons.initQueryParams)({\n        model: {}\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        records: [],\n        total: 0\n      }\n    };\n  },\n  computed: {},\n  mounted: function mounted() {\n    this.fetch();\n  },\n  methods: {\n    fetch: function fetch() {\n      var _this = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      _Activiti.default.pageDefinition(this.queryParams).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this.tableData.records = res.data.records;\n          _this.tableData.total = res.data.total;\n        }\n      }).finally(function () {\n        return _this.loading = false;\n      });\n    },\n    cellClick: function cellClick(row, column) {\n      var _this2 = this;\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      var flag = false;\n      this.selection.forEach(function (item) {\n        if (item.id === row.id) {\n          flag = true;\n          _this2.$refs.table.toggleRowSelection(row);\n        }\n      });\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    editClose: function editClose() {\n      this.reset();\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n    },\n    reset: function reset() {\n      this.queryParams = (0, _commons.initQueryParams)({\n        model: {}\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleEdit: function singleEdit(row) {\n      var _this3 = this;\n      var vm = this;\n      var data = {\n        id: row.id,\n        suspendState: row.suspendState\n      };\n      _Activiti.default.updateSuspendState(data).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this3.$message({\n            message: _this3.$t(\"tips.updateSuccess\"),\n            type: 'success'\n          });\n          _this3.search();\n        } else {\n          _this3.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(function () {\n        return _this3.loading = false;\n      });\n    },\n    singleDelete: function singleDelete(row) {\n      var _this4 = this;\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      }).then(function () {\n        _this4.delete([row.deploymentId]);\n      }).catch(function () {\n        _this4.reset();\n      });\n    },\n    singleView: function singleView(row) {\n      var vm = this;\n      vm.viewTag = true;\n      vm.viewUrl = \"/api/activiti/static/readResource?pdid=\".concat(row.id, \"&resourceName=\").concat(row.diagramResourceName);\n    },\n    singleViewXML: function singleViewXML(row) {\n      var vm = this;\n      vm.$refs.XmlView.open(row);\n    },\n    delete: function _delete(data) {\n      var _this5 = this;\n      _Activiti.default.deleteDefinition(data).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this5.$message({\n            message: _this5.$t(\"tips.deleteSuccess\"),\n            type: 'success'\n          });\n          _this5.search();\n        } else {\n          _this5.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(function () {\n        return _this5.loading = false;\n      });\n    },\n    upload: function upload() {\n      this.uploadTag = true;\n    },\n    singleMappingrow: function singleMappingrow(row) {\n      var _this6 = this;\n      _Activiti.default.saveModelByPro({\n        processDefinitionId: row.id\n      }).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this6.$message({\n            message: _this6.$t(\"tips.mappingSuccess\"),\n            type: 'success'\n          });\n          _this6.search();\n        } else {\n          _this6.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(function () {\n        return _this6.loading = false;\n      });\n    },\n    uploadClose: function uploadClose() {\n      this.uploadTag = false;\n    },\n    uploadSuccess: function uploadSuccess() {\n      this.search();\n    }\n  }\n};\nexports.default = _default;",null]}