{"remainingRequest":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\lamp-web-master\\src\\views\\lamp\\org\\org\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\lamp-web-master\\src\\views\\lamp\\org\\org\\index.vue","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nvar _defineProperty2 = _interopRequireDefault(require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/defineProperty.js\"));\nvar _Org = _interopRequireDefault(require(\"@/api/Org.js\"));\nvar _elDragDialog = _interopRequireDefault(require(\"@/directive/el-drag-dialog\"));\nvar _Import = _interopRequireDefault(require(\"@/components/lamp/Import\"));\nvar _commons = require(\"@/utils/commons\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: 'OrgManager',\n  directives: {\n    elDragDialog: _elDragDialog.default\n  },\n  components: {\n    FileImport: _Import.default\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      label: '',\n      orgTree: [],\n      org: this.initOrg(),\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: \"\".concat(process.env.VUE_APP_BASE_API, \"/authority/org/import\")\n      },\n      rules: {\n        label: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }, {\n          min: 1,\n          max: 255,\n          message: this.$t('rules.range3to10'),\n          trigger: 'blur'\n        }],\n        type: [{\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'change'\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (value === null || value.trim().length <= 0) {\n              callback(_this.$t('rules.require'));\n            } else {\n              callback();\n            }\n          },\n          trigger: 'change'\n        }]\n      },\n      dicts: {\n        ORG_TYPE: []\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.initOrgTree();\n    (0, _commons.initDicts)(['ORG_TYPE'], this.dicts);\n  },\n  methods: {\n    initOrg: function initOrg() {\n      return {\n        id: '',\n        abbreviation: '',\n        label: '',\n        type: '',\n        parentId: 0,\n        state: true,\n        describe: '',\n        sortValue: 0\n      };\n    },\n    initOrgTree: function initOrgTree() {\n      var _this2 = this;\n      _Org.default.allTree({}).then(function (response) {\n        var res = response.data;\n        _this2.orgTree = res.data;\n      });\n    },\n    exportExcelPreview: function exportExcelPreview() {\n      var _this3 = this;\n      var queryParams = {\n        model: {},\n        map: {\n          fileName: '导出组织数据'\n        },\n        size: 10000\n      };\n      _Org.default.preview(queryParams).then(function (response) {\n        var res = response.data;\n        _this3.preview.isVisible = true;\n        _this3.preview.context = res.data;\n      });\n    },\n    exportExcel: function exportExcel() {\n      var queryParams = {\n        model: {},\n        map: {\n          fileName: '导出组织数据'\n        },\n        size: 10000\n      };\n      _Org.default.export(queryParams).then(function (response) {\n        (0, _commons.downloadFile)(response);\n      });\n    },\n    importExcel: function importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess: function importSuccess() {\n      this.initOrgTree();\n    },\n    importClose: function importClose() {\n      this.fileImport.isVisible = false;\n    },\n    handleNumChange: function handleNumChange(val) {\n      this.org.sortValue = val;\n    },\n    filterNode: function filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    },\n    nodeClick: function nodeClick(data) {\n      this.org = _objectSpread({}, data);\n      this.$refs.form.clearValidate();\n    },\n    add: function add() {\n      this.resetForm();\n      var checked = this.$refs.orgTree.getCheckedKeys();\n      if (checked.length > 1) {\n        this.$message({\n          message: this.$t('tips.onlyChooseOne'),\n          type: 'warning'\n        });\n      } else if (checked.length > 0) {\n        this.org.parentId = checked[0];\n      } else {\n        this.org.parentId = 0;\n      }\n    },\n    deleteOrg: function deleteOrg() {\n      var _this4 = this;\n      var checked = this.$refs.orgTree.getCheckedKeys();\n      if (checked.length === 0) {\n        this.$message({\n          message: this.$t('tips.noNodeSelected'),\n          type: 'warning'\n        });\n      } else {\n        this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(function () {\n          _Org.default.delete(checked).then(function (response) {\n            var res = response.data;\n            if (res.isSuccess) {\n              _this4.$message({\n                message: _this4.$t('tips.deleteSuccess'),\n                type: 'success'\n              });\n            }\n            _this4.reset();\n          });\n        }).catch(function () {\n          _this4.$refs.orgTree.setCheckedKeys([]);\n        });\n      }\n    },\n    search: function search() {\n      this.$refs.orgTree.filter(this.label);\n    },\n    reset: function reset() {\n      this.initOrgTree();\n      this.label = '';\n      this.resetForm();\n    },\n    submit: function submit() {\n      var _this5 = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          if (_this5.org.id) {\n            _this5.update();\n          } else {\n            _this5.save();\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    save: function save() {\n      var _this6 = this;\n      _Org.default.save(_objectSpread({}, this.org)).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this6.$message({\n            message: _this6.$t('tips.createSuccess'),\n            type: 'success'\n          });\n        }\n        _this6.reset();\n      });\n    },\n    update: function update() {\n      var _this7 = this;\n      _Org.default.update(_objectSpread({}, this.org)).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this7.$message({\n            message: _this7.$t('tips.updateSuccess'),\n            type: 'success'\n          });\n        }\n        _this7.reset();\n      });\n    },\n    resetForm: function resetForm() {\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.org = this.initOrg();\n    }\n  }\n};\nexports.default = _default;",null]}