{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\utils\\request.js","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\utils\\request.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609}],"contextDependencies":[],"result":["import \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"E:/project/lamp-web1(\\u539F\\u7248)/lamp-web-master/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport \"core-js/modules/es6.object.keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.is\";\nimport axios from 'axios';\nimport { Message } from 'element-ui';\nimport store from '@/store/index';\nimport { getToken, getRefreshToken, getExpireTime } from '@/utils/auth';\nimport NProgress from 'nprogress';\nimport 'nprogress/nprogress.css';\nvar service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  timeout: 10000,\n  responseType: 'json',\n  validateStatus: function validateStatus(status) {\n    return status === 200;\n  }\n});\nvar refresh_service = axios.create({\n  baseURL: process.env.VUE_APP_BASE_API,\n  timeout: 10000,\n  responseType: 'json',\n  validateStatus: function validateStatus(status) {\n    return status === 200;\n  }\n});\nservice.interceptors.request.use(function (config) {\n  var _config = config;\n  try {\n    var expireTime = getExpireTime();\n    if (expireTime) {\n      var left = expireTime - new Date().getTime();\n      var refreshToken = getRefreshToken();\n      if (left < 5 * 60 * 1000 && refreshToken) {\n        _config = queryRefreshToken(_config, refreshToken);\n      } else {\n        if (getToken()) {\n          _config.headers['Authorization'] = 'bearer ' + getToken();\n        }\n      }\n    }\n  } catch (e) {\n    console.error(e);\n  }\n  return _config;\n}, function (error) {\n  console.log(error);\n  return Promise.reject(error);\n});\n\n// response interceptor\nservice.interceptors.response.use(function (config) {\n  return config;\n}, function (error) {\n  if (error.response) {\n    var errorMessage = error.response.data === null ? '系统内部异常，请联系网站管理员' : error.response.data.message;\n    switch (error.response.status) {\n      case 404:\n        Message({\n          message: '很抱歉，资源未找到' || 'Error',\n          type: 'error',\n          duration: 5 * 1000\n        });\n        break;\n      case 403:\n        Message({\n          message: '很抱歉，您暂无该操作权限' || 'Error',\n          type: 'error',\n          duration: 5 * 1000\n        });\n        break;\n      case 401:\n        Message({\n          message: '很抱歉，认证已失效，请重新登录' || 'Error',\n          type: 'error',\n          duration: 5 * 1000\n        });\n        break;\n      default:\n        if (errorMessage) {\n          Message({\n            message: errorMessage,\n            type: 'error',\n            duration: 5 * 1000\n          });\n        }\n        break;\n    }\n  }\n  return Promise.reject(error);\n});\nvar request = {\n  refresh: function refresh(url, params) {\n    params['grant_type'] = 'refresh_token';\n    return refresh_service.post(url, params, {\n      transformRequest: [function (params) {\n        return tansParams(params);\n      }],\n      headers: {\n        'Authorization': 'Basic ZmViczoxMjM0NTY='\n      }\n    });\n  },\n  login: function login(url, params) {\n    params['grant_type'] = 'password';\n    return service.post(url, params, {\n      transformRequest: [function (params) {\n        return tansParams(params);\n      }],\n      headers: {\n        'Authorization': 'Basic ZmViczoxMjM0NTY='\n      }\n    });\n  },\n  post: function post(url, params) {\n    return service.post(url, params, {\n      transformRequest: [function (params) {\n        return tansParams(params);\n      }],\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n  },\n  put: function put(url, params) {\n    return service.put(url, params, {\n      transformRequest: [function (params) {\n        return tansParams(params);\n      }],\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    });\n  },\n  get: function get(url, params) {\n    var _params;\n    if (Object.is(params, undefined)) {\n      _params = '';\n    } else {\n      _params = '?';\n      for (var key in params) {\n        if (params.hasOwnProperty(key) && params[key] !== null) {\n          _params += \"\".concat(key, \"=\").concat(params[key], \"&\");\n        }\n      }\n    }\n    return service.get(\"\".concat(url).concat(_params));\n  },\n  delete: function _delete(url, params) {\n    var _params;\n    if (Object.is(params, undefined)) {\n      _params = '';\n    } else {\n      _params = '?';\n      for (var key in params) {\n        if (params.hasOwnProperty(key) && params[key] !== null) {\n          _params += \"\".concat(key, \"=\").concat(params[key], \"&\");\n        }\n      }\n    }\n    return service.delete(\"\".concat(url).concat(_params));\n  },\n  download: function download(url, params, filename) {\n    NProgress.start();\n    return service.post(url, params, {\n      transformRequest: [function (params) {\n        return tansParams(params);\n      }],\n      responseType: 'blob'\n    }).then(function (r) {\n      var content = r.data;\n      var blob = new Blob([content]);\n      if ('download' in document.createElement('a')) {\n        var elink = document.createElement('a');\n        elink.download = filename;\n        elink.style.display = 'none';\n        elink.href = URL.createObjectURL(blob);\n        document.body.appendChild(elink);\n        elink.click();\n        URL.revokeObjectURL(elink.href);\n        document.body.removeChild(elink);\n      } else {\n        navigator.msSaveBlob(blob, filename);\n      }\n      NProgress.done();\n    }).catch(function (r) {\n      console.error(r);\n      NProgress.done();\n      Message({\n        message: '下载失败',\n        type: 'error',\n        duration: 5 * 1000\n      });\n    });\n  },\n  upload: function upload(url, params) {\n    return service.post(url, params, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n  }\n};\nfunction tansParams(params) {\n  var result = '';\n  Object.keys(params).forEach(function (key) {\n    if (!Object.is(params[key], undefined) && !Object.is(params[key], null)) {\n      result += encodeURIComponent(key) + '=' + encodeURIComponent(params[key]) + '&';\n    }\n  });\n  return result;\n}\nfunction queryRefreshToken(_x, _x2) {\n  return _queryRefreshToken.apply(this, arguments);\n}\nfunction _queryRefreshToken() {\n  _queryRefreshToken = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(config, refreshToken) {\n    var result;\n    return regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return request.refresh('authority/anno/login', {\n            // const result = await request.refresh('auth/oauth/token', {\n            refresh_token: refreshToken\n          });\n        case 2:\n          result = _context.sent;\n          if (result.status === 200) {\n            saveData(result.data);\n            config.headers['Authorization'] = 'bearer ' + getToken();\n          }\n          return _context.abrupt(\"return\", config);\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _queryRefreshToken.apply(this, arguments);\n}\nfunction saveData(data) {\n  store.commit('account/setAccessToken', data.access_token);\n  store.commit('account/setRefreshToken', data.refresh_token);\n  var current = new Date();\n  var expireTime = current.setTime(current.getTime() + 1000 * data.expires_in);\n  store.commit('account/setExpireTime', expireTime);\n}\nexport default request;",null]}