{"remainingRequest":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\lamp-web-master\\src\\views\\lamp\\tenant\\datasourceConfig\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\lamp-web-master\\src\\views\\lamp\\tenant\\datasourceConfig\\index.vue","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"core-js/modules/es6.array.sort\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.array.find-index\");\nvar _defineProperty2 = _interopRequireDefault(require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/defineProperty.js\"));\nrequire(\"core-js/modules/es6.regexp.search\");\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\nvar _edit = _interopRequireDefault(require(\"./edit\"));\nvar _DatasourceConfig = _interopRequireDefault(require(\"@/api/DatasourceConfig.js\"));\nvar _elDragDialog = _interopRequireDefault(require(\"@/directive/el-drag-dialog\"));\nvar _commons = require(\"@/utils/commons\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: \"DatasourceConfigManage\",\n  directives: {\n    elDragDialog: _elDragDialog.default\n  },\n  components: {\n    Pagination: _Pagination.default,\n    DatasourceConfigEdit: _edit.default\n  },\n  filters: {},\n  data: function data() {\n    return {\n      dialog: {\n        isVisible: false,\n        title: \"\"\n      },\n      isTestConnect: false,\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      tableKey: 0,\n      queryParams: (0, _commons.initQueryParams)({}),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {}\n    };\n  },\n  computed: {},\n  mounted: function mounted() {\n    this.fetch();\n  },\n  methods: {\n    editClose: function editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess: function editSuccess() {\n      this.search();\n    },\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n    },\n    reset: function reset() {\n      this.queryParams = (0, _commons.initQueryParams)({});\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview: function exportExcelPreview() {\n      var _this = this;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据源数据';\n      _DatasourceConfig.default.preview(this.queryParams).then(function (response) {\n        var res = response.data;\n        _this.preview.isVisible = true;\n        _this.preview.context = res.data;\n      });\n    },\n    exportExcel: function exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据源数据';\n      _DatasourceConfig.default.export(this.queryParams).then(function (response) {\n        (0, _commons.downloadFile)(response);\n      });\n    },\n    add: function add() {\n      this.$refs.edit.type = \"add\";\n      this.dialog.title = this.$t(\"common.add\");\n      this.dialog.isVisible = true;\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this2 = this;\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      var readonlyIndex = this.selection.findIndex(function (item) {\n        return item.readonly;\n      });\n      if (readonlyIndex > -1) {\n        this.$message({\n          message: this.$t(\"tips.readonly\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(\"删除数据源数据后，会导致运行中的租户无法正常运行，请谨慎删除\", this.$t(\"common.tips\"), {\n        confirmButtonText: \"坚决删除\",\n        cancelButtonText: \"取消\",\n        type: \"warning\",\n        closeOnClickModal: false,\n        closeOnPressEscape: false,\n        distinguishCancelAndClose: true\n      }).then(function () {\n        var ids = [];\n        var contain = false;\n        _this2.selection.forEach(function (item) {\n          if (item.readonly) {\n            contain = true;\n            return;\n          }\n          ids.push(item.id);\n        });\n        if (contain) {\n          _this2.$message({\n            message: _this2.$t(\"tips.readonly\"),\n            type: \"warning\"\n          });\n        } else {\n          _this2.delete(ids);\n        }\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(ids) {\n      var _this3 = this;\n      _DatasourceConfig.default.delete(ids).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this3.$message({\n            message: _this3.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n          _this3.search();\n        }\n      });\n    },\n    testConnect: function testConnect(row) {\n      var _this4 = this;\n      row.poolName = 'test';\n      if (this.isTestConnect) {\n        this.$message({\n          message: '正在测试连接，请稍后',\n          type: 'warn'\n        });\n        return;\n      }\n      var loading = this.$loading({\n        lock: true,\n        text: 'Loading',\n        spinner: 'el-icon-loading',\n        background: 'rgba(0, 0, 0, 0.7)'\n      });\n      this.isTestConnect = true;\n      _DatasourceConfig.default.testConnect(row).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess && res.data) {\n          _this4.$message({\n            message: '连接成功',\n            type: 'success'\n          });\n        } else {\n          _this4.$message({\n            message: '连接失败',\n            type: 'error'\n          });\n        }\n      }).catch(function (error) {\n        console.log(error);\n      }).finally(function () {\n        _this4.isTestConnect = false;\n        loading.close();\n      });\n    },\n    copy: function copy(row) {\n      this.$refs.edit.setDatasourceConfig(row);\n      this.$refs.edit.type = \"copy\";\n      this.dialog.title = this.$t(\"common.copy\");\n      this.dialog.isVisible = true;\n    },\n    edit: function edit(row) {\n      this.$refs.edit.setDatasourceConfig(row);\n      this.$refs.edit.type = \"edit\";\n      this.dialog.title = this.$t(\"common.edit\");\n      this.dialog.isVisible = true;\n    },\n    fetch: function fetch() {\n      var _this5 = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      _DatasourceConfig.default.page(this.queryParams).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this5.tableData = res.data;\n        }\n        // eslint-disable-next-line no-return-assign\n      }).finally(function () {\n        return _this5.loading = false;\n      });\n    },\n    sortChange: function sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange: function filterChange(filters) {\n      for (var key in filters) {\n        if (key.includes('.')) {\n          var val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n      this.search();\n    },\n    cellClick: function cellClick(row, column) {\n      var _this6 = this;\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      var flag = false;\n      this.selection.forEach(function (item) {\n        if (item.id === row.id) {\n          flag = true;\n          _this6.$refs.table.toggleRowSelection(row);\n        }\n      });\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n};\nexports.default = _default;",null]}