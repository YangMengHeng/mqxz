{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\components\\lamp\\fileUpload.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\components\\lamp\\fileUpload.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/project/lamp-web-master/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"regenerator-runtime/runtime\");\nvar _asyncToGenerator2 = _interopRequireDefault(require(\"E:/project/lamp-web-master/node_modules/@babel/runtime/helpers/asyncToGenerator.js\"));\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.function.name\");\nrequire(\"core-js/modules/es6.number.constructor\");\nvar _localstorage = _interopRequireDefault(require(\"@/utils/localstorage\"));\nvar _Common = _interopRequireDefault(require(\"@/api/Common.js\"));\nvar _utils = require(\"@/utils/utils\");\nvar _jsBase = require(\"js-base64\");\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default2 = {\n  name: \"FileUpload\",\n  props: {\n    uploadRef: {\n      type: String,\n      default: \"file1\"\n    },\n    // 是否多选\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    // 是否自动上传\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    // 是否上传文件\n    isUpload: {\n      type: Boolean,\n      default: true\n    },\n    // 最大允许上传个数\n    limit: {\n      type: Number,\n      default: null\n    },\n    // 允许上传的文件类型\n    accept: {\n      type: String,\n      default: \"\"\n    },\n    action: {\n      type: String,\n      default: \"\".concat(process.env.VUE_APP_BASE_API, \"/file/file/anyone/upload\")\n    },\n    // 允许上传的文件大小 单位：字节\n    acceptSize: {\n      type: Number,\n      default: null\n    },\n    // 默认额外上传数据\n    fileOtherData: {\n      type: Object,\n      default: function _default() {\n        return {\n          id: null,\n          bizId: \"\",\n          bizType: \"\",\n          isSingle: false\n        };\n      }\n    }\n  },\n  data: function data() {\n    return {\n      // 默认附件列表\n      fileList: [],\n      // 删除附件列表\n      removeFileAry: [],\n      // 新增附件列表\n      addFileAry: [],\n      // 上传成功的文件数\n      successNum: 0,\n      // 上传失败的文件数\n      errorNum: 0,\n      // 已上传的文件数\n      uploadTotalNum: 0,\n      // 是否上传失败\n      isUploadError: false\n      // action: `${process.env.VUE_APP_BASE_API}/file/file/anyone/upload`\n    };\n  },\n\n  computed: {\n    headers: function headers() {\n      return {\n        token: 'Bearer ' + _localstorage.default.get(\"TOKEN\", \"\"),\n        tenant: _localstorage.default.get(\"TENANT\", \"\") || \"\",\n        Authorization: \"Basic \".concat(_jsBase.Base64.encode(\"\".concat(process.env.VUE_APP_CLIENT_ID, \":\").concat(process.env.VUE_APP_CLIENT_SECRET)))\n      };\n    }\n  },\n  methods: {\n    // 附件初始化\n    init: function init(_ref) {\n      var id = _ref.id,\n        bizId = _ref.bizId,\n        bizType = _ref.bizType,\n        isSingle = _ref.isSingle,\n        isDetail = _ref.isDetail;\n      var vm = this;\n      vm.fileOtherData.bizId = bizId;\n      vm.fileOtherData.id = id || \"\";\n      vm.fileOtherData.bizType = bizType;\n      vm.fileOtherData.isSingle = isSingle || false;\n      vm.fileList.length = 0;\n      vm.removeFileAry = [];\n      vm.addFileAry = [];\n      vm.$emit(\"fileLengthVaild\", 0);\n      if (isDetail) {\n        vm.getAttachment();\n      }\n      vm.successNum = 0;\n      vm.errorNum = 0;\n      vm.uploadTotalNum = 0;\n      vm.$refs[vm.uploadRef].clearFiles();\n    },\n    handleChange: function handleChange(file, fileList) {\n      var vm = this;\n      if (file.response) {\n        vm.uploadTotalNum += 1;\n        if (file.response.isSuccess) {\n          vm.fileOtherData.bizId = file.response.data.bizId;\n          vm.successNum += 1;\n        } else {\n          setTimeout(function () {\n            vm.$message({\n              message: file.name + \"上传失败，原因：<br/>\" + file.response.msg,\n              type: \"error\",\n              dangerouslyUseHTMLString: true,\n              showClose: true,\n              duration: 10000,\n              onClose: function onClose(msg) {\n                (0, _utils.copy)(msg['message']);\n                vm.$message({\n                  message: \"复制错误消息成功\",\n                  type: \"success\"\n                });\n              }\n            });\n          }, 0);\n          vm.isUploadError = false;\n          vm.errorNum += 1;\n        }\n        vm.$emit(\"setId\", vm.uploadTotalNum === fileList.length && vm.errorNum <= 0, file.response);\n      } else {\n        if (vm.acceptSize) {\n          var isLtAcceptSize = file.size > vm.acceptSize;\n          if (isLtAcceptSize) {\n            setTimeout(function () {\n              vm.$message.error(\"只能上传\" + vm.renderSize(vm.acceptSize) + \"的文件!已为您过滤文件：\" + file.name);\n            }, 10);\n            fileList.forEach(function (item, index) {\n              if (item.uid === file.uid) {\n                fileList.splice(index, 1);\n              }\n            });\n          } else {\n            if (!vm.isUploadError) {\n              vm.addFileAry.push(file.name);\n            }\n            vm.isUploadError = false;\n          }\n        } else {\n          if (!vm.isUploadError) {\n            vm.addFileAry.push(file.name);\n          }\n          vm.isUploadError = false;\n        }\n        vm.$emit(\"fileLengthVaild\", vm.fileList.length + vm.addFileAry.length);\n      }\n      vm.$store.state.hasLoading = false;\n    },\n    // 附件上传失败\n    handleError: function handleError() {\n      var vm = this;\n      vm.$message.error(\"附件上传失败，请重试\");\n      vm.isUploadError = true;\n      vm.$store.state.hasLoading = false;\n    },\n    renderSize: function renderSize(value) {\n      if (null == value || value == \"\") {\n        return \"0 B\";\n      }\n      var unitArr = new Array(\"B\", \"KB\", \"MB\", \"GB\", \"TB\", \"PB\", \"EB\", \"ZB\", \"YB\");\n      var index = 0;\n      var srcsize = parseFloat(value);\n      index = Math.floor(Math.log(srcsize) / Math.log(1024));\n      var size = srcsize / Math.pow(1024, index);\n      size = size.toFixed(2);\n      if (unitArr[index]) {\n        return size + unitArr[index];\n      }\n      return \"文件太大\";\n    },\n    handlePreview: function handlePreview(file) {\n      if (file.bizId) {\n        this.downLoadFile(file);\n      }\n    },\n    beforeRemove: function beforeRemove(file) {\n      return this.$confirm(\"确定移除\" + file.name, \"删除确认\");\n    },\n    // 文件超出个数限制时的钩子\n    handleExceed: function handleExceed() {\n      var vm = this;\n      vm.$message(\"当前最多允许上传\" + vm.limit + \"个文件\");\n    },\n    // 删除附件列表\n    handleRemove: function handleRemove(file) {\n      var vm = this;\n      if (file.bizId) {\n        vm.removeFileAry.push(file.id);\n        vm.fileList.map(function (item, index) {\n          if (item.name === file.name) {\n            vm.fileList.splice(index, 1);\n            return false;\n          }\n        });\n      } else {\n        vm.addFileAry.map(function (item, index) {\n          if (item === file.name) {\n            vm.addFileAry.splice(index, 1);\n            return false;\n          }\n        });\n      }\n      vm.$emit(\"fileLengthVaild\", vm.fileList.length + vm.addFileAry.length);\n    },\n    // 服务器删除附件\n    deleteAttachment: function () {\n      var _deleteAttachment = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n        var vm, res;\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              vm = this;\n              _context.next = 3;\n              return _Common.default.deleteAttachment(vm.removeFileAry);\n            case 3:\n              res = _context.sent;\n              if (res.status === 200) {\n                if (res.data.code !== 0) {\n                  vm.$message(res.data.msg);\n                } else {\n                  vm.removeFileAry = [];\n                }\n              }\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n      function deleteAttachment() {\n        return _deleteAttachment.apply(this, arguments);\n      }\n      return deleteAttachment;\n    }(),\n    // 查询附件\n    getAttachment: function () {\n      var _getAttachment = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n        var vm, res, data;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              vm = this;\n              _context2.next = 3;\n              return _Common.default.getAttachment({\n                bizIds: vm.fileOtherData.bizId,\n                bizTypes: vm.fileOtherData.bizType\n              });\n            case 3:\n              res = _context2.sent;\n              if (res.status === 200) {\n                if (res.data.code === 0) {\n                  if (res.data.data.length > 0) {\n                    data = res.data.data[0].list;\n                    data.map(function (item) {\n                      item.name = item.submittedFileName;\n                    });\n                    vm.fileList = data;\n                    vm.$emit(\"fileLengthVaild\", vm.fileList.length);\n                  }\n                }\n              }\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n      function getAttachment() {\n        return _getAttachment.apply(this, arguments);\n      }\n      return getAttachment;\n    }(),\n    // 查询附件\n    getAttachmentByArr: function () {\n      var _getAttachmentByArr = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(bizIds, bizTypes) {\n        var vm, res, data;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              vm = this;\n              _context3.next = 3;\n              return _Common.default.getAttachment({\n                bizIds: bizIds,\n                bizTypes: bizTypes\n              });\n            case 3:\n              res = _context3.sent;\n              if (res.status === 200) {\n                if (res.data.code === 0) {\n                  if (res.data.data.length > 0) {\n                    data = res.data.data[0].list;\n                    data.map(function (item) {\n                      item.name = item.submittedFileName;\n                    });\n                    vm.fileList = data;\n                  }\n                }\n              }\n            case 5:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getAttachmentByArr(_x, _x2) {\n        return _getAttachmentByArr.apply(this, arguments);\n      }\n      return getAttachmentByArr;\n    }(),\n    // 返回附件新增及删除数组长度\n    handleBack: function handleBack() {\n      var vm = this;\n      return {\n        addLength: vm.addFileAry.length,\n        removeLength: vm.removeFileAry.length\n      };\n    },\n    // 附件上传服务器触发方法\n    submitFile: function submitFile(id, bizId, bizType, name) {\n      var vm = this;\n      vm.fileOtherData.id = id;\n      if (bizId) {\n        vm.fileOtherData.bizId = bizId;\n        vm.isUpload = true;\n      }\n      vm.fileOtherData.bizType = bizType;\n      if (name) {\n        vm.fileOtherData.name = name;\n      }\n      vm.$refs[vm.uploadRef].submit();\n      vm.addFileAry = [];\n    },\n    // 附件下载\n    downLoadFile: function () {\n      var _downLoadFile = (0, _asyncToGenerator2.default)( /*#__PURE__*/regeneratorRuntime.mark(function _callee4(data) {\n        var link;\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              link = document.createElement(\"a\");\n              link.href = data.url;\n              link.download = data.name;\n              link.click();\n              window.URL.revokeObjectURL(link.href);\n            case 5:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      function downLoadFile(_x3) {\n        return _downLoadFile.apply(this, arguments);\n      }\n      return downLoadFile;\n    }()\n  }\n};\nexports.default = _default2;",null]}