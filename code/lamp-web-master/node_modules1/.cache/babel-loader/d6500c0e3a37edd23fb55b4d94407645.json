{"remainingRequest":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\lamp-web-master\\src\\views\\lamp\\tenant\\tenant\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\lamp-web-master\\src\\views\\lamp\\tenant\\tenant\\index.vue","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\"use strict\";\n\nvar _interopRequireDefault = require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/interopRequireDefault.js\");\nrequire(\"core-js/modules/es7.object.get-own-property-descriptors\");\nrequire(\"core-js/modules/es6.object.keys\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nrequire(\"core-js/modules/es6.regexp.split\");\nrequire(\"core-js/modules/es7.array.includes\");\nrequire(\"core-js/modules/es6.string.includes\");\nrequire(\"core-js/modules/es6.array.sort\");\nrequire(\"core-js/modules/web.dom.iterable\");\nrequire(\"core-js/modules/es6.array.find-index\");\nvar _defineProperty2 = _interopRequireDefault(require(\"E:/\\u9879\\u76EE/lamp-web-master/node_modules/@babel/runtime/helpers/defineProperty.js\"));\nrequire(\"core-js/modules/es6.regexp.search\");\nvar _Pagination = _interopRequireDefault(require(\"@/components/Pagination\"));\nvar _edit = _interopRequireDefault(require(\"./edit\"));\nvar _view = _interopRequireDefault(require(\"./view\"));\nvar _connection = _interopRequireDefault(require(\"./connection\"));\nvar _Tenant = _interopRequireDefault(require(\"@/api/Tenant.js\"));\nvar _elDragDialog = _interopRequireDefault(require(\"@/directive/el-drag-dialog\"));\nvar _commons = require(\"@/utils/commons\");\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2.default)(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; } //\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nvar _default = {\n  name: \"TenantManage\",\n  directives: {\n    elDragDialog: _elDragDialog.default\n  },\n  components: {\n    TenantConnection: _connection.default,\n    Pagination: _Pagination.default,\n    TenantEdit: _edit.default,\n    TenantView: _view.default\n  },\n  filters: {\n    typeFilter: function typeFilter(status) {\n      var map = {\n        CREATE: \"success\",\n        REGISTER: \"danger\"\n      };\n      return map[status] || \"info\";\n    },\n    statusFilter: function statusFilter(status) {\n      var map = {\n        NORMAL: \"success\",\n        FORBIDDEN: \"warning\",\n        WAITING: \"info\",\n        REFUSE: \"danger\"\n      };\n      return map[status] || \"\";\n    }\n  },\n  data: function data() {\n    return {\n      dialog: {\n        isVisible: false,\n        title: \"\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      tenantViewVisible: false,\n      tenantConnectionVisible: false,\n      tableKey: 0,\n      queryParams: (0, _commons.initQueryParams)({}),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {\n        TenantTypeEnum: {},\n        TenantStatusEnum: {}\n      }\n    };\n  },\n  computed: {\n    currentUser: function currentUser() {\n      return this.$store.state.account.user;\n    },\n    typeFilterList: function typeFilterList() {\n      var list = [];\n      for (var key in this.enums.TenantTypeEnum) {\n        list.push({\n          value: key,\n          text: this.enums.TenantTypeEnum[key]\n        });\n      }\n      return list;\n    },\n    statusFilterList: function statusFilterList() {\n      var list = [];\n      for (var key in this.enums.TenantStatusEnum) {\n        list.push({\n          value: key,\n          text: this.enums.TenantStatusEnum[key]\n        });\n      }\n      return list;\n    }\n  },\n  mounted: function mounted() {\n    (0, _commons.initEnums)(['TenantStatusEnum', 'TenantTypeEnum'], this.enums);\n    this.fetch();\n  },\n  methods: {\n    tenantConnectionClose: function tenantConnectionClose() {\n      this.tenantConnectionVisible = false;\n    },\n    viewClose: function viewClose() {\n      this.tenantViewVisible = false;\n    },\n    editClose: function editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess: function editSuccess() {\n      this.search();\n    },\n    onSelectChange: function onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search: function search() {\n      this.fetch(_objectSpread({}, this.queryParams));\n    },\n    reset: function reset() {\n      this.queryParams = (0, _commons.initQueryParams)({});\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview: function exportExcelPreview() {\n      var _this = this;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      _Tenant.default.preview(this.queryParams).then(function (response) {\n        var res = response.data;\n        _this.preview.isVisible = true;\n        _this.preview.context = res.data;\n      });\n    },\n    exportExcel: function exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      _Tenant.default.export(this.queryParams).then(function (response) {\n        (0, _commons.downloadFile)(response);\n      });\n    },\n    add: function add() {\n      if (this.tableData.total > 5) {\n        this.$message({\n          message: '演示环境有限，最多支持创建5个租户，请在现有租户下创建用户进行测试',\n          type: \"warning\",\n          duration: 5000\n        });\n        return;\n      }\n      this.$refs.edit.type = \"add\";\n      this.dialog.title = this.$t(\"common.add\");\n      this.dialog.isVisible = true;\n    },\n    singleDelete: function singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete: function batchDelete() {\n      var _this2 = this;\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      var readonlyIndex = this.selection.findIndex(function (item) {\n        return item.readonly;\n      });\n      if (readonlyIndex > -1) {\n        this.$message({\n          message: this.$t(\"tips.readonly\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(\"删除租户数据后，会将租户库及其所有数据全部删除，建议调用禁用接口。\", this.$t(\"common.tips\"), {\n        confirmButtonText: \"禁用\",\n        cancelButtonText: \"删除\",\n        type: \"warning\",\n        closeOnClickModal: false,\n        closeOnPressEscape: false,\n        distinguishCancelAndClose: true\n      }).then(function () {\n        var ids = [];\n        var contain = false;\n        _this2.selection.forEach(function (item) {\n          if (item.readonly) {\n            contain = true;\n            return;\n          }\n          ids.push(item.id);\n        });\n        if (contain) {\n          _this2.$message({\n            message: _this2.$t(\"tips.readonly\"),\n            type: \"warning\"\n          });\n        } else {\n          _this2.updateStatus(ids);\n        }\n      }).catch(function (action) {\n        if (action === 'cancel') {\n          var ids = [];\n          var contain = false;\n          _this2.selection.forEach(function (item) {\n            if (item.readonly) {\n              contain = true;\n              return;\n            }\n            ids.push(item.id);\n          });\n          if (contain) {\n            _this2.$message({\n              message: _this2.$t(\"tips.readonly\"),\n              type: \"warning\"\n            });\n          } else {\n            _this2.delete(ids);\n          }\n        }\n      });\n    },\n    clearSelections: function clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete: function _delete(ids) {\n      var _this3 = this;\n      _Tenant.default.remove(ids).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this3.$message({\n            message: _this3.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n          _this3.search();\n        }\n      });\n    },\n    updateStatus: function updateStatus(ids) {\n      var _this4 = this;\n      _Tenant.default.updateStatus({\n        'ids[]': ids\n      }).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this4.$message({\n            message: '禁用成功',\n            type: \"success\"\n          });\n          _this4.search();\n        }\n      });\n    },\n    changeStatus: function changeStatus(row) {\n      var _this5 = this;\n      var status = 'NORMAL';\n      if (row.status['code'] === 'NORMAL') {\n        status = 'FORBIDDEN';\n      } else {\n        status = 'NORMAL';\n      }\n      _Tenant.default.updateStatus({\n        'ids[]': row.id,\n        status: status\n      }).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this5.$message({\n            message: row.status['code'] === 'NORMAL' ? '禁用成功' : '启用成功',\n            type: row.status['code'] === 'NORMAL' ? 'warning' : 'success'\n          });\n          _this5.search();\n        }\n      });\n    },\n    view: function view(row) {\n      this.$refs.view.setTenant(row);\n      this.tenantViewVisible = true;\n    },\n    edit: function edit(row) {\n      if (row.readonly) {\n        this.$message({\n          message: this.$t(\"tips.readonly\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$refs.edit.setTenant(row);\n      this.$refs.edit.type = \"edit\";\n      this.dialog.title = this.$t(\"common.edit\");\n      this.dialog.isVisible = true;\n    },\n    fetch: function fetch() {\n      var _this6 = this;\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      _Tenant.default.page(this.queryParams).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this6.tableData = res.data;\n        }\n        // eslint-disable-next-line no-return-assign\n      }).finally(function () {\n        return _this6.loading = false;\n      });\n    },\n    sortChange: function sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange: function filterChange(filters) {\n      for (var key in filters) {\n        if (key.includes('.')) {\n          var val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n      this.search();\n    },\n    cellClick: function cellClick(row, column) {\n      var _this7 = this;\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      var flag = false;\n      this.selection.forEach(function (item) {\n        if (item.id === row.id) {\n          flag = true;\n          _this7.$refs.table.toggleRowSelection(row);\n        }\n      });\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    initConnection: function initConnection(row) {\n      this.$refs.connection.setTenant(row);\n      this.tenantConnectionVisible = true;\n    }\n  }\n};\nexports.default = _default;",null]}