{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master\\src\\utils\\permissionDirect.js","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\utils\\permissionDirect.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/es6.string.iterator\";\nimport \"core-js/modules/es6.array.from\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }\n// 定义一些和权限有关的 Vue指令\n\nfunction containsAll(maxList, minList) {\n  var newList = minList.filter(function (val) {\n    return maxList.indexOf(val) > -1;\n  });\n  if (newList.length == minList.length) {\n    return true;\n  } else {\n    return false;\n  }\n}\nfunction isPermitted(allPerms, perm) {\n  if (allPerms == null || allPerms.length === 0) {\n    return false;\n  }\n  var _iterator = _createForOfIteratorHelper(allPerms),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var p = _step.value;\n      if (p.implies(perm)) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  return false;\n}\nfunction WildcardPermission(wildcardString, caseSensitive) {\n  this._init_(wildcardString, caseSensitive);\n}\nWildcardPermission.prototype = {\n  constructor: WildcardPermission,\n  WILDCARD_TOKEN: \"*\",\n  PART_DIVIDER_TOKEN: \":\",\n  SUBPART_DIVIDER_TOKEN: \",\",\n  _init_: function _init_(wildcardString, caseSensitive) {\n    if (wildcardString == null || wildcardString.trim().length === 0) {\n      throw new Error(\"权限编码通配符字符串不能为null或空。确保权限字符串的格式正确。\");\n    }\n    wildcardString = wildcardString.trim();\n    var parts = wildcardString.split(this.PART_DIVIDER_TOKEN);\n    this.parts = [];\n    var _iterator2 = _createForOfIteratorHelper(parts),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var part = _step2.value;\n        var subParts = part.split(this.SUBPART_DIVIDER_TOKEN);\n        if (!caseSensitive) {\n          var lowerSubParts = [];\n          var _iterator3 = _createForOfIteratorHelper(subParts),\n            _step3;\n          try {\n            for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n              var subPart = _step3.value;\n              lowerSubParts.push(subPart.toLocaleLowerCase());\n            }\n          } catch (err) {\n            _iterator3.e(err);\n          } finally {\n            _iterator3.f();\n          }\n          subParts = lowerSubParts;\n        }\n        if (subParts.length <= 0) {\n          throw new Error(\"权限编码通配符字符串不能包含只有分隔符的部分，确保权限编码字符串的格式正确。\");\n        }\n        this.parts.push(subParts);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n    if (this.parts.length <= 0) {\n      throw new Error(\"权限编码通配符字符串不能只包含分隔符，确保权限编码字符串的格式正确。\");\n    }\n  },\n  implies: function implies(wp) {\n    var otherParts = wp.parts;\n    var i = 0;\n    var _iterator4 = _createForOfIteratorHelper(otherParts),\n      _step4;\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var otherPart = _step4.value;\n        // 如果此权限的部分数少于其他权限，则此权限中包含的部分数之后的所有内容都将自动隐含，因此返回true\n        if (this.parts.length - 1 < i) {\n          return true;\n        } else {\n          var _part = this.parts[i];\n          if (!_part.includes(this.WILDCARD_TOKEN) && !containsAll(_part, otherPart)) {\n            return false;\n          }\n          i++;\n        }\n      }\n\n      // 如果此权限的部分多于其他部分，则仅当所有其他部分都是通配符时才暗示它\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n    for (; i < this.parts.length; i++) {\n      var part = this.parts[i];\n      if (!part.includes(this.WILDCARD_TOKEN)) {\n        return false;\n      }\n    }\n    return true;\n  }\n};\n\n// 必须包含列出的所有权限，元素才显示\nexport var hasPermission = {\n  install: function install(Vue) {\n    Vue.directive('hasPermission', {\n      bind: function bind(el, binding, vnode) {\n        // 拥有的所有权限\n        var authorityResource = vnode.context.$store.state.account.authorityResource;\n        var enabled = authorityResource.enabled;\n        if (!enabled) {\n          return;\n        }\n        var flag = true;\n        var allPermissions = authorityResource.resourceList;\n        var caseSensitive = authorityResource.caseSensitive;\n        // 待校验权限 一定要是数组\n        var permissions = binding.value;\n        if (permissions != null && permissions.length > 0) {\n          // 转换拥有的权限\n          var allPerms = [];\n          var _iterator5 = _createForOfIteratorHelper(allPermissions),\n            _step5;\n          try {\n            for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n              var p = _step5.value;\n              allPerms.push(new WildcardPermission(p, caseSensitive));\n            }\n          } catch (err) {\n            _iterator5.e(err);\n          } finally {\n            _iterator5.f();\n          }\n          var _iterator6 = _createForOfIteratorHelper(permissions),\n            _step6;\n          try {\n            for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n              var strPerm = _step6.value;\n              var perm = new WildcardPermission(strPerm, caseSensitive);\n              if (!isPermitted(allPerms, perm)) {\n                flag = false;\n              }\n            }\n          } catch (err) {\n            _iterator6.e(err);\n          } finally {\n            _iterator6.f();\n          }\n        }\n        if (!flag) {\n          if (!el.parentNode) {\n            el.style.display = 'none';\n          } else {\n            el.parentNode.removeChild(el);\n          }\n        }\n      }\n    });\n  }\n};\n\n// 当不包含列出的权限时，渲染该元素\nexport var hasNoPermission = {\n  install: function install(Vue) {\n    Vue.directive('hasNoPermission', {\n      bind: function bind(el, binding, vnode) {\n        var authorityResource = vnode.context.$store.state.account.authorityResource;\n        var enabled = true;\n        if (!enabled) {\n          return;\n        }\n        var allPermissions = authorityResource.resourceList;\n        var caseSensitive = authorityResource.caseSensitive;\n        var permissions = binding.value;\n        var flag = true;\n        if (permissions != null && permissions.length > 0) {\n          // 转换拥有的权限\n          var allPerms = [];\n          var _iterator7 = _createForOfIteratorHelper(allPermissions),\n            _step7;\n          try {\n            for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n              var p = _step7.value;\n              allPerms.push(new WildcardPermission(p, caseSensitive));\n            }\n          } catch (err) {\n            _iterator7.e(err);\n          } finally {\n            _iterator7.f();\n          }\n          var _iterator8 = _createForOfIteratorHelper(permissions),\n            _step8;\n          try {\n            for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n              var strPerm = _step8.value;\n              var perm = new WildcardPermission(strPerm, caseSensitive);\n              if (isPermitted(allPerms, perm)) {\n                flag = false;\n              }\n            }\n          } catch (err) {\n            _iterator8.e(err);\n          } finally {\n            _iterator8.f();\n          }\n        }\n        if (!flag) {\n          if (!el.parentNode) {\n            el.style.display = 'none';\n          } else {\n            el.parentNode.removeChild(el);\n          }\n        }\n      }\n    });\n  }\n};\n\n// 只要包含列出的任意一个权限，元素就会显示\nexport var hasAnyPermission = {\n  install: function install(Vue) {\n    Vue.directive('hasAnyPermission', {\n      bind: function bind(el, binding, vnode) {\n        var authorityResource = vnode.context.$store.state.account.authorityResource;\n        var enabled = authorityResource.enabled;\n        if (!enabled) {\n          return;\n        }\n        var flag = false;\n        var allPermissions = authorityResource.resourceList;\n        var caseSensitive = authorityResource.caseSensitive;\n        var permissions = binding.value;\n        if (permissions != null && permissions.length > 0) {\n          // 转换拥有的权限\n          var allPerms = [];\n          var _iterator9 = _createForOfIteratorHelper(allPermissions),\n            _step9;\n          try {\n            for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n              var p = _step9.value;\n              allPerms.push(new WildcardPermission(p, caseSensitive));\n            }\n          } catch (err) {\n            _iterator9.e(err);\n          } finally {\n            _iterator9.f();\n          }\n          var _iterator10 = _createForOfIteratorHelper(permissions),\n            _step10;\n          try {\n            for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n              var strPerm = _step10.value;\n              var perm = new WildcardPermission(strPerm, caseSensitive);\n              if (isPermitted(allPerms, perm)) {\n                flag = true;\n              }\n            }\n          } catch (err) {\n            _iterator10.e(err);\n          } finally {\n            _iterator10.f();\n          }\n        }\n        if (!flag) {\n          if (!el.parentNode) {\n            el.style.display = 'none';\n          } else {\n            el.parentNode.removeChild(el);\n          }\n        }\n      }\n    });\n  }\n};\n\n// 必须包含列出的角色权限，元素才显示\nexport var hasRole = {\n  install: function install(Vue) {\n    Vue.directive('hasRole', {\n      bind: function bind(el, binding, vnode) {\n        var authorityResource = vnode.context.$store.state.account.authorityResource;\n        var enabled = authorityResource.enabled;\n        if (!enabled) {\n          return;\n        }\n        var caseSensitive = authorityResource.caseSensitive;\n        var allRoles = authorityResource.roleList;\n        var roles = binding.value;\n        if (!caseSensitive) {\n          roles = roles.map(function (item) {\n            return item.toLocaleLowerCase();\n          });\n          allRoles = allRoles.map(function (item) {\n            return item.toLocaleLowerCase();\n          });\n        }\n        var flag = true;\n        var _iterator11 = _createForOfIteratorHelper(roles),\n          _step11;\n        try {\n          for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n            var v = _step11.value;\n            if (!allRoles.includes(v)) {\n              flag = false;\n            }\n          }\n        } catch (err) {\n          _iterator11.e(err);\n        } finally {\n          _iterator11.f();\n        }\n        if (!flag) {\n          if (!el.parentNode) {\n            el.style.display = 'none';\n          } else {\n            el.parentNode.removeChild(el);\n          }\n        }\n      }\n    });\n  }\n};\n\n// 当不包含列出的角色时，渲染该元素\nexport var hasNoRole = {\n  install: function install(Vue) {\n    Vue.directive('hasNoRole', {\n      bind: function bind(el, binding, vnode) {\n        var authorityResource = vnode.context.$store.state.account.authorityResource;\n        var enabled = authorityResource.enabled;\n        if (!enabled) {\n          return;\n        }\n        var caseSensitive = authorityResource.caseSensitive;\n        var allRoles = authorityResource.roleList;\n        var roles = binding.value;\n        if (!caseSensitive) {\n          roles = roles.map(function (item) {\n            return item.toLocaleLowerCase();\n          });\n          allRoles = allRoles.map(function (item) {\n            return item.toLocaleLowerCase();\n          });\n        }\n        var flag = true;\n        var _iterator12 = _createForOfIteratorHelper(roles),\n          _step12;\n        try {\n          for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n            var v = _step12.value;\n            if (allRoles.includes(v)) {\n              flag = false;\n            }\n          }\n        } catch (err) {\n          _iterator12.e(err);\n        } finally {\n          _iterator12.f();\n        }\n        if (!flag) {\n          if (!el.parentNode) {\n            el.style.display = 'none';\n          } else {\n            el.parentNode.removeChild(el);\n          }\n        }\n      }\n    });\n  }\n};\n\n// 只要包含列出的任意一个角色，元素就会显示\nexport var hasAnyRole = {\n  install: function install(Vue) {\n    Vue.directive('hasAnyRole', {\n      bind: function bind(el, binding, vnode) {\n        var authorityResource = vnode.context.$store.state.account.authorityResource;\n        var enabled = authorityResource.enabled;\n        if (!enabled) {\n          return;\n        }\n        var caseSensitive = authorityResource.caseSensitive;\n        var allRoles = authorityResource.roleList;\n        var roles = binding.value;\n        if (!caseSensitive) {\n          roles = roles.map(function (item) {\n            return item.toLocaleLowerCase();\n          });\n          allRoles = allRoles.map(function (item) {\n            return item.toLocaleLowerCase();\n          });\n        }\n        var flag = false;\n        var _iterator13 = _createForOfIteratorHelper(roles),\n          _step13;\n        try {\n          for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n            var v = _step13.value;\n            if (allRoles.includes(v)) {\n              flag = true;\n            }\n          }\n        } catch (err) {\n          _iterator13.e(err);\n        } finally {\n          _iterator13.f();\n        }\n        if (!flag) {\n          if (!el.parentNode) {\n            el.style.display = 'none';\n          } else {\n            el.parentNode.removeChild(el);\n          }\n        }\n      }\n    });\n  }\n};",null]}