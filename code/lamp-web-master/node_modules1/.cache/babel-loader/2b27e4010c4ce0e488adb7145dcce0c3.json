{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\org\\user\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\org\\user\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es7.object.get-own-property-descriptors\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.object.keys\";\nimport _defineProperty from \"E:/project/lamp-web-master/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es6.string.starts-with\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { validMobile } from \"@/utils/my-validate\";\nimport Treeselect from \"@riophae/vue-treeselect\";\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\";\nimport imgUpload from \"@/components/lamp/imgUpload\";\nimport userApi from \"@/api/User.js\";\nimport stationApi from \"@/api/Station.js\";\nexport default {\n  name: \"UserEdit\",\n  components: {\n    Treeselect: Treeselect,\n    imgUpload: imgUpload\n  },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: \"add\"\n    }\n  },\n  data: function data() {\n    var _this = this;\n    return {\n      accept: \"image/jpeg, image/gif, image/png\",\n      remoteStationLoading: false,\n      user: this.initUser(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      orgList: [],\n      stationList: [],\n      imgFileList: [],\n      imgFileData: {\n        bizId: \"\",\n        bizType: \"USER_AVATAR\"\n      },\n      // 图片文件总数\n      imgFileTotal: 0,\n      // 上传成功数\n      successNum: 0,\n      enums: {\n        Sex: {}\n      },\n      dicts: {\n        NATION: [],\n        POSITION_STATUS: [],\n        EDUCATION: []\n      },\n      rules: {\n        account: [{\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        }, {\n          min: 1,\n          max: 255,\n          message: this.$t(\"rules.range4to10\"),\n          trigger: \"blur\"\n        }, {\n          validator: function validator(rule, value, callback) {\n            if (!_this.user.id) {\n              callback();\n            } else {\n              callback();\n            }\n          },\n          trigger: \"blur\"\n        }],\n        email: {\n          type: \"email\",\n          message: this.$t(\"rules.email\"),\n          trigger: \"blur\"\n        },\n        mobile: {\n          validator: function validator(rule, value, callback) {\n            if (value !== \"\" && !validMobile(value)) {\n              callback(_this.$t(\"rules.mobile\"));\n            } else {\n              callback();\n            }\n          },\n          trigger: \"blur\"\n        },\n        sex: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"change\"\n        },\n        state: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        }\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get: function get() {\n        return this.dialogVisible;\n      },\n      set: function set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title: function title() {\n      return this.type === \"add\" ? this.$t(\"common.add\") : this.$t(\"common.edit\");\n    }\n  },\n  watch: {},\n  mounted: function mounted() {\n    var _this2 = this;\n    window.onresize = function () {\n      return function () {\n        _this2.width = _this2.initWidth();\n      }();\n    };\n  },\n  methods: {\n    myAvatar: function myAvatar(avatar) {\n      if (!avatar) {\n        return require(\"@/assets/avatar/default.jpg\");\n      } else {\n        if (avatar.startsWith(\"http://\") || avatar.startsWith(\"https://\")) {\n          return avatar;\n        } else {\n          return require(\"@/assets/avatar/\".concat(avatar));\n        }\n      }\n    },\n    initUser: function initUser() {\n      return {\n        id: \"\",\n        account: \"\",\n        name: \"\",\n        orgId: null,\n        stationId: '',\n        email: \"\",\n        mobile: \"\",\n        sex: {\n          code: \"\"\n        },\n        nation: '',\n        education: '',\n        positionStatus: '',\n        state: true,\n        avatar: \"\",\n        workDescribe: \"\",\n        password: \"123456\"\n      };\n    },\n    initWidth: function initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return \"90%\";\n      } else if (this.screenWidth < 1400) {\n        return \"45%\";\n      } else {\n        return \"800px\";\n      }\n    },\n    loadListOptions: function loadListOptions(_ref) {\n      var callback = _ref.callback;\n      callback();\n    },\n    loadStation: function loadStation() {\n      var _this3 = this;\n      stationApi.page({\n        size: 10000,\n        model: {\n          state: true\n        }\n      }).then(function (response) {\n        var res = response.data;\n        _this3.stationList = res.data.records;\n      });\n    },\n    setIdAndSubmit: function setIdAndSubmit(bizId, url) {\n      var vm = this;\n      vm.successNum += 1;\n      vm.imgFileData.bizId = bizId;\n      vm.user.avatar = url;\n      if (vm.successNum === vm.imgFileTotal) {\n        vm.$store.state.hasLoading = false;\n      }\n    },\n    setUser: function setUser(val, orgs, dicts, enums) {\n      debugger;\n      var vm = this;\n      if (val) {\n        vm.user = _objectSpread(_objectSpread({}, vm.user), val);\n        if (!vm.user.sex) {\n          vm.user.sex = {\n            code: ''\n          };\n        }\n      }\n      vm.dicts = dicts;\n      vm.enums = enums;\n      vm.orgList = orgs;\n      vm.imgFileData.bizId = vm.user[\"id\"];\n      vm.$nextTick(function () {\n        vm.$refs.imgFileRef.init({\n          bizId: vm.user[\"id\"],\n          bizType: vm.imgFileData.bizType,\n          imageUrl: vm.myAvatar(vm.user[\"avatar\"]),\n          isSingle: true,\n          isDetail: false\n        });\n      });\n      vm.loadStation();\n    },\n    close: function close() {\n      this.$emit(\"close\");\n    },\n    reset: function reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.user = this.initUser();\n      this.imgFileData.bizId = \"\";\n      this.$refs.imgFileRef.init({\n        bizId: \"\",\n        bizType: \"\",\n        imageUrl: \"\",\n        isSingle: true,\n        isDetail: false\n      });\n    },\n    submitForm: function submitForm() {\n      var vm = this;\n      this.$refs.form.validate(function (valid) {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit: function editSubmit() {\n      var vm = this;\n      if (vm.type === \"add\") {\n        vm.save();\n      } else {\n        vm.update();\n      }\n    },\n    save: function save() {\n      var vm = this;\n      userApi.save(this.user).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: vm.$t(\"tips.createSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      });\n    },\n    update: function update() {\n      var _this4 = this;\n      userApi.update(this.user).then(function (response) {\n        var res = response.data;\n        if (res.isSuccess) {\n          _this4.isVisible = false;\n          _this4.$message({\n            message: _this4.$t(\"tips.updateSuccess\"),\n            type: \"success\"\n          });\n          _this4.$emit(\"success\");\n        }\n      });\n    }\n  }\n};",null]}