{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\layout\\components\\TagsView\\ScrollPane.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\layout\\components\\TagsView\\ScrollPane.vue","mtime":1688113820505},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\babel.config.js","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nvar tagAndTagSpacing = 4; // tagAndTagSpacing\n\nexport default {\n  name: 'ScrollPane',\n  data: function data() {\n    return {\n      left: 0\n    };\n  },\n  computed: {\n    scrollWrapper: function scrollWrapper() {\n      return this.$refs.scrollContainer.$refs.wrap;\n    }\n  },\n  methods: {\n    handleScroll: function handleScroll(e) {\n      var eventDelta = e.wheelDelta || -e.deltaY * 40;\n      var $scrollWrapper = this.scrollWrapper;\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4;\n    },\n    moveToTarget: function moveToTarget(currentTag) {\n      var $container = this.$refs.scrollContainer.$el;\n      var $containerWidth = $container.offsetWidth;\n      var $scrollWrapper = this.scrollWrapper;\n      var tagList = this.$parent.$refs.tag;\n      var firstTag = null;\n      var lastTag = null;\n\n      // find first tag and last tag\n      if (tagList.length > 0) {\n        firstTag = tagList[0];\n        lastTag = tagList[tagList.length - 1];\n      }\n      if (firstTag === currentTag) {\n        $scrollWrapper.scrollLeft = 0;\n      } else if (lastTag === currentTag) {\n        $scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth;\n      } else {\n        // find preTag and nextTag\n        var currentIndex = tagList.findIndex(function (item) {\n          return item === currentTag;\n        });\n        var prevTag = tagList[currentIndex - 1];\n        var nextTag = tagList[currentIndex + 1];\n\n        // the tag's offsetLeft after of nextTag\n        var afterNextTagOffsetLeft = nextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing;\n\n        // the tag's offsetLeft before of prevTag\n        var beforePrevTagOffsetLeft = prevTag.$el.offsetLeft - tagAndTagSpacing;\n        if (afterNextTagOffsetLeft > $scrollWrapper.scrollLeft + $containerWidth) {\n          $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth;\n        } else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\n          $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft;\n        }\n      }\n    }\n  }\n};",{"version":3,"names":["tagAndTagSpacing","name","data","left","computed","scrollWrapper","$refs","scrollContainer","wrap","methods","handleScroll","e","eventDelta","wheelDelta","deltaY","$scrollWrapper","scrollLeft","moveToTarget","currentTag","$container","$el","$containerWidth","offsetWidth","tagList","$parent","tag","firstTag","lastTag","length","scrollWidth","currentIndex","findIndex","item","prevTag","nextTag","afterNextTagOffsetLeft","offsetLeft","beforePrevTagOffsetLeft"],"sources":["src/layout/components/TagsView/ScrollPane.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    ref=\"scrollContainer\"\n    :vertical=\"false\"\n    class=\"scroll-container\"\n    @wheel.native.prevent=\"handleScroll\"\n  >\n    <slot />\n  </el-scrollbar>\n</template>\n\n<script>\nconst tagAndTagSpacing = 4 // tagAndTagSpacing\n\nexport default {\n  name: 'ScrollPane',\n  data() {\n    return {\n      left: 0\n    }\n  },\n  computed: {\n    scrollWrapper() {\n      return this.$refs.scrollContainer.$refs.wrap\n    }\n  },\n  methods: {\n    handleScroll(e) {\n      const eventDelta = e.wheelDelta || -e.deltaY * 40\n      const $scrollWrapper = this.scrollWrapper\n      $scrollWrapper.scrollLeft = $scrollWrapper.scrollLeft + eventDelta / 4\n    },\n    moveToTarget(currentTag) {\n      const $container = this.$refs.scrollContainer.$el\n      const $containerWidth = $container.offsetWidth\n      const $scrollWrapper = this.scrollWrapper\n      const tagList = this.$parent.$refs.tag\n\n      let firstTag = null\n      let lastTag = null\n\n      // find first tag and last tag\n      if (tagList.length > 0) {\n        firstTag = tagList[0]\n        lastTag = tagList[tagList.length - 1]\n      }\n\n      if (firstTag === currentTag) {\n        $scrollWrapper.scrollLeft = 0\n      } else if (lastTag === currentTag) {\n        $scrollWrapper.scrollLeft = $scrollWrapper.scrollWidth - $containerWidth\n      } else {\n        // find preTag and nextTag\n        const currentIndex = tagList.findIndex(item => item === currentTag)\n        const prevTag = tagList[currentIndex - 1]\n        const nextTag = tagList[currentIndex + 1]\n\n        // the tag's offsetLeft after of nextTag\n        const afterNextTagOffsetLeft = nextTag.$el.offsetLeft + nextTag.$el.offsetWidth + tagAndTagSpacing\n\n        // the tag's offsetLeft before of prevTag\n        const beforePrevTagOffsetLeft = prevTag.$el.offsetLeft - tagAndTagSpacing\n\n        if (afterNextTagOffsetLeft > $scrollWrapper.scrollLeft + $containerWidth) {\n          $scrollWrapper.scrollLeft = afterNextTagOffsetLeft - $containerWidth\n        } else if (beforePrevTagOffsetLeft < $scrollWrapper.scrollLeft) {\n          $scrollWrapper.scrollLeft = beforePrevTagOffsetLeft\n        }\n      }\n    }\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.scroll-container {\n  white-space: nowrap;\n  position: relative;\n  overflow: hidden;\n  width: 100%;\n  ::v-deep {\n    .el-scrollbar__bar {\n      bottom: 0px;\n    }\n    .el-scrollbar__wrap {\n      height: 49px;\n    }\n  }\n}\n</style>\n"],"mappings":";;;;;;;;;;;;;AAYA,IAAAA,gBAAA;;AAEA;EACAC,IAAA;EACAC,IAAA,WAAAA,KAAA;IACA;MACAC,IAAA;IACA;EACA;EACAC,QAAA;IACAC,aAAA,WAAAA,cAAA;MACA,YAAAC,KAAA,CAAAC,eAAA,CAAAD,KAAA,CAAAE,IAAA;IACA;EACA;EACAC,OAAA;IACAC,YAAA,WAAAA,aAAAC,CAAA;MACA,IAAAC,UAAA,GAAAD,CAAA,CAAAE,UAAA,KAAAF,CAAA,CAAAG,MAAA;MACA,IAAAC,cAAA,QAAAV,aAAA;MACAU,cAAA,CAAAC,UAAA,GAAAD,cAAA,CAAAC,UAAA,GAAAJ,UAAA;IACA;IACAK,YAAA,WAAAA,aAAAC,UAAA;MACA,IAAAC,UAAA,QAAAb,KAAA,CAAAC,eAAA,CAAAa,GAAA;MACA,IAAAC,eAAA,GAAAF,UAAA,CAAAG,WAAA;MACA,IAAAP,cAAA,QAAAV,aAAA;MACA,IAAAkB,OAAA,QAAAC,OAAA,CAAAlB,KAAA,CAAAmB,GAAA;MAEA,IAAAC,QAAA;MACA,IAAAC,OAAA;;MAEA;MACA,IAAAJ,OAAA,CAAAK,MAAA;QACAF,QAAA,GAAAH,OAAA;QACAI,OAAA,GAAAJ,OAAA,CAAAA,OAAA,CAAAK,MAAA;MACA;MAEA,IAAAF,QAAA,KAAAR,UAAA;QACAH,cAAA,CAAAC,UAAA;MACA,WAAAW,OAAA,KAAAT,UAAA;QACAH,cAAA,CAAAC,UAAA,GAAAD,cAAA,CAAAc,WAAA,GAAAR,eAAA;MACA;QACA;QACA,IAAAS,YAAA,GAAAP,OAAA,CAAAQ,SAAA,WAAAC,IAAA;UAAA,OAAAA,IAAA,KAAAd,UAAA;QAAA;QACA,IAAAe,OAAA,GAAAV,OAAA,CAAAO,YAAA;QACA,IAAAI,OAAA,GAAAX,OAAA,CAAAO,YAAA;;QAEA;QACA,IAAAK,sBAAA,GAAAD,OAAA,CAAAd,GAAA,CAAAgB,UAAA,GAAAF,OAAA,CAAAd,GAAA,CAAAE,WAAA,GAAAtB,gBAAA;;QAEA;QACA,IAAAqC,uBAAA,GAAAJ,OAAA,CAAAb,GAAA,CAAAgB,UAAA,GAAApC,gBAAA;QAEA,IAAAmC,sBAAA,GAAApB,cAAA,CAAAC,UAAA,GAAAK,eAAA;UACAN,cAAA,CAAAC,UAAA,GAAAmB,sBAAA,GAAAd,eAAA;QACA,WAAAgB,uBAAA,GAAAtB,cAAA,CAAAC,UAAA;UACAD,cAAA,CAAAC,UAAA,GAAAqB,uBAAA;QACA;MACA;IACA;EACA;AACA"}]}