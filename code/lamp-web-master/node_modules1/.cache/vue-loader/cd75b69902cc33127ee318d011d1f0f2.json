{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\updatePassword.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\updatePassword.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport userApi from \"@/api/GlobalUser.js\"\n\nexport default {\n  name: \"UserEdit\",\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: \"add\"\n    }\n  },\n  data () {\n    return {\n      user: this.initUser(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        password: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        },\n        confirmPassword: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        }\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    },\n    title () {\n      return \"修改密码\"\n    }\n  },\n  mounted () {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initUser () {\n      return {\n        id: \"\",\n        confirmPassword: \"\",\n        password: \"\",\n        tenantCode: \"\"\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return \"90%\"\n      } else if (this.screenWidth < 1400) {\n        return \"45%\"\n      } else {\n        return \"800px\"\n      }\n    },\n    setUser (val) {\n      const vm = this\n      vm.user = { id: val.id, tenantCode: val.tenantCode }\n    },\n    close () {\n      this.$emit(\"close\")\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.user = this.initUser()\n    },\n    submitForm () {\n      const vm = this\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          vm.editSubmit()\n        } else {\n          return false\n        }\n      })\n    },\n    editSubmit () {\n      userApi.reset(this.user).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.isVisible = false\n          this.$message({\n            message: this.$t(\"tips.updateSuccess\"),\n            type: \"success\"\n          })\n          this.$emit(\"success\")\n        }\n      })\n    }\n  }\n}\n",null]}