{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\sendStatusIndex.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\sendStatusIndex.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport smsSendStatusApi from '@/api/SmsSendStatus.js'\nimport {convertEnum} from '@/utils/utils'\nimport { initMsgEnums, initQueryParams } from '@/utils/commons'\n\nexport default {\n  name: 'SmsSendStatusManage',\n  components: {Pagination},\n  filters: {\n    statusFilter(status) {\n      const map = {\n        false: 'danger',\n        true: 'success'\n      }\n      return map[status] || 'success'\n    }\n  },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {taskId: 0}\n      }),\n      selection: [],\n      // 以下已修改\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {SendStatus: {}}\n\n    }\n  },\n  computed: {\n    sendStatusFilters() {\n      return convertEnum(this.enums.SendStatus)\n    },\n    isVisible: {\n      get() {\n        return this.dialogVisible\n      },\n      set() {\n        // this.close()\n        // this.reset()\n      }\n    },\n  },\n  mounted() {\n    initMsgEnums('SendStatus', this.enums)\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    setTaskId(taskId) {\n      this.queryParams.model.taskId = taskId\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      const taskId = this.queryParams.model.taskId\n      this.queryParams = initQueryParams({\n        model: {taskId: taskId}\n      })\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      smsSendStatusApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        // if (key.includes('.')) {\n        //   const val = {};\n        //   val[key.split('.')[1]] = filters[key][0];\n        //   this.queryParams.model[key.split('.')[0]] = val;\n        // } else {\n        //   this.queryParams.model[key] = filters[key][0]\n        // }\n        if (key.includes('.')) {\n          this.queryParams.model[key.split('.')[0]] = filters[key];\n        } else {\n          this.queryParams.model[key] = filters[key]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n}\n",null]}