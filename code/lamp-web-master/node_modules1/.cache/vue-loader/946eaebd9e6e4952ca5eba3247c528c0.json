{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\org\\org\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\org\\org\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport orgApi from '@/api/Org.js'\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport FileImport from \"@/components/lamp/Import\"\nimport { downloadFile, initDicts } from '@/utils/commons'\n\nexport default {\n  name: 'OrgManager',\n  directives: {elDragDialog},\n  components: {FileImport},\n  data() {\n    return {\n      label: '',\n      orgTree: [],\n      org: this.initOrg(),\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/authority/org/import`\n      },\n      rules: {\n        label: [\n          {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n          {min: 1, max: 255, message: this.$t('rules.range3to10'), trigger: 'blur'}\n        ],\n        type: [\n          {required: true, message: this.$t('rules.require'), trigger: 'change'},\n          {\n            validator: (rule, value, callback) => {\n              if (value === null || value.trim().length <= 0) {\n                callback(this.$t('rules.require'))\n              } else {\n                callback()\n              }\n            }, trigger: 'change'\n          }\n        ]\n      },\n      dicts: {\n        ORG_TYPE: [],\n      }\n    }\n  },\n  mounted() {\n    this.initOrgTree()\n    initDicts(['ORG_TYPE'], this.dicts)\n  },\n  methods: {\n    initOrg() {\n      return {\n        id: '',\n        abbreviation: '',\n        label: '',\n        type: '',\n        parentId: 0,\n        state: true,\n        describe: '',\n        sortValue: 0\n      }\n    },\n    initOrgTree() {\n      orgApi.allTree({})\n        .then((response) => {\n          const res = response.data\n          this.orgTree = res.data\n        })\n    },\n    exportExcelPreview() {\n      const queryParams = {\n        model: {},\n        map: {\n          fileName: '导出组织数据'\n        },\n        size: 10000\n      };\n      orgApi.preview(queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      const queryParams = {\n        model: {},\n        map: {\n          fileName: '导出组织数据'\n        },\n        size: 10000\n      };\n      orgApi.export(queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.initOrgTree();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    handleNumChange(val) {\n      this.org.sortValue = val\n    },\n    filterNode(value, data) {\n      if (!value) return true\n      return data.label.indexOf(value) !== -1\n    },\n    nodeClick(data) {\n      this.org = {...data}\n      this.$refs.form.clearValidate()\n    }\n    ,\n    add() {\n      this.resetForm()\n      const checked = this.$refs.orgTree.getCheckedKeys()\n      if (checked.length > 1) {\n        this.$message({\n          message: this.$t('tips.onlyChooseOne'),\n          type: 'warning'\n        })\n      } else if (checked.length > 0) {\n        this.org.parentId = checked[0]\n      } else {\n        this.org.parentId = 0\n      }\n    },\n    deleteOrg() {\n      const checked = this.$refs.orgTree.getCheckedKeys()\n      if (checked.length === 0) {\n        this.$message({\n          message: this.$t('tips.noNodeSelected'),\n          type: 'warning'\n        })\n      } else {\n        this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          orgApi.delete(checked)\n            .then((response) => {\n              const res = response.data\n              if (res.isSuccess) {\n                this.$message({\n                  message: this.$t('tips.deleteSuccess'),\n                  type: 'success'\n                })\n              }\n              this.reset()\n            })\n        }).catch(() => {\n          this.$refs.orgTree.setCheckedKeys([])\n        })\n      }\n    }\n    ,\n    search() {\n      this.$refs.orgTree.filter(this.label)\n    }\n    ,\n    reset() {\n      this.initOrgTree()\n      this.label = ''\n      this.resetForm()\n    }\n    ,\n    submit() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          if (this.org.id) {\n            this.update()\n          } else {\n            this.save()\n          }\n        } else {\n          return false\n        }\n      })\n    }\n    ,\n    save() {\n      orgApi.save({...this.org})\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n          }\n\n          this.reset()\n        })\n    }\n    ,\n    update() {\n      orgApi.update({...this.org})\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n          }\n          this.reset()\n        })\n    }\n    ,\n    resetForm() {\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.org = this.initOrg()\n    }\n  }\n}\n",null]}