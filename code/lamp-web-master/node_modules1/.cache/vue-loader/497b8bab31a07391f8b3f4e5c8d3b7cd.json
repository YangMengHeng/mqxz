{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\gateway\\blocklist\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\gateway\\blocklist\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport blockListApi from \"@/api/BlockList.js\";\n\nexport default {\n  name: \"BlockListEdit\",\n  directives: { elDragDialog },\n  components: {  },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: \"add\"\n    }\n  },\n  data() {\n    return {\n      confirmDisabled: false,\n      blockList: this.initBlockList(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        requestMethod: { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n        requestUri: { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n      },\n      // 枚举\n      enums: {\n      },\n      // 字典\n      dicts: {\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible;\n      },\n      set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title() {\n      return this.$t(\"common.\" + this.type);\n    }\n  },\n  watch: {},\n  mounted() {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth();\n      })();\n    };\n  },\n  methods: {\n    initBlockList() {\n      return {\n        id: \"\",\n        ip: '',\n        requestUri: '',\n        requestMethod: '',\n        limitStart: '',\n        limitEnd: '',\n        state: true,\n        limit: null\n      };\n    },\n    initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return \"90%\";\n      } else if (this.screenWidth < 1400) {\n        return \"45%\";\n      } else {\n        return \"800px\";\n      }\n    },\n    setBlockList(val = {}) {\n      const vm = this;\n\n      vm.dicts = val['dicts'];\n      vm.enums = val['enums'];\n      if (val['row']) {\n        vm.blockList = { ...val['row'] };\n        if(vm.blockList.limitStart != null && vm.blockList.limitEnd != null){\n          vm.blockList.limit = [vm.blockList.limitStart, vm.blockList.limitEnd]\n        }\n      }\n    },\n    close() {\n      this.$emit(\"close\");\n    },\n    reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.confirmDisabled = false;\n      this.blockList = this.initBlockList();\n    },\n    submitForm() {\n      const vm = this;\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit() {\n      const vm = this;\n      if (this.blockList.limit != null && this.blockList.limit.length == 2) {\n        this.blockList.limitStart = this.blockList.limit[0];\n        this.blockList.limitEnd = this.blockList.limit[1];\n      }\n      if (vm.type === \"edit\") {\n          vm.update();\n      } else {\n          vm.save();\n      }\n    },\n    save() {\n      const vm = this;\n      vm.confirmDisabled = true;\n      blockListApi.save(this.blockList).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: vm.$t(\"tips.createSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      }).finally(()=> vm.confirmDisabled = false);\n    },\n    update() {\n      const vm = this;\n      vm.confirmDisabled = true;\n      blockListApi.update(this.blockList).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: this.$t(\"tips.updateSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      }).finally(()=> vm.confirmDisabled = false);\n    }\n  }\n};\n",{"version":3,"sources":["edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"edit.vue","sourceRoot":"src/views/lamp/gateway/blocklist","sourcesContent":["<template>\n  <el-dialog :close-on-click-modal=\"false\" :close-on-press-escape=\"true\" :title=\"title\" :type=\"type\"\n             :visible.sync=\"isVisible\" :width=\"width\" top=\"50px\" v-el-drag-dialog>\n    <el-form :model=\"blockList\" :rules=\"rules\" label-position=\"right\" label-width=\"100px\" ref=\"form\">\n      <el-form-item :label=\"$t('table.blockList.ip')\" prop=\"ip\">\n        <el-input type=\"\" v-model=\"blockList.ip\" placeholder=\"阻止访问ip\"/>\n      </el-form-item>\n      <el-form-item :label=\"$t('table.blockList.requestUri')\" prop=\"requestUri\">\n        <el-input type=\"\" v-model=\"blockList.requestUri\" placeholder=\"请求URI\"/>\n      </el-form-item>\n      <el-form-item :label=\"$t('table.blockList.requestMethod')\" prop=\"requestMethod\">\n        <el-select clearable placeholder=\"请求方法\" v-model=\"blockList.requestMethod\"\n                   class=\"filter-item search-item\">\n          <el-option key=\"ALL\" label=\"所有\" value=\"ALL\"/>\n          <el-option key=\"GET\" label=\"GET\" value=\"GET\"/>\n          <el-option key=\"POST\" label=\"POST\" value=\"POST\"/>\n          <el-option key=\"DELETE\" label=\"DELETE\" value=\"DELETE\"/>\n          <el-option key=\"PUT\" label=\"PUT\" value=\"PUT\"/>\n        </el-select>\n      </el-form-item>\n      <el-form-item label=\"限制时间\" prop=\"limitEnd\">\n        <el-time-picker\n          is-range\n          format=\"HH:mm:ss\"\n          value-format=\"HH:mm:ss\"\n          v-model=\"blockList.limit\"\n          range-separator=\"至\"\n          start-placeholder=\"开始时间\"\n          end-placeholder=\"结束时间\"\n          placeholder=\"限制时间\">\n        </el-time-picker>\n      </el-form-item>\n      <el-form-item :label=\"$t('table.blockList.state')\" prop=\"state\">\n        <el-radio-group v-model=\"blockList.state\" size=\"medium\">\n          <el-radio-button :label=\"true\">{{ $t(\"common.state.valid\") }}</el-radio-button>\n          <el-radio-button :label=\"false\">{{ $t(\"common.state.invalid\") }}</el-radio-button>\n        </el-radio-group>\n      </el-form-item>\n    </el-form>\n    <div class=\"dialog-footer\" slot=\"footer\">\n      <el-button @click=\"isVisible = false\" plain type=\"warning\">\n        {{ $t(\"common.cancel\") }}\n      </el-button>\n      <el-button @click=\"submitForm\" :disabled=\"confirmDisabled\" plain type=\"primary\">\n        {{ $t(\"common.confirm\") }}\n      </el-button>\n    </div>\n  </el-dialog>\n</template>\n<script>\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport blockListApi from \"@/api/BlockList.js\";\n\nexport default {\n  name: \"BlockListEdit\",\n  directives: { elDragDialog },\n  components: {  },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: \"add\"\n    }\n  },\n  data() {\n    return {\n      confirmDisabled: false,\n      blockList: this.initBlockList(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        requestMethod: { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n        requestUri: { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n      },\n      // 枚举\n      enums: {\n      },\n      // 字典\n      dicts: {\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible;\n      },\n      set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title() {\n      return this.$t(\"common.\" + this.type);\n    }\n  },\n  watch: {},\n  mounted() {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth();\n      })();\n    };\n  },\n  methods: {\n    initBlockList() {\n      return {\n        id: \"\",\n        ip: '',\n        requestUri: '',\n        requestMethod: '',\n        limitStart: '',\n        limitEnd: '',\n        state: true,\n        limit: null\n      };\n    },\n    initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return \"90%\";\n      } else if (this.screenWidth < 1400) {\n        return \"45%\";\n      } else {\n        return \"800px\";\n      }\n    },\n    setBlockList(val = {}) {\n      const vm = this;\n\n      vm.dicts = val['dicts'];\n      vm.enums = val['enums'];\n      if (val['row']) {\n        vm.blockList = { ...val['row'] };\n        if(vm.blockList.limitStart != null && vm.blockList.limitEnd != null){\n          vm.blockList.limit = [vm.blockList.limitStart, vm.blockList.limitEnd]\n        }\n      }\n    },\n    close() {\n      this.$emit(\"close\");\n    },\n    reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.confirmDisabled = false;\n      this.blockList = this.initBlockList();\n    },\n    submitForm() {\n      const vm = this;\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit() {\n      const vm = this;\n      if (this.blockList.limit != null && this.blockList.limit.length == 2) {\n        this.blockList.limitStart = this.blockList.limit[0];\n        this.blockList.limitEnd = this.blockList.limit[1];\n      }\n      if (vm.type === \"edit\") {\n          vm.update();\n      } else {\n          vm.save();\n      }\n    },\n    save() {\n      const vm = this;\n      vm.confirmDisabled = true;\n      blockListApi.save(this.blockList).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: vm.$t(\"tips.createSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      }).finally(()=> vm.confirmDisabled = false);\n    },\n    update() {\n      const vm = this;\n      vm.confirmDisabled = true;\n      blockListApi.update(this.blockList).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: this.$t(\"tips.updateSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      }).finally(()=> vm.confirmDisabled = false);\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped></style>\n"]}]}