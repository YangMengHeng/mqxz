{"remainingRequest":"E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\项目\\lamp-web-master\\src\\views\\lamp\\activiti\\reimbursement\\ruTask\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\项目\\lamp-web-master\\src\\views\\lamp\\activiti\\reimbursement\\ruTask\\index.vue","mtime":1679380940000},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\项目\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\项目\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport ModelEdit from \"./edit\";\nimport activitiApi from \"@/api/Activiti.js\";\nimport userApi from \"@/api/User.js\";\nimport {initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"RuTaskManage\",\n  components: {Pagination, ModelEdit},\n  filters: {},\n  data() {\n    return {\n      dialogVisible: false,\n      taskTransVisible: false,\n      dialogImageUrl: \"\",\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      tableKey: 0,\n      isHist: false,\n      queryParams: initQueryParams({\n        model: {}\n      }),\n      suspendStateType: {\n        start: '1',\n        stop: '2'\n      },\n      isHistType: [{\n        value: false, label: '待办任务'\n      }, {\n        value: true, label: '已办任务'\n      }],\n      users: [],\n      selection: [],\n      loading: false,\n      tableData: {\n        records: [],\n        total: 0\n      },\n      targetUser: null,\n      targetRow: null,\n    };\n  },\n  computed: {},\n  mounted() {\n    this.fetch();\n  },\n  methods: {\n    fetch(params = {}) {\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      var api;\n      if (this.isHist) {\n        api = activitiApi.pageHiTaskReimbursement(this.queryParams)\n      } else {\n        api = activitiApi.pageTaskReimbursement(this.queryParams)\n      }\n      api.then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData.records = res.data.records;\n          this.tableData.total = res.data.total;\n        }\n      }).finally(() => this.loading = false);\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    editClose() {\n      this.reset()\n    },\n    taskTransVisibleClose() {\n      this.reset()\n      this.targetUser = null\n      this.targetRow = null\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      });\n    },\n    reset() {\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleTransView(row) {\n      const vm = this;\n      vm.taskTransVisible = true;\n      this.targetRow = row\n      userApi.find({}).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          vm.users = res.data;\n        } else {\n          this.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(() => this.loading = false);\n    },\n    singleTrans(row) {\n      const vm = this;\n      var data = {\n        taskId: vm.targetRow.id,\n        userId: vm.targetUser\n      }\n      activitiApi.updateAssignee(data).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.updateSuccess\"),\n            type: 'success'\n          });\n          this.search();\n        } else {\n          this.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(() => this.loading = false);\n    },\n    singleUpdate(row) {\n      const vm = this;\n      var data = {\n        instId: row.procInstId,\n        suspendState: row.suspendState\n      }\n      activitiApi.updateSuspendStateInst(data).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.updateSuccess\"),\n            type: 'success'\n          });\n          this.search();\n        } else {\n          this.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(() => this.loading = false);\n    },\n    singleFormView(row) {\n      this.$refs.modelEdit.open(row)\n    },\n    singleDelete(row) {\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          this.delete( [row.id]);\n        })\n        .catch(() => {\n          this.reset();\n        });\n    },\n    delete(data) {\n      activitiApi.deleteInst(data).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.deleteSuccess\"),\n            type: 'success'\n          });\n          this.search();\n        } else {\n          this.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      }).finally(() => this.loading = false);\n    },\n    singleDetail(row) {\n      this.singleFormView(row)\n    },\n    getFormQuery() {\n      activitiApi.formQuery({}).then(response => {\n        const res = response.data;\n      }).finally(() => this.loading = false);\n    }\n  }\n};\n",null]}