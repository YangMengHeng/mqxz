{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport {readUserAgent} from '@/utils/utils'\nimport optLogApi from '@/api/OptLog.js'\nimport {convertEnum} from '@/utils/utils'\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport { downloadFile, initEnums, initQueryParams } from '@/utils/commons'\n\nexport default {\n  name: 'OptLog',\n  directives: { elDragDialog },\n  components: {Pagination},\n  filters: {\n    timeFilter(time) {\n      if (time < 500) {\n        return 'success'\n      } else if (time < 1000) {\n        return ''\n      } else if (time < 1500) {\n        return 'warning'\n      } else {\n        return 'danger'\n      }\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      loading: false,\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      queryParams: initQueryParams({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        },\n        sort: 'createTime'\n      }),\n      selection: [],\n      tableData: {},\n      enums: {\n        LogType: {},\n        HttpMethod: {},\n      },\n      drawer: false,\n      currentRow: {}\n    }\n  },\n  computed: {\n    typeFilters() {\n      return convertEnum(this.enums.LogType)\n    },\n    httpMethodFilters() {\n      return convertEnum(this.enums.HttpMethod)\n    }\n  },\n  mounted() {\n    initEnums(['LogType', 'HttpMethod'], this.enums)\n    this.fetch()\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      optLogApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      optLogApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      optLogApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    clear(type) {\n      this.$confirm('确认要清除日志吗？', this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          optLogApi.clear({type: type}).then(response => {\n            const res = response.data;\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t(\"tips.deleteSuccess\"),\n                type: \"success\"\n              });\n            }\n\n            this.search();\n          });\n\n        })\n        .catch(() => {\n        });\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        const logIds = this.selection.map(item => item.id)\n        this.delete(logIds)\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(logIds) {\n      optLogApi.delete(logIds)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n          }\n          this.search()\n        })\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        }\n      });\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    transTime(time) {\n      return `${time} ms`\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    onView(row) {\n      optLogApi.get(row.id) .then((response) => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.currentRow = res.data\n          this.drawer = true\n        }\n      })\n    },\n    closeDrawer(done) {\n      done()\n      this.currentRow = {}\n    },\n    uaForamt(row) {\n      let ua = readUserAgent(row.ua)\n      return ua.terminal + '  |  ' + ua.browser\n    }\n\n  }\n}\n",null]}