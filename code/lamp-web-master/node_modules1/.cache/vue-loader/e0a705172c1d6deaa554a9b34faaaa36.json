{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\dictionaryItem.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\dictionaryItem.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport DictionaryItemEdit from './dictionaryItemEdit'\nimport dictionaryApi from '@/api/Dictionary.js'\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport {initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'DictionaryItemManage',\n  directives: {elDragDialog},\n  components: {Pagination, DictionaryItemEdit},\n  filters: {\n    stateFilter(state) {\n      const map = {\n        false: 'danger',\n        true: 'success'\n      }\n      return map[state] || 'success'\n    }\n  },\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {\n          type: '###'\n        },\n        sort: 'sortValue',\n        order:'ascending'\n      }),\n      selection: [],\n      loading: false,\n      dictionary: {\n        type: '',\n        label: ''\n      },\n      tableData: {\n        total: 0\n      },\n    }\n  },\n  computed: {},\n  watch: {},\n  mounted() {\n    this.fetch({\n      ...this.queryParams\n    })\n  },\n  methods: {\n    editClose() {\n      this.dialog.isVisible = false\n    },\n    editSuccess() {\n      this.search()\n    },\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model: {type: this.dictionary.type}\n      })\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        const ids = []\n        this.selection.forEach((u) => {\n          ids.push(u.id)\n        })\n        this.delete(ids)\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(ids) {\n      dictionaryApi.delete(ids)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n          }\n          this.search()\n        })\n    },\n    add() {\n      this.dialog.type = 'add'\n      this.dialog.isVisible = true\n      this.$refs.edit.setDictionaryItem({\n        id: null,\n        state: true,\n        type: this.dictionary.type,\n        label: this.dictionary.label\n      })\n    },\n    edit(row) {\n      this.$refs.edit.setDictionaryItem(row)\n      this.dialog.type = 'edit'\n      this.dialog.isVisible = true\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      dictionaryApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    dictionaryClick(dictionary) {\n      this.queryParams.model.type = dictionary.type\n      this.dictionary = dictionary\n      this.search()\n    }\n  }\n}\n",{"version":3,"sources":["dictionaryItem.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"dictionaryItem.vue","sourceRoot":"src/views/lamp/system/dictionary","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div v-if=\"queryParams.type === '###'\">\n      <div class=\"my-code\">点击字典查看详情</div>\n    </div>\n    <div v-else>\n      <div class=\"filter-container\">\n        <el-input :placeholder=\"$t('table.dictionary.code')\" size=\"small\" class=\"filter-item search-item\"\n                  v-model=\"queryParams.model.code\"/>\n        <el-input :placeholder=\"$t('table.dictionary.name')\" size=\"small\" class=\"filter-item search-item\"\n                  v-model=\"queryParams.model.name\"/>\n        <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\" size=\"small\">{{ $t('table.search') }}</el-button>\n        <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\" size=\"small\">{{ $t('table.reset') }}</el-button>\n        <el-dropdown class=\"filter-item\" trigger=\"click\"\n                     v-has-any-permission=\"['authority:dictionary:add','authority:dictionary:delete']\">\n          <el-button size=\"small\">\n            {{ $t('table.more') }}\n            <i class=\"el-icon-arrow-down el-icon--right\"/>\n          </el-button>\n          <el-dropdown-menu slot=\"dropdown\">\n            <el-dropdown-item @click.native=\"add\" v-has-permission=\"['authority:dictionary:add']\">{{ $t('table.add') }}\n            </el-dropdown-item>\n            <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['authority:dictionary:delete']\">{{ $t('table.delete') }}\n            </el-dropdown-item>\n          </el-dropdown-menu>\n        </el-dropdown>\n      </div>\n      <el-table :data=\"tableData.records\" :key=\"tableKey\" @selection-change=\"onSelectChange\" @sort-change=\"sortChange\"  @cell-click=\"cellClick\" @filter-change=\"filterChange\"\n                border fit row-key=\"id\" ref=\"table\" size=\"mini\" style=\"width: 100%;\" v-loading=\"loading\">\n        <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n        <el-table-column :label=\"$t('table.dictionary.code')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                         prop=\"name\">\n          <template slot-scope=\"scope\">\n            <span>{{ scope.row.code }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column :label=\"$t('table.dictionary.name')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                         prop=\"name\">\n          <template slot-scope=\"scope\">\n            <span>{{ scope.row.name }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column :label=\"$t('table.dictionary.describe')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                         prop=\"describe\">\n          <template slot-scope=\"scope\">\n            <span>{{ scope.row.describe }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column\n          column-key=\"state\"\n          :filter-multiple=\"false\"\n          :filters=\"[{ text: $t('common.state.valid'), value: true }, { text: $t('common.state.invalid'), value: false }]\"\n          :label=\"$t('table.dictionary.state')\"\n          class-name=\"status-col\"\n          width=\"70px\"\n        >\n          <template slot-scope=\"{row}\">\n            <el-tag :type=\"row.state | stateFilter\">{{ row.state ? $t('common.state.valid') :\n              $t('common.state.invalid') }}\n            </el-tag>\n          </template>\n        </el-table-column>\n        <el-table-column :label=\"$t('table.createTime')\" align=\"center\" prop=\"createTime\" sortable=\"custom\"\n                         width=\"160px\">\n          <template slot-scope=\"scope\">\n            <span>{{ scope.row.createTime }}</span>\n          </template>\n        </el-table-column>\n        <el-table-column :label=\"$t('table.operation')\"  column-key=\"operation\" sortable=\"custom\" align=\"center\" class-name=\"small-padding fixed-width\"\n                         width=\"100px\">\n          <template slot-scope=\"{row}\">\n            <i @click=\"edit(row)\" class=\"el-icon-edit table-operation\" style=\"color: #2db7f5;\"\n               v-hasPermission=\"['authority:dictionary:edit']\"/>\n            <i @click=\"singleDelete(row)\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\"\n               v-hasPermission=\"['authority:dictionary:delete']\"/>\n            <el-link class=\"no-perm\" v-has-no-permission=\"['authority:dictionary:edit','authority:dictionary:delete']\">{{ $t('tips.noPermission') }}\n            </el-link>\n          </template>\n        </el-table-column>\n      </el-table>\n      <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\" :total=\"Number(tableData.total)\"\n                  @pagination=\"fetch\" v-show=\"tableData.total>0\"/>\n      <dictionaryItem-edit :dialog-visible=\"dialog.isVisible\" :type=\"dialog.type\" @close=\"editClose\"\n                           @success=\"editSuccess\" ref=\"edit\"/>\n    </div>\n  </div>\n</template>\n\n<script>\n  import Pagination from '@/components/Pagination'\n  import DictionaryItemEdit from './dictionaryItemEdit'\n  import dictionaryApi from '@/api/Dictionary.js'\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import {initQueryParams} from '@/utils/commons'\n\n  export default {\n    name: 'DictionaryItemManage',\n    directives: {elDragDialog},\n    components: {Pagination, DictionaryItemEdit},\n    filters: {\n      stateFilter(state) {\n        const map = {\n          false: 'danger',\n          true: 'success'\n        }\n        return map[state] || 'success'\n      }\n    },\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: 'add'\n        },\n        tableKey: 0,\n        queryParams: initQueryParams({\n          model: {\n            type: '###'\n          },\n          sort: 'sortValue',\n          order:'ascending'\n        }),\n        selection: [],\n        loading: false,\n        dictionary: {\n          type: '',\n          label: ''\n        },\n        tableData: {\n          total: 0\n        },\n      }\n    },\n    computed: {},\n    watch: {},\n    mounted() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    methods: {\n      editClose() {\n        this.dialog.isVisible = false\n      },\n      editSuccess() {\n        this.search()\n      },\n      onSelectChange(selection) {\n        this.selection = selection\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        })\n      },\n      reset() {\n        this.queryParams = initQueryParams({\n          model: {type: this.dictionary.type}\n        })\n        this.$refs.table.clearSort()\n        this.$refs.table.clearFilter()\n        this.search()\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection()\n        this.$refs.table.toggleRowSelection(row, true)\n        this.batchDelete()\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t('tips.noDataSelected'),\n            type: 'warning'\n          })\n          return\n        }\n        this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          const ids = []\n          this.selection.forEach((u) => {\n            ids.push(u.id)\n          })\n          this.delete(ids)\n        }).catch(() => {\n          this.clearSelections()\n        })\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection()\n      },\n      delete(ids) {\n        dictionaryApi.delete(ids)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.deleteSuccess'),\n                type: 'success'\n              })\n            }\n            this.search()\n          })\n      },\n      add() {\n        this.dialog.type = 'add'\n        this.dialog.isVisible = true\n        this.$refs.edit.setDictionaryItem({\n          id: null,\n          state: true,\n          type: this.dictionary.type,\n          label: this.dictionary.label\n        })\n      },\n      edit(row) {\n        this.$refs.edit.setDictionaryItem(row)\n        this.dialog.type = 'edit'\n        this.dialog.isVisible = true\n      },\n      fetch(params = {}) {\n        this.loading = true;\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n        dictionaryApi.page(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      cellClick (row, column) {\n        if (column['columnKey'] === \"operation\") {\n          return;\n        }\n        let flag = false;\n        this.selection.forEach((item)=>{\n          if(item.id === row.id) {\n            flag = true;\n            this.$refs.table.toggleRowSelection(row);\n          }\n        })\n\n        if(!flag){\n          this.$refs.table.toggleRowSelection(row, true);\n        }\n      },\n      dictionaryClick(dictionary) {\n        this.queryParams.model.type = dictionary.type\n        this.dictionary = dictionary\n        this.search()\n      }\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}