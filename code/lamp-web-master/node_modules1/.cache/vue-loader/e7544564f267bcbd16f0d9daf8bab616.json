{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\components\\lamp\\fileUpload.vue?vue&type=style&index=0&id=241a81da&prod&lang=css&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\components\\lamp\\fileUpload.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\css-loader\\index.js","mtime":1686711135550},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1686711138278},{"path":"E:\\project\\lamp-web-master\\node_modules\\postcss-loader\\src\\index.js","mtime":1686711136346},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.hidebtn .el-upload {\n  display: none;\n}\n",{"version":3,"sources":["fileUpload.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgWA;AACA;AACA","file":"fileUpload.vue","sourceRoot":"src/components/lamp","sourcesContent":["<template>\n  <div>\n    <el-upload\n      :accept=\"accept\"\n      :action=\"action\"\n      :auto-upload=\"autoUpload\"\n      :before-remove=\"beforeRemove\"\n      :class=\"isUpload === false ? 'hidebtn' : ''\"\n      :data=\"fileOtherData\"\n      :file-list=\"fileList\"\n      :headers=\"headers\"\n      :limit=\"limit\"\n      :multiple=\"multiple\"\n      :on-change=\"handleChange\"\n      :on-error=\"handleError\"\n      :on-exceed=\"handleExceed\"\n      :on-preview=\"handlePreview\"\n      :on-remove=\"handleRemove\"\n      :ref=\"uploadRef\"\n      class=\"upload-demo\"\n    >\n      <el-button size=\"small\" type=\"primary\" v-if=\"isUpload\"\n        >点击上传</el-button\n      >\n    </el-upload>\n  </div>\n</template>\n\n<script>\nimport db from \"@/utils/localstorage\";\nimport commonApi from \"@/api/Common.js\";\nimport { copy } from '@/utils/utils'\nimport {Base64} from 'js-base64';\n\nexport default {\n  name: \"FileUpload\",\n  props: {\n    uploadRef: {\n      type: String,\n      default: \"file1\"\n    },\n    // 是否多选\n    multiple: {\n      type: Boolean,\n      default: true\n    },\n    // 是否自动上传\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    // 是否上传文件\n    isUpload: {\n      type: Boolean,\n      default: true\n    },\n    // 最大允许上传个数\n    limit: {\n      type: Number,\n      default: null\n    },\n    // 允许上传的文件类型\n    accept: {\n      type: String,\n      default: \"\"\n    },\n    action: {\n      type: String,\n      default: `${process.env.VUE_APP_BASE_API}/file/file/anyone/upload`\n    },\n    // 允许上传的文件大小 单位：字节\n    acceptSize: {\n      type: Number,\n      default: null\n    },\n    // 默认额外上传数据\n    fileOtherData: {\n      type: Object,\n      default: function() {\n        return {\n          id: null,\n          bizId: \"\",\n          bizType: \"\",\n          isSingle: false\n        };\n      }\n    }\n  },\n  data() {\n    return {\n      // 默认附件列表\n      fileList: [],\n      // 删除附件列表\n      removeFileAry: [],\n      // 新增附件列表\n      addFileAry: [],\n      // 上传成功的文件数\n      successNum: 0,\n      // 上传失败的文件数\n      errorNum: 0,\n      // 已上传的文件数\n      uploadTotalNum: 0,\n      // 是否上传失败\n      isUploadError: false,\n      // action: `${process.env.VUE_APP_BASE_API}/file/file/anyone/upload`\n    };\n  },\n  computed: {\n    headers() {\n      return {\n        token: 'Bearer ' + db.get(\"TOKEN\", \"\"),\n        tenant: db.get(\"TENANT\", \"\") || \"\",\n        Authorization: `Basic ${Base64.encode(`${process.env.VUE_APP_CLIENT_ID}:${process.env.VUE_APP_CLIENT_SECRET}`)}`\n      };\n    }\n  },\n  methods: {\n    // 附件初始化\n    init({ id, bizId, bizType, isSingle, isDetail }) {\n      const vm = this;\n      vm.fileOtherData.bizId = bizId;\n      vm.fileOtherData.id = id || \"\";\n      vm.fileOtherData.bizType = bizType;\n      vm.fileOtherData.isSingle = isSingle || false;\n      vm.fileList.length = 0;\n      vm.removeFileAry = [];\n      vm.addFileAry = [];\n      vm.$emit(\"fileLengthVaild\", 0);\n      if (isDetail) {\n        vm.getAttachment();\n      }\n      vm.successNum = 0;\n      vm.errorNum = 0;\n      vm.uploadTotalNum = 0;\n      vm.$refs[vm.uploadRef].clearFiles();\n    },\n\n    handleChange(file, fileList) {\n      const vm = this;\n      if (file.response) {\n        vm.uploadTotalNum += 1;\n        if (file.response.isSuccess) {\n          vm.fileOtherData.bizId = file.response.data.bizId;\n          vm.successNum += 1;\n        } else {\n          setTimeout(() => {\n            vm.$message({\n              message: file.name + \"上传失败，原因：<br/>\" + file.response.msg,\n              type: \"error\",\n              dangerouslyUseHTMLString: true,\n              showClose: true,\n              duration: 10000,\n              onClose: (msg)=>{\n                copy(msg['message']);\n                vm.$message({\n                  message: \"复制错误消息成功\",\n                  type: \"success\",\n                });\n              }\n            });\n          }, 0);\n          vm.isUploadError = false;\n          vm.errorNum += 1;\n        }\n        vm.$emit(\"setId\", vm.uploadTotalNum === fileList.length && vm.errorNum <= 0, file.response);\n      } else {\n        if (vm.acceptSize) {\n          const isLtAcceptSize = file.size > vm.acceptSize;\n\n          if (isLtAcceptSize) {\n            setTimeout(() => {\n              vm.$message.error(\n                \"只能上传\" +\n                  vm.renderSize(vm.acceptSize) +\n                  \"的文件!已为您过滤文件：\" +\n                  file.name\n              );\n            }, 10);\n\n            fileList.forEach((item, index) => {\n              if (item.uid === file.uid) {\n                fileList.splice(index, 1);\n              }\n            });\n          } else {\n            if (!vm.isUploadError) {\n              vm.addFileAry.push(file.name);\n            }\n            vm.isUploadError = false;\n          }\n        } else {\n          if (!vm.isUploadError) {\n            vm.addFileAry.push(file.name);\n          }\n          vm.isUploadError = false;\n        }\n        vm.$emit(\"fileLengthVaild\", vm.fileList.length + vm.addFileAry.length);\n      }\n      vm.$store.state.hasLoading = false;\n    },\n    // 附件上传失败\n    handleError() {\n      const vm = this;\n      vm.$message.error(\"附件上传失败，请重试\");\n      vm.isUploadError = true;\n      vm.$store.state.hasLoading = false;\n    },\n    renderSize(value) {\n      if (null == value || value == \"\") {\n        return \"0 B\";\n      }\n      const unitArr = new Array(\n        \"B\",\n        \"KB\",\n        \"MB\",\n        \"GB\",\n        \"TB\",\n        \"PB\",\n        \"EB\",\n        \"ZB\",\n        \"YB\"\n      );\n      let index = 0;\n      let srcsize = parseFloat(value);\n      index = Math.floor(Math.log(srcsize) / Math.log(1024));\n      let size = srcsize / Math.pow(1024, index);\n      size = size.toFixed(2);\n      if (unitArr[index]) {\n        return size + unitArr[index];\n      }\n      return \"文件太大\";\n    },\n    handlePreview(file) {\n      if (file.bizId) {\n        this.downLoadFile(file);\n      }\n    },\n    beforeRemove(file) {\n      return this.$confirm(\"确定移除\" + file.name, \"删除确认\");\n    },\n    // 文件超出个数限制时的钩子\n    handleExceed() {\n      const vm = this;\n      vm.$message(\"当前最多允许上传\" + vm.limit + \"个文件\");\n    },\n    // 删除附件列表\n    handleRemove(file) {\n      const vm = this;\n      if (file.bizId) {\n        vm.removeFileAry.push(file.id);\n        vm.fileList.map((item, index) => {\n          if (item.name === file.name) {\n            vm.fileList.splice(index, 1);\n            return false;\n          }\n        });\n      } else {\n        vm.addFileAry.map((item, index) => {\n          if (item === file.name) {\n            vm.addFileAry.splice(index, 1);\n            return false;\n          }\n        });\n      }\n      vm.$emit(\"fileLengthVaild\", vm.fileList.length + vm.addFileAry.length);\n    },\n    // 服务器删除附件\n    async deleteAttachment() {\n      const vm = this;\n      const res = await commonApi.deleteAttachment(vm.removeFileAry);\n      if (res.status === 200) {\n        if (res.data.code !== 0) {\n          vm.$message(res.data.msg);\n        } else {\n          vm.removeFileAry = [];\n        }\n      }\n    },\n    // 查询附件\n    async getAttachment() {\n      const vm = this;\n      const res = await commonApi.getAttachment({\n        bizIds: vm.fileOtherData.bizId,\n        bizTypes: vm.fileOtherData.bizType\n      });\n      if (res.status === 200) {\n        if (res.data.code === 0) {\n          if (res.data.data.length > 0) {\n            let data = res.data.data[0].list;\n            data.map(item => {\n              item.name = item.submittedFileName;\n            });\n            vm.fileList = data;\n            vm.$emit(\"fileLengthVaild\", vm.fileList.length);\n          }\n        }\n      }\n    },\n    // 查询附件\n    async getAttachmentByArr(bizIds, bizTypes) {\n      const vm = this;\n      const res = await commonApi.getAttachment({\n        bizIds: bizIds,\n        bizTypes: bizTypes\n      });\n      if (res.status === 200) {\n        if (res.data.code === 0) {\n          if (res.data.data.length > 0) {\n            let data = res.data.data[0].list;\n            data.map(item => {\n              item.name = item.submittedFileName;\n            });\n            vm.fileList = data;\n          }\n        }\n      }\n    },\n    // 返回附件新增及删除数组长度\n    handleBack() {\n      const vm = this;\n      return {\n        addLength: vm.addFileAry.length,\n        removeLength: vm.removeFileAry.length\n      };\n    },\n    // 附件上传服务器触发方法\n    submitFile(id, bizId, bizType, name) {\n      const vm = this;\n      vm.fileOtherData.id = id;\n      if (bizId) {\n        vm.fileOtherData.bizId = bizId;\n        vm.isUpload = true;\n      }\n      vm.fileOtherData.bizType = bizType;\n      if (name) {\n        vm.fileOtherData.name = name\n      }\n      vm.$refs[vm.uploadRef].submit();\n      vm.addFileAry = [];\n    },\n    // 附件下载\n    async downLoadFile(data) {\n      let link = document.createElement(\"a\");\n      link.href = data.url;\n      link.download = data.name;\n      link.click();\n      window.URL.revokeObjectURL(link.href);\n    }\n  }\n};\n</script>\n<style>\n.hidebtn .el-upload {\n  display: none;\n}\n</style>\n"]}]}