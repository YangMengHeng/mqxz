{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\login\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\login\\index.vue","mtime":1687173624345},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport LangSelect from \"@/components/LangSelect\";\nimport db from \"@/utils/localstorage\";\nimport {randomNum} from \"@/utils\";\nimport {socialLoginUrl} from \"@/settings\";\nimport loginApi from \"@/api/Login.js\";\nimport {Base64} from \"js-base64\";\n\nexport default {\n  name: \"Login\",\n  components: {LangSelect},\n  data() {\n    return {\n      //是否启用多租户\n      isMultiTenant: process.env.VUE_APP_IS_MULTI_TENANT_TYPE !== \"NONE\",\n      isCaptcha: process.env.VUE_APP_IS_CAPTCHA === \"true\",\n      tabActiveName: \"bindLogin\",\n      login: {\n        type: \"up\"\n      },\n      // 第三方登陆的选择\n      logo: [\n        {img: \"gitee.png\", name: \"gitee\", radius: true},\n        {img: \"github.png\", name: \"github\", radius: true},\n        {img: \"tencent_cloud.png\", name: \"tencent_cloud\", radius: true},\n        {img: \"qq.png\", name: \"qq\", radius: false},\n        {img: \"dingtalk.png\", name: \"dingtalk\", radius: true},\n        {img: \"microsoft.png\", name: \"microsoft\", radius: false}\n      ],\n      loginForm: {\n        account: \"lamp\",\n        password: \"lamp\",\n        tenantView: \"0000\", //显示用的\n        tenant: \"\", //传递给后端的\n        key: randomNum(24, 16),\n        code: \"\",\n        grantType:\n          process.env.VUE_APP_IS_CAPTCHA === \"true\" ? \"captcha\" : \"password\",\n        bindAccount: \"\",\n        bindPassword: \"\",\n        signAccount: \"\",\n        signPassword: \"\"\n      },\n      rules: {\n        account: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        },\n        tenantView: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        },\n        password: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        },\n        code: {\n          validator: (rule, value, callback) => {\n            if (this.isCaptcha && value === \"\") {\n              callback(\"验证码不能为空\");\n            } else {\n              callback();\n            }\n            callback();\n          },\n          trigger: \"blur\"\n        },\n        bindAccount: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        },\n        bindPassword: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        },\n        signAccount: [\n          {\n            required: true,\n            message: this.$t(\"rules.require\"),\n            trigger: \"blur\"\n          },\n          {\n            min: 4,\n            max: 10,\n            message: this.$t(\"rules.range4to10\"),\n            trigger: \"blur\"\n          }\n        ],\n        signPassword: [\n          {\n            required: true,\n            message: this.$t(\"rules.require\"),\n            trigger: \"blur\"\n          },\n          {\n            min: 6,\n            max: 20,\n            message: this.$t(\"rules.range6to20\"),\n            trigger: \"blur\"\n          }\n        ]\n      },\n      authUser: null,\n      loading: false,\n      showDialog: false,\n      redirect: undefined,\n      otherQuery: {},\n      imageCode: \"\",\n      page: {\n        width: window.screen.width * 0.5,\n        height: window.screen.height * 0.5\n      }\n    };\n  },\n  created() {\n  },\n  mounted() {\n    db.clear();\n    this.getCodeImage();\n  },\n  destroyed() {\n    window.removeEventListener(\"message\", this.resolveSocialLogin);\n  },\n  methods: {\n    getCodeImage() {\n      if (this.isCaptcha) {\n        loginApi\n          .getCaptcha(this.loginForm.key)\n          .then(response => {\n            const res = response.data;\n            if (res.byteLength <= 100) {\n              this.$message({\n                message: this.$t(\"tips.systemError\"),\n                type: \"error\"\n              });\n            }\n            return (\n              \"data:image/png;base64,\" +\n              btoa(\n                new Uint8Array(res).reduce(\n                  (data, byte) => data + String.fromCharCode(byte),\n                  \"\"\n                )\n              )\n            );\n          })\n          .then(res => {\n            this.imageCode = res;\n          })\n          .catch(e => {\n            if (e.toString().indexOf(\"429\") !== -1) {\n              this.$message({\n                message: this.$t(\"tips.tooManyRequest\"),\n                type: \"error\"\n              });\n            } else {\n              this.$message({\n                message: this.$t(\"tips.getCodeImageFailed\"),\n                type: \"error\"\n              });\n            }\n          });\n      }\n    },\n    handleTabClick(tab) {\n      this.tabActiveName = tab.name;\n    },\n    resolveLogo(logo) {\n      return require(`@/assets/logo/${logo}`);\n    },\n    socialLogin(oauthType) {\n      const url = `${socialLoginUrl}/${oauthType}/login`;\n      window.open(\n        url,\n        \"newWindow\",\n        `resizable=yes, height=${this.page.height}, width=${this.page.width}, top=10%, left=10%, toolbar=no, menubar=no, scrollbars=no, resizable=no,location=no, status=no`\n      );\n      window.addEventListener(\"message\", this.resolveSocialLogin, false);\n    },\n    resolveSocialLogin(e) {\n      const data = e.data;\n      const that = this;\n      if (data.message === \"not_bind\") {\n        that.login.type = \"bind\";\n        const authUser = data.data;\n        that.authUser = authUser;\n        that\n          .$confirm(\n            that.$t(\"common.current\") +\n            authUser.source +\n            that.$t(\"common.socialAccount\") +\n            authUser.nickname +\n            that.$t(\"common.socialTips\"),\n            that.$t(\"common.tips\"),\n            {\n              confirmButtonText: that.$t(\"common.signLogin\"),\n              cancelButtonText: that.$t(\"common.bindLogin\"),\n              type: \"warning\"\n            }\n          )\n          .then(() => {\n            that.tabActiveName = \"signLogin\";\n          })\n          .catch(() => {\n            that.tabActiveName = \"bindLogin\";\n          });\n      } else if (data.message === \"social_login_success\") {\n        that.saveLoginData(data.data);\n        that.getUserDetailInfo();\n        that.loginSuccessCallback(data.account);\n      } else {\n        // do nothing\n      }\n    },\n    bindLogin() {\n      let account_c = false;\n      let password_c = false;\n      this.$refs.loginForm.validateField(\"bindAccount\", e => {\n        if (!e) {\n          account_c = true;\n        }\n      });\n      this.$refs.loginForm.validateField(\"bindPassword\", e => {\n        if (!e) {\n          password_c = true;\n        }\n      });\n      if (account_c && password_c) {\n        this.loading = true;\n        const that = this;\n        const params = {\n          bindAccount: that.loginForm.bindAccount,\n          bindPassword: that.loginForm.bindPassword,\n          ...that.authUser\n        };\n        params.token = null;\n        that\n          .$post(\"auth/social/bind/login\", params)\n          .then(r => {\n            const data = r.data.data;\n            this.saveLoginData(data);\n            this.getUserDetailInfo();\n            this.loginSuccessCallback(that.loginForm.bindAccount);\n          })\n          .catch(error => {\n            console.error(error);\n            that.loading = false;\n          });\n      }\n    },\n    signLogin() {\n      let account_c = false;\n      let password_c = false;\n      this.$refs.loginForm.validateField(\"signAccount\", e => {\n        if (!e) {\n          account_c = true;\n        }\n      });\n      this.$refs.loginForm.validateField(\"signPassword\", e => {\n        if (!e) {\n          password_c = true;\n        }\n      });\n      if (account_c && password_c) {\n        this.loading = true;\n        const that = this;\n        const params = {\n          bindAccount: that.loginForm.signAccount,\n          bindPassword: that.loginForm.signPassword,\n          ...that.authUser\n        };\n        params.token = null;\n        that\n          .$post(\"auth/social/sign/login\", params)\n          .then(r => {\n            const data = r.data.data;\n            this.saveLoginData(data);\n            this.getUserDetailInfo();\n            this.loginSuccessCallback(that.loginForm.signAccount);\n          })\n          .catch(error => {\n            console.error(error);\n            that.loading = false;\n          });\n      }\n    },\n    handleLogin() {\n      this.loginForm.tenant = `${Base64.encode(this.loginForm.tenantView)}`;\n      this.$refs.loginForm.validate(valid => {\n        if (valid) {\n          this.loginSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    loginSubmit() {\n      this.loading = true;\n      const that = this;\n      this.$store.commit(\"account/setTenant\", this.loginForm.tenant);\n      loginApi\n        .login(this.loginForm, {tenant: this.loginForm.tenant, \"X-isTenant\": false})\n        .then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            that.saveLoginData(\n              res.data[\"token\"],\n              res.data[\"refreshToken\"],\n              res.data[\"expiration\"]\n            );\n            that.saveUserInfo(res.data);\n            that.getResource();\n          } else {\n            that.getCodeImage();\n          }\n        })\n        .catch(() => {\n          // if(error.response.data){\n          //   this.$message({\n          //     message: error.response.data.msg,\n          //     type: \"error\"\n          //   });\n          // }\n          that.getCodeImage();\n        })\n        .finally(() => (that.loading = false));\n    },\n    saveLoginData(token, refreshToken, expiration) {\n      this.$store.commit(\"account/setToken\", token);\n      this.$store.commit(\"account/setRefreshToken\", refreshToken);\n      this.$store.commit(\"account/setExpireTime\", expiration);\n    },\n    saveUserInfo(user) {\n      this.$store.commit(\"account/setUser\", {\n        id: user.userId,\n        account: user.account,\n        name: user.name,\n        avatar: user.avatar,\n        workDescribe: user.workDescribe\n      });\n    },\n    getResource() {\n      loginApi.getResource().then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          const authorityResource = res.data;\n          const permissionsList = authorityResource.resourceList || [];\n\n          this.$store.commit(\"account/setPermissions\", permissionsList);\n          this.$store.commit(\"account/setAuthorityResource\", authorityResource);\n\n          this.loginSuccess();\n        } else {\n          this.getCodeImage();\n        }\n      });\n    },\n    loginSuccess() {\n      this.$message({\n        message: this.$t(\"tips.loginSuccess\"),\n        type: \"success\"\n      });\n      this.$router.push(\"/\");\n    },\n    loginSuccessCallback(user) {\n      console.log(user);\n    }\n  }\n};\n",null]}