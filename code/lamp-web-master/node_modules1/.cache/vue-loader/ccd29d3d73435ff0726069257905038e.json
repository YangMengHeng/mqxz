{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\menu\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\menu\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport commonTree from '@/components/lamp/CommonTree.vue'\nimport Icons from './icons'\nimport ResourceEdit from './edit'\nimport Pagination from '@/components/Pagination'\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport menuApi from '@/api/Menu.js'\nimport resourceApi from '@/api/Resource.js'\nimport { initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'MenuManage',\n  directives: {elDragDialog},\n  components: {Icons, commonTree, Pagination, ResourceEdit},\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      iconVisible: false,\n      menuTree: [],\n      label: '',\n      menu: this.initMenu(),\n      resourceQueryParams: initQueryParams({\n        model:{\n          menuId: null\n        }\n      }),\n      resourceTableKey: 0,\n      resourceLoading: false,\n      resourceSelection: [],\n      resourceTableData: {\n        total: 0\n      },\n      rules: {\n        label: [\n          {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n          {min: 1, max: 255, message: this.$t('rules.range2to10'), trigger: 'blur'}\n        ],\n        path: [{max: 255, message: this.$t('rules.noMoreThan100'), trigger: 'blur'},\n          {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n          {\n            validator: (rule, value, callback) => {\n              const isUrl = this.isUrl(this.menu.path)\n\n              if (value === '/' || (!isUrl && value.endsWith('/'))) {\n                callback('请填写有效的路由地址')\n              } else {\n                callback()\n              }\n            }, trigger: 'blur'\n          }]\n      }\n    }\n  },\n  computed: {\n    menuComponent() {\n      let comp = ''\n      if (this.menu.path && this.menu.path !== '/') {\n        const isUrl = this.isUrl(this.menu.path)\n        if (isUrl) {\n          comp = `跳转地址：${this.menu.path}`\n        } else {\n          comp = `组件路径：src/views/${this.menu.component}.vue`\n        }\n      } else {\n        comp = `组件路径：src/views/lamp/index.vue`\n      }\n      return comp\n    }\n  },\n  watch: {\n    'menu.path': function () {\n      this.computedComponent()\n    }\n  },\n  mounted() {\n    this.initMenuTree()\n  },\n  methods: {\n    isUrl(path) {\n      const urls = ['http://', '/http://', 'https://', '/https://', 'www.', '/www.']\n      const urlIndex = urls.findIndex(item => {\n        return path.startsWith(item)\n      })\n      return urlIndex >= 0\n    },\n    menuPath() {\n      const isUrl = this.isUrl(this.menu.path)\n      if (!isUrl && !this.menu.path.startsWith('/')) {\n        this.menu.path = '/' + this.menu.path\n      } else if (isUrl) {\n        if (this.menu.path.startsWith('/')) {\n          this.menu.path = this.menu.path.substr(1)\n        }\n      }\n    },\n    computedComponent() {\n      const isUrl = this.isUrl(this.menu.path)\n      if (isUrl) {\n        this.menu.component = 'Layout'\n      } else if(this.menu.id === \"\"){\n        if (this.menu.path) {\n          this.menu.component = `lamp${this.menu.path}/index`\n        } else {\n          this.menu.component = `lamp/index`\n        }\n      }\n    },\n    initMenuTree() {\n      menuApi.allTree().then((response) => {\n        const res = response.data\n        this.menuTree = res.data\n      })\n    },\n    initMenu() {\n      return {\n        id: '',\n        label: '',\n        describe: '',\n        code: '',\n        isGeneral: false,\n        path: '',\n        component: '',\n        state: true,\n        sortValue: '',\n        parentId: 0,\n        icon: '',\n        group: ''\n      }\n    },\n    nodeClick(data) {\n      this.menu = {...data}\n      this.$refs.form.clearValidate()\n\n      this.resourceQueryParams.model.menuId = data.id\n      this.resourceSearch()\n    },\n    handleNumChange(val) {\n      this.menu.sortValue = val\n    },\n    chooseIcons() {\n      this.iconVisible = true\n    },\n    chooseIcon(icon) {\n      this.menu.icon = icon\n      this.iconVisible = false\n    },\n    submit() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          this.menu.createTime = this.menu.updateTime = null\n          if (this.menu.id) {\n            this.update()\n          } else {\n            this.save()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    save() {\n      console.log(this.menu.component)\n      menuApi.save(this.menu)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n          }\n          this.reset()\n        })\n\n    },\n    update() {\n      console.log(this.menu)\n      menuApi.update(this.menu)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n          }\n          this.reset()\n        })\n    },\n    reset() {\n      this.initMenuTree()\n      this.label = ''\n      this.resetForm()\n    },\n    search() {\n      this.$refs.menuTree.$refs.treeRef.filter(this.label)\n    },\n    add() {\n      this.resetForm()\n      const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\n      if (checked.length > 1) {\n        this.$message({\n          message: this.$t('tips.onlyChooseOne'),\n          type: 'warning'\n        })\n      } else if (checked.length > 0) {\n        this.menu.parentId = checked[0]\n      } else {\n        this.menu.parentId = 0\n      }\n      this.resourceQueryParams.model.menuId = null\n      this.resourceReset()\n    },\n    deleteMenu() {\n      const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\n      if (checked.length === 0) {\n        this.$message({\n          message: this.$t('tips.noNodeSelected'),\n          type: 'warning'\n        })\n      } else {\n        this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          menuApi.delete(checked)\n            .then((response) => {\n              const res = response.data\n              if (res.isSuccess) {\n                this.$message({\n                  message: this.$t('tips.deleteSuccess'),\n                  type: 'success'\n                })\n              }\n              this.reset()\n              this.resourceQueryParams.model.menuId = null\n              this.resourceReset()\n            })\n        }).catch(() => {\n          this.$refs.menuTree.$refs.treeRef.setCheckedKeys([])\n        })\n      }\n    },\n    resetForm() {\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.menu = this.initMenu()\n    },\n    resourceAdd() {\n      this.dialog.type = 'add'\n      this.dialog.isVisible = true\n      this.$refs.resourceEdit.setResource({\n        menuId: this.menu.id\n      })\n    },\n    resourceEdit(row) {\n      this.dialog.type = 'edit'\n      this.dialog.isVisible = true\n      row.menuId = this.menu.id\n      this.$refs.resourceEdit.setResource(row)\n    },\n    resourceSingleDelete(row) {\n      this.$refs.resourceTable.clearSelection()\n      this.$refs.resourceTable.toggleRowSelection(row, true)\n      this.resourceBatchDelete()\n    },\n    resourceBatchDelete() {\n      if (!this.resourceSelection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        const ids = this.resourceSelection.map((item) => item.id)\n        resourceApi.delete(ids).then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n          }\n          this.resourceReset()\n        })\n      })\n\n    },\n    resourceReset() {\n      this.resourceQueryParams = initQueryParams({\n        model:{\n          menuId: this.resourceQueryParams.menuId\n        }\n      });\n      this.$refs.resourceTable.clearSort()\n      this.$refs.resourceTable.clearFilter()\n      this.resourceSearch()\n    },\n    resourceSearch() {\n      this.resourceFetch({\n        ...this.resourceQueryParams\n      })\n    },\n    resourceFetch(params = {}) {\n      if (this.resourceQueryParams.timeRange) {\n        this.resourceQueryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.resourceQueryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.resourceQueryParams.current = params.current ? params.current : this.resourceQueryParams.current;\n      this.resourceQueryParams.size = params.size ? params.size : this.resourceQueryParams.size;\n\n      if (this.resourceQueryParams.model.menuId) {\n        this.resourceLoading = true\n        resourceApi.page(this.resourceQueryParams)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.resourceTableData = res.data\n            }\n          })\n          .finally(() => this.resourceLoading = false);\n      } else {\n        this.resourceTableData = {}\n      }\n\n    },\n    resourceSortChange(val) {\n      this.resourceQueryParams.sort = val.prop;\n      this.resourceQueryParams.order = val.order;\n      if (this.resourceQueryParams.sort) {\n        this.resourceSearch();\n      }\n    },\n    resourceFilterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.resourceQueryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.resourceQueryParams.model[key] = filters[key][0]\n        }\n      }\n      this.resourceSearch()\n    },\n    onResourceSelectChange(selection) {\n      this.resourceSelection = selection\n    },\n    resourceEditClose() {\n      this.dialog.isVisible = false\n    },\n    resourceEditSuccess() {\n      this.resourceSearch()\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"index.vue","sourceRoot":"src/views/lamp/system/menu","sourcesContent":["<template>\n  <div class=\"menu\">\n    <el-row :gutter=\"10\">\n      <el-col :sm=\"6\" :xs=\"24\">\n        <div class=\"app-container\">\n          <div class=\"filter-container\">\n            <el-input :placeholder=\"$t('table.menu.label')\" @keyup.enter.native=\"search\" class=\"filter-item search-item\"\n                      clearable v-model=\"label\"/>\n            <el-tooltip class=\"item\" content=\"新增/删除时，请先勾选菜单\" effect=\"dark\" placement=\"right\">\n              <el-dropdown class=\"filter-item\" trigger=\"click\"\n                           v-has-any-permission=\"['authority:menu:add','authority:menu:delete','authority:menu:export']\">\n                <el-button>\n                  {{ $t('table.more') }}\n                  <i class=\"el-icon-arrow-down el-icon--right\"/>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                  <el-dropdown-item @click.native=\"add\" v-has-permission=\"['authority:menu:add']\">\n                    {{ $t('table.add') }}\n                  </el-dropdown-item>\n                  <el-dropdown-item @click.native=\"deleteMenu\" v-has-permission=\"['authority:menu:delete']\">\n                    {{ $t('table.delete') }}\n                  </el-dropdown-item>\n                </el-dropdown-menu>\n              </el-dropdown>\n            </el-tooltip>\n          </div>\n          <commonTree :tree-data=\"menuTree\" @nodeClick=\"nodeClick\" ref=\"menuTree\">\n            <template slot-scope=\"treeNode\">\n              <span class=\"tree-icon\">\n<!--                <i :class=\"treeNode.data.icon ? treeNode.data.icon : 'el-icon-document'\"/>-->\n                <e-icon :icon-name=\"treeNode.data.icon ? treeNode.data.icon : 'el-icon-document'\" class=\"sub-el-icon\"/>\n              </span>\n              <span class=\"tree-icon\">\n                <el-badge :type=\"treeNode.data.state ? 'success' :'danger'\" class=\"status-item\" is-dot/>\n              </span>\n            </template>\n          </commonTree>\n        </div>\n      </el-col>\n      <el-col :sm=\"8\" :xs=\"24\">\n        <el-card class=\"box-card\">\n          <div class=\"clearfix\" slot=\"header\">\n            <span>{{ menu.id === '' ? this.$t('common.add') : this.$t('common.edit') }}</span>\n          </div>\n          <div>\n            <el-form :model=\"menu\" :rules=\"rules\" label-position=\"right\" label-width=\"80px\" ref=\"form\">\n              <el-form-item :label=\"$t('table.menu.parentId')\" prop=\"parentId\">\n                <el-tooltip :content=\"$t('tips.topId')\" class=\"item\" effect=\"dark\" placement=\"right\">\n                  <el-input readonly v-model=\"menu.parentId\"/>\n                </el-tooltip>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.menu.label')\" prop=\"label\">\n                <el-input v-model=\"menu.label\"/>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.menu.path')\" prop=\"path\">\n                <el-input @keyup.native=\"menuPath\" v-model=\"menu.path\"/>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.menu.component')\" prop=\"component\">\n                <el-input v-model=\"menu.component\"/>\n                <span>{{ menuComponent }}</span>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.menu.icon')\" prop=\"icon\">\n<!--                <el-input v-model=\"menu.icon\">-->\n<!--                  <el-button @click=\"chooseIcons\" icon=\"el-icon-brush\" slot=\"append\" style=\"padding-left: 0;\"/>-->\n<!--                </el-input>-->\n                <e-icon-picker v-model=\"menu.icon\"/>\n              </el-form-item>\n              <el-row>\n                <el-col :span=\"12\">\n                  <el-form-item :label=\"$t('table.state')\" prop=\"state\">\n                    <el-switch :active-text=\"$t('common.state.valid')\" :inactive-text=\"$t('common.state.invalid')\"\n                               v-model=\"menu.state\"/>\n                  </el-form-item>\n                </el-col>\n                <el-col :span=\"12\">\n                  <el-form-item :label=\"$t('table.menu.isGeneral')\" prop=\"isGeneral\">\n                    <el-switch :active-text=\"$t('common.yes')\" :inactive-text=\"$t('common.no')\"\n                               v-model=\"menu.isGeneral\"/>\n                  </el-form-item>\n                </el-col>\n              </el-row>\n              <el-form-item :label=\"$t('table.menu.sortValue')\" prop=\"sortValue\">\n                <el-input-number :max=\"100\" :min=\"0\" @change=\"handleNumChange\" v-model=\"menu.sortValue\"/>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.menu.group')\" prop=\"group\">\n                <el-tooltip class=\"item\" content=\"用于区分多组菜单\" effect=\"dark\" placement=\"right\">\n                  <el-input v-model=\"menu.group\"/>\n                </el-tooltip>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.menu.describe')\" prop=\"describe\">\n                <el-input v-model=\"menu.describe\"/>\n              </el-form-item>\n            </el-form>\n          </div>\n        </el-card>\n        <el-card class=\"box-card\" style=\"margin-top: -2rem;\">\n          <el-row>\n            <el-col :span=\"24\" style=\"text-align: right\">\n              <el-button @click=\"submit\" plain type=\"primary\">{{ menu.id === '' ? this.$t('common.add') :\n                this.$t('common.edit') }}\n              </el-button>\n            </el-col>\n          </el-row>\n        </el-card>\n      </el-col>\n\n      <el-col :sm=\"10\" :xs=\"24\">\n        <el-card class=\"box-card\">\n          <div class=\"app-container\">\n            <div class=\"filter-container\">\n              <el-input :placeholder=\"$t('table.resource.code')\" class=\"filter-item search-item\" clearable\n                        v-model=\"resourceQueryParams.model.code\"/>\n              <el-input :placeholder=\"$t('table.resource.name')\" class=\"filter-item search-item\" clearable\n                        v-model=\"resourceQueryParams.model.name\"/>\n              <el-button @click=\"resourceSearch\" class=\"filter-item\" plain type=\"primary\">{{ $t('table.search') }}\n              </el-button>\n              <el-dropdown class=\"filter-item\" trigger=\"click\"\n                           v-has-any-permission=\"['authority:resource:add','authority:resource:delete']\">\n                <el-button>\n                  {{ $t('table.more') }}\n                  <i class=\"el-icon-arrow-down el-icon--right\"/>\n                </el-button>\n                <el-dropdown-menu slot=\"dropdown\">\n                  <el-dropdown-item :disabled=\"!menu.id\" @click.native=\"resourceAdd\"\n                                    v-has-permission=\"['authority:resource:add']\">{{ $t('table.add') }}\n                  </el-dropdown-item>\n                  <el-dropdown-item @click.native=\"resourceBatchDelete\" v-has-permission=\"['authority:resource:delete']\">{{\n                    $t('table.delete') }}\n                  </el-dropdown-item>\n                </el-dropdown-menu>\n              </el-dropdown>\n            </div>\n\n            <el-table\n              :data=\"resourceTableData.records\"\n              :key=\"resourceTableKey\"\n              @selection-change=\"onResourceSelectChange\"\n              @sort-change=\"resourceSortChange\"\n              @filter-change=\"resourceFilterChange\"\n              border\n              fit\n              ref=\"resourceTable\"\n              style=\"width: 100%;\"\n              v-loading=\"resourceLoading\"\n            >\n              <el-table-column align=\"center\" type=\"selection\" width=\"40px\"/>\n              <el-table-column :label=\"$t('table.resource.code')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                               prop=\"code\">\n                <template slot-scope=\"scope\">\n                  <span>{{ scope.row.code }}</span>\n                </template>\n              </el-table-column>\n              <el-table-column :label=\"$t('table.resource.name')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                               prop=\"name\">\n                <template slot-scope=\"scope\">\n                  <span>{{ scope.row.name }}</span>\n                </template>\n              </el-table-column>\n              <el-table-column :label=\"$t('table.operation')\" align=\"center\" class-name=\"small-padding fixed-width\"\n                               width=\"100px\">\n                <template slot-scope=\"{row}\">\n                  <i @click=\"resourceEdit(row)\" class=\"el-icon-edit table-operation\" style=\"color: #2db7f5;\"\n                     v-hasPermission=\"['authority:resource:edit']\"/>\n                  <i @click=\"resourceSingleDelete(row)\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\"\n                     v-hasPermission=\"['authority:resource:delete']\"/>\n                  <el-link class=\"no-perm\" v-has-no-permission=\"['authority:resource:edit','authority:resource:delete']\">{{\n                    $t('tips.noPermission') }}\n                  </el-link>\n                </template>\n              </el-table-column>\n            </el-table>\n            <pagination\n              :limit.sync=\"resourceQueryParams.size\"\n              :page.sync=\"resourceQueryParams.current\"\n              :total=\"Number(resourceTableData.total)\"\n              @pagination=\"resourceFetch\"\n              v-show=\"resourceTableData.total>0\"\n            />\n          </div>\n        </el-card>\n      </el-col>\n    </el-row>\n    <Icons :dialog-visible=\"iconVisible\" @choose=\"chooseIcon\" @close=\"iconVisible = false\"/>\n    <resource-edit :dialog-visible=\"dialog.isVisible\" :type=\"dialog.type\" @close=\"resourceEditClose\"\n                   @success=\"resourceEditSuccess\" ref=\"resourceEdit\"/>\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n      v-el-drag-dialog\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n<script>\n  import commonTree from '@/components/lamp/CommonTree.vue'\n  import Icons from './icons'\n  import ResourceEdit from './edit'\n  import Pagination from '@/components/Pagination'\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import menuApi from '@/api/Menu.js'\n  import resourceApi from '@/api/Resource.js'\n  import { initQueryParams} from '@/utils/commons'\n\n  export default {\n    name: 'MenuManage',\n    directives: {elDragDialog},\n    components: {Icons, commonTree, Pagination, ResourceEdit},\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: 'add'\n        },\n        preview: {\n          isVisible: false,\n          context: ''\n        },\n        iconVisible: false,\n        menuTree: [],\n        label: '',\n        menu: this.initMenu(),\n        resourceQueryParams: initQueryParams({\n          model:{\n            menuId: null\n          }\n        }),\n        resourceTableKey: 0,\n        resourceLoading: false,\n        resourceSelection: [],\n        resourceTableData: {\n          total: 0\n        },\n        rules: {\n          label: [\n            {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n            {min: 1, max: 255, message: this.$t('rules.range2to10'), trigger: 'blur'}\n          ],\n          path: [{max: 255, message: this.$t('rules.noMoreThan100'), trigger: 'blur'},\n            {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n            {\n              validator: (rule, value, callback) => {\n                const isUrl = this.isUrl(this.menu.path)\n\n                if (value === '/' || (!isUrl && value.endsWith('/'))) {\n                  callback('请填写有效的路由地址')\n                } else {\n                  callback()\n                }\n              }, trigger: 'blur'\n            }]\n        }\n      }\n    },\n    computed: {\n      menuComponent() {\n        let comp = ''\n        if (this.menu.path && this.menu.path !== '/') {\n          const isUrl = this.isUrl(this.menu.path)\n          if (isUrl) {\n            comp = `跳转地址：${this.menu.path}`\n          } else {\n            comp = `组件路径：src/views/${this.menu.component}.vue`\n          }\n        } else {\n          comp = `组件路径：src/views/lamp/index.vue`\n        }\n        return comp\n      }\n    },\n    watch: {\n      'menu.path': function () {\n        this.computedComponent()\n      }\n    },\n    mounted() {\n      this.initMenuTree()\n    },\n    methods: {\n      isUrl(path) {\n        const urls = ['http://', '/http://', 'https://', '/https://', 'www.', '/www.']\n        const urlIndex = urls.findIndex(item => {\n          return path.startsWith(item)\n        })\n        return urlIndex >= 0\n      },\n      menuPath() {\n        const isUrl = this.isUrl(this.menu.path)\n        if (!isUrl && !this.menu.path.startsWith('/')) {\n          this.menu.path = '/' + this.menu.path\n        } else if (isUrl) {\n          if (this.menu.path.startsWith('/')) {\n            this.menu.path = this.menu.path.substr(1)\n          }\n        }\n      },\n      computedComponent() {\n        const isUrl = this.isUrl(this.menu.path)\n        if (isUrl) {\n          this.menu.component = 'Layout'\n        } else if(this.menu.id === \"\"){\n          if (this.menu.path) {\n            this.menu.component = `lamp${this.menu.path}/index`\n          } else {\n            this.menu.component = `lamp/index`\n          }\n        }\n      },\n      initMenuTree() {\n        menuApi.allTree().then((response) => {\n          const res = response.data\n          this.menuTree = res.data\n        })\n      },\n      initMenu() {\n        return {\n          id: '',\n          label: '',\n          describe: '',\n          code: '',\n          isGeneral: false,\n          path: '',\n          component: '',\n          state: true,\n          sortValue: '',\n          parentId: 0,\n          icon: '',\n          group: ''\n        }\n      },\n      nodeClick(data) {\n        this.menu = {...data}\n        this.$refs.form.clearValidate()\n\n        this.resourceQueryParams.model.menuId = data.id\n        this.resourceSearch()\n      },\n      handleNumChange(val) {\n        this.menu.sortValue = val\n      },\n      chooseIcons() {\n        this.iconVisible = true\n      },\n      chooseIcon(icon) {\n        this.menu.icon = icon\n        this.iconVisible = false\n      },\n      submit() {\n        this.$refs.form.validate((valid) => {\n          if (valid) {\n            this.menu.createTime = this.menu.updateTime = null\n            if (this.menu.id) {\n              this.update()\n            } else {\n              this.save()\n            }\n          } else {\n            return false\n          }\n        })\n      },\n      save() {\n        console.log(this.menu.component)\n        menuApi.save(this.menu)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.createSuccess'),\n                type: 'success'\n              })\n            }\n            this.reset()\n          })\n\n      },\n      update() {\n        console.log(this.menu)\n        menuApi.update(this.menu)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.updateSuccess'),\n                type: 'success'\n              })\n            }\n            this.reset()\n          })\n      },\n      reset() {\n        this.initMenuTree()\n        this.label = ''\n        this.resetForm()\n      },\n      search() {\n        this.$refs.menuTree.$refs.treeRef.filter(this.label)\n      },\n      add() {\n        this.resetForm()\n        const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\n        if (checked.length > 1) {\n          this.$message({\n            message: this.$t('tips.onlyChooseOne'),\n            type: 'warning'\n          })\n        } else if (checked.length > 0) {\n          this.menu.parentId = checked[0]\n        } else {\n          this.menu.parentId = 0\n        }\n        this.resourceQueryParams.model.menuId = null\n        this.resourceReset()\n      },\n      deleteMenu() {\n        const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\n        if (checked.length === 0) {\n          this.$message({\n            message: this.$t('tips.noNodeSelected'),\n            type: 'warning'\n          })\n        } else {\n          this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n            confirmButtonText: this.$t('common.confirm'),\n            cancelButtonText: this.$t('common.cancel'),\n            type: 'warning'\n          }).then(() => {\n            menuApi.delete(checked)\n              .then((response) => {\n                const res = response.data\n                if (res.isSuccess) {\n                  this.$message({\n                    message: this.$t('tips.deleteSuccess'),\n                    type: 'success'\n                  })\n                }\n                this.reset()\n                this.resourceQueryParams.model.menuId = null\n                this.resourceReset()\n              })\n          }).catch(() => {\n            this.$refs.menuTree.$refs.treeRef.setCheckedKeys([])\n          })\n        }\n      },\n      resetForm() {\n        this.$refs.form.clearValidate()\n        this.$refs.form.resetFields()\n        this.menu = this.initMenu()\n      },\n      resourceAdd() {\n        this.dialog.type = 'add'\n        this.dialog.isVisible = true\n        this.$refs.resourceEdit.setResource({\n          menuId: this.menu.id\n        })\n      },\n      resourceEdit(row) {\n        this.dialog.type = 'edit'\n        this.dialog.isVisible = true\n        row.menuId = this.menu.id\n        this.$refs.resourceEdit.setResource(row)\n      },\n      resourceSingleDelete(row) {\n        this.$refs.resourceTable.clearSelection()\n        this.$refs.resourceTable.toggleRowSelection(row, true)\n        this.resourceBatchDelete()\n      },\n      resourceBatchDelete() {\n        if (!this.resourceSelection.length) {\n          this.$message({\n            message: this.$t('tips.noDataSelected'),\n            type: 'warning'\n          })\n          return\n        }\n        this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          const ids = this.resourceSelection.map((item) => item.id)\n          resourceApi.delete(ids).then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.deleteSuccess'),\n                type: 'success'\n              })\n            }\n            this.resourceReset()\n          })\n        })\n\n      },\n      resourceReset() {\n        this.resourceQueryParams = initQueryParams({\n          model:{\n            menuId: this.resourceQueryParams.menuId\n          }\n        });\n        this.$refs.resourceTable.clearSort()\n        this.$refs.resourceTable.clearFilter()\n        this.resourceSearch()\n      },\n      resourceSearch() {\n        this.resourceFetch({\n          ...this.resourceQueryParams\n        })\n      },\n      resourceFetch(params = {}) {\n        if (this.resourceQueryParams.timeRange) {\n          this.resourceQueryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.resourceQueryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.resourceQueryParams.current = params.current ? params.current : this.resourceQueryParams.current;\n        this.resourceQueryParams.size = params.size ? params.size : this.resourceQueryParams.size;\n\n        if (this.resourceQueryParams.model.menuId) {\n          this.resourceLoading = true\n          resourceApi.page(this.resourceQueryParams)\n            .then((response) => {\n              const res = response.data\n              if (res.isSuccess) {\n                this.resourceTableData = res.data\n              }\n            })\n            .finally(() => this.resourceLoading = false);\n        } else {\n          this.resourceTableData = {}\n        }\n\n      },\n      resourceSortChange(val) {\n        this.resourceQueryParams.sort = val.prop;\n        this.resourceQueryParams.order = val.order;\n        if (this.resourceQueryParams.sort) {\n          this.resourceSearch();\n        }\n      },\n      resourceFilterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.resourceQueryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.resourceQueryParams.model[key] = filters[key][0]\n          }\n        }\n        this.resourceSearch()\n      },\n      onResourceSelectChange(selection) {\n        this.resourceSelection = selection\n      },\n      resourceEditClose() {\n        this.dialog.isVisible = false\n      },\n      resourceEditSuccess() {\n        this.resourceSearch()\n      }\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n  .menu {\n    margin: 10px;\n\n    .app-container {\n      margin: 0 0 10px 0 !important;\n    }\n  }\n\n  .el-card.is-always-shadow {\n    box-shadow: none;\n  }\n\n  .el-card {\n    border-radius: 0;\n    border: none;\n\n    .el-card__header {\n      padding: 10px 20px !important;\n      border-bottom: 1px solid #f1f1f1 !important;\n    }\n  }\n</style>\n"]}]}