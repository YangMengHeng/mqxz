{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\resources\\attachment\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\resources\\attachment\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport AttachmentEdit from \"./edit\";\nimport attachmentApi from \"@/api/Attachment.js\";\nimport { renderSize } from \"@/utils/utils\";\nimport { onlinePreview } from \"@/settings\";\nimport { downloadFile, initQueryParams } from '@/utils/commons'\nimport { Base64 } from 'js-base64';\n\nexport default {\n  name: \"AttachmentManage\",\n  components: { Pagination, AttachmentEdit },\n  filters: {},\n  data() {\n    return {\n      dialogVisible: false,\n      dialogImageUrl: \"\",\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model:{}\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        records: [],\n        total: 0\n      },\n    };\n  },\n  computed: {},\n  mounted() {\n    this.fetch();\n  },\n  methods: {\n    errorImage() {\n      let img = event.srcElement;\n      img.src = require(\"@/assets/404_images/404_image.jpeg\");\n      img.onerror = null; //防止闪图\n    },\n    formatSize(row) {\n      return renderSize(row.size);\n    },\n    filterStatus(value, row) {\n      return row.status === value;\n    },\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model:{}\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleDownload(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDownload();\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDownload() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(\"确认下载吗？\", this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          const ids = [];\n          this.selection.forEach(u => {\n            ids.push(u.id);\n          });\n          this.download(ids);\n        })\n        .catch(() => {\n          this.clearSelections();\n        });\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          const ids = [];\n          this.selection.forEach(u => {\n            ids.push(u.id);\n          });\n          this.delete(ids);\n        })\n        .catch(() => {\n          this.clearSelections();\n        });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    download(ids) {\n      attachmentApi.download(ids).then(response => {\n        downloadFile(response);\n        this.clearSelections();\n      });\n    },\n    delete(ids) {\n      attachmentApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n        }\n        this.search();\n      });\n    },\n    onView(row) {\n      if (row.url) {\n        window.open(onlinePreview + encodeURIComponent(Base64.encode(row.url)));\n      }\n    },\n    upload() {\n      this.dialog.type = \"upload\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setAttachment(false);\n    },\n    edit(row) {\n      this.$refs.edit.setAttachment(row);\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      attachmentApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n};\n",null]}