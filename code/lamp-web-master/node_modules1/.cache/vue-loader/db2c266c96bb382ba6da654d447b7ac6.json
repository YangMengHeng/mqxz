{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\tenant\\datasourceConfig\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\tenant\\datasourceConfig\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport datasourceConfigApi from '@/api/DatasourceConfig.js'\nimport globalUserApi from \"@/api/GlobalUser\";\n\nexport default {\n  name: 'DatasourceConfigEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      type: 'add',\n      datasourceConfig: this.initDatasourceConfig(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      roles: [],\n      rules: {\n        name: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        username: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        url: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if(value.indexOf('lamp_base_') > 0 || value.indexOf('lamp_extend_') > 0) {\n                callback()\n              } else {\n                callback('数据库必须包含 lamp_base 或者 lamp_extend ')\n              }\n            }, trigger: 'blur'\n          }\n        ],\n        driverClassName: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted () {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initDatasourceConfig () {\n      return {\n        id: '',\n        name: '1111-基础服务',\n        username: '',\n        password: '',\n        driverClassName: 'com.mysql.cj.jdbc.Driver',\n        url: 'jdbc:mysql://127.0.0.1:3306/lamp_base_1111?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true'\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    setDatasourceConfig (val) {\n      this.datasourceConfig = { ...val }\n      if (this.type === 'copy') {\n        this.datasourceConfig.id = null\n      }\n    },\n    close () {\n      this.$emit('close')\n    },\n    submitForm () {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          if (this.type === 'edit') {\n            this.update()\n          } else {\n            this.save()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    save () {\n      datasourceConfigApi.save(this.datasourceConfig)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        }).finally(() => {\n          return true\n        })\n    },\n    update () {\n      datasourceConfigApi.update(this.datasourceConfig)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        }).finally(() => {\n          return true\n        })\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.datasourceConfig = this.initDatasourceConfig()\n    }\n  }\n}\n",{"version":3,"sources":["edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsfile":"edit.vue","sourceRoot":"src/views/lamp/tenant/datasourceConfig","sourcesContent":["<template>\n  <el-dialog :close-on-click-modal=\"false\" :close-on-press-escape=\"false\" :title=\"title\" :visible.sync=\"isVisible\" :width=\"width\" top=\"50px\">\n    <el-form ref=\"form\" :model=\"datasourceConfig\" :rules=\"rules\" label-position=\"right\" label-width=\"130px\">\n      <el-form-item :label=\"$t('table.datasourceConfig.name')\" prop=\"name\">\n        <el-tooltip class=\"item\" content=\"建议命名规则为：租户编码-描述\" effect=\"dark\" placement=\"right-start\">\n          <el-input v-model=\"datasourceConfig.name\" placeholder=\"名称\" />\n        </el-tooltip>\n      </el-form-item>\n      <el-form-item :label=\"$t('table.datasourceConfig.username')\" placeholder=\"数据库账号\" prop=\"username\">\n        <el-tooltip class=\"item\" content=\"数据库账号，不建议使用root和超级管理员账号\" effect=\"dark\" placement=\"right-start\">\n          <el-input v-model=\"datasourceConfig.username\" />\n        </el-tooltip>\n      </el-form-item>\n      <el-form-item :label=\"$t('table.datasourceConfig.password')\" prop=\"数据库密码\">\n        <el-input v-model=\"datasourceConfig.password\" />\n      </el-form-item>\n      <el-form-item :label=\"$t('table.datasourceConfig.url')\" prop=\"url\" placeholder=\"连接信息\">\n        <el-tooltip class=\"item\" content=\"确保租户服务和数据库ip网络互通;数据库命名规范参考：lamp_base_{TENANT}, lamp_base要和lamp.database.tenantDatabasePrefix保持一致\" effect=\"dark\" placement=\"right-start\">\n          <el-input v-model=\"datasourceConfig.url\" />\n        </el-tooltip>\n      </el-form-item>\n      <el-form-item :label=\"$t('table.datasourceConfig.driverClassName')\" prop=\"驱动名\">\n        <el-tooltip class=\"item\" content=\"目前只支持mysql\" effect=\"dark\" placement=\"right-start\">\n          <el-input v-model=\"datasourceConfig.driverClassName\" />\n        </el-tooltip>\n      </el-form-item>\n      <aside style=\"word-wrap: break-word\">\n        名称：建议命名规则为：租户编码-描述 <br>\n        账号: 不建议使用root和超管账号，使用最小权限的账号<br>\n        密码：明文密码<br>\n        驱动：目前只支持mysql，配置成 com.mysql.cj.jdbc.Driver 即可<br>\n        链接：确保租户服务和链接中的数据库ip网络互通;<br>\n        链接中的数据库命名规范建议：lamp_base_{TENANT}, lamp_base要和lamp.database.tenantDatabasePrefix保持一致，否则删除租户时，无法删除库\n      </aside>\n      <aside style=\"word-wrap: break-word\">\n        eg: 1111 租户需要配置2个链接<br>\n        名称：1111-基础服务<br>\n        链接：jdbc:mysql://127.0.0.1:3306/lamp_base_1111?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true<br>\n\n        名称：1111-扩展服务<br>\n        链接：jdbc:mysql://127.0.0.1:3306/lamp_extend_1111?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true<br>\n\n        其中:<br>\n        1111-基础服务：用于 认证服务数据源、权限服务数据源、文件服务数据源数据源， 所以这些服务的配置文件中需要配置 lamp.database.tenantDatabasePrefix = lamp_base<br>\n        1111-扩展服务：用于 消息服务、网关服务数据源， 所以这些服务的配置文件中需要配置 lamp.database.tenantDatabasePrefix = lamp_extend\n      </aside>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button plain type=\"warning\" @click=\"isVisible = false\">{{ $t('common.cancel') }}</el-button>\n      <el-button plain type=\"primary\" @click=\"submitForm\">{{ $t('common.confirm') }}</el-button>\n    </div>\n  </el-dialog>\n</template>\n<script>\nimport datasourceConfigApi from '@/api/DatasourceConfig.js'\nimport globalUserApi from \"@/api/GlobalUser\";\n\nexport default {\n  name: 'DatasourceConfigEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      type: 'add',\n      datasourceConfig: this.initDatasourceConfig(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      roles: [],\n      rules: {\n        name: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        username: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        url: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if(value.indexOf('lamp_base_') > 0 || value.indexOf('lamp_extend_') > 0) {\n                callback()\n              } else {\n                callback('数据库必须包含 lamp_base 或者 lamp_extend ')\n              }\n            }, trigger: 'blur'\n          }\n        ],\n        driverClassName: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted () {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initDatasourceConfig () {\n      return {\n        id: '',\n        name: '1111-基础服务',\n        username: '',\n        password: '',\n        driverClassName: 'com.mysql.cj.jdbc.Driver',\n        url: 'jdbc:mysql://127.0.0.1:3306/lamp_base_1111?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true'\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    setDatasourceConfig (val) {\n      this.datasourceConfig = { ...val }\n      if (this.type === 'copy') {\n        this.datasourceConfig.id = null\n      }\n    },\n    close () {\n      this.$emit('close')\n    },\n    submitForm () {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          if (this.type === 'edit') {\n            this.update()\n          } else {\n            this.save()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    save () {\n      datasourceConfigApi.save(this.datasourceConfig)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        }).finally(() => {\n          return true\n        })\n    },\n    update () {\n      datasourceConfigApi.update(this.datasourceConfig)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        }).finally(() => {\n          return true\n        })\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.datasourceConfig = this.initDatasourceConfig()\n    }\n  }\n}\n</script>\n<style lang=\"scss\" >\n\n</style>\n"]}]}