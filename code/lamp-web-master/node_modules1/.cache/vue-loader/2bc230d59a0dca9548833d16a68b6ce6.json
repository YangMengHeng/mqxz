{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\gateway\\ratelimiter\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\gateway\\ratelimiter\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport RateLimiterEdit from \"./edit\";\nimport rateLimiterApi from \"@/api/RateLimiter.js\";\nimport RateLimiterImport from \"@/components/lamp/Import\"\nimport {downloadFile, loadEnums, initDicts, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"RateLimiterManage\",\n  directives: { elDragDialog },\n  components: { Pagination, RateLimiterEdit, RateLimiterImport},\n  filters: {\n\n  },\n  data() {\n    return {\n      // 编辑\n      dialog: {\n          isVisible: false,\n          type: \"add\"\n      },\n      // 预览\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      // 导入\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/gateway/rateLimiter/import`\n      },\n      tableKey: 0,\n      queryParams: initQueryParams(),\n      selection: [],\n      loading: false,\n      tableData: {\n          total: 0\n      },\n      // 枚举\n      enums: {\n      },\n      // 字典\n      dicts: {\n      }\n    };\n  },\n  computed: {\n  },\n  watch: {\n  },\n  mounted() {\n    this.fetch();\n\n    // 初始化字典和枚举\n    const enumList = [];\n    const dictList = [];\n    loadEnums(enumList, this.enums, 'gateway');\n    initDicts(dictList, this.dicts);\n  },\n  methods: {\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search() {\n      this.fetch({\n          ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams();\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据';\n      rateLimiterApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据';\n      rateLimiterApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n            message: this.$t(\"tips.noDataSelected\"),\n            type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n      })\n      .then(() => {\n        const ids = this.selection.map(u => u.id);\n        this.delete(ids);\n      })\n      .catch(() => {\n        this.clearSelections();\n      });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete(ids) {\n      rateLimiterApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: \"success\"\n          });\n          this.search();\n        }\n      });\n    },\n    add() {\n      this.dialog.type = \"add\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setRateLimiter({ enums: this.enums, dicts: this.dicts});\n    },\n    copy(row) {\n      row.id = null;\n      this.$refs.edit.setRateLimiter({row, enums: this.enums, dicts: this.dicts});\n      this.dialog.type = \"copy\";\n      this.dialog.isVisible = true;\n    },\n    edit(row) {\n      this.$refs.edit.setRateLimiter({row, enums: this.enums, dicts: this.dicts});\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      rateLimiterApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange (filters) {\n      for (const key in filters) {\n        if(key.includes('.')) {\n          const val = { };\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0IA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/lamp/gateway/ratelimiter","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n\n      <el-date-picker :range-separator=\"null\" class=\"filter-item search-item date-range-item\"\n                      end-placeholder=\"结束日期\" format=\"yyyy-MM-dd HH:mm:ss\" start-placeholder=\"开始日期\"\n                      type=\"daterange\" v-model=\"queryParams.timeRange\" value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">\n        {{ $t(\"table.search\") }}\n      </el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">\n        {{ $t(\"table.reset\") }}\n      </el-button>\n      <el-button @click=\"add\" class=\"filter-item\" plain type=\"danger\">\n<!--      <el-button @click=\"add\" class=\"filter-item\" plain type=\"danger\" v-has-permission=\"['rateLimiter:add']\">-->\n        {{ $t(\"table.add\") }}\n      </el-button>\n      <el-dropdown class=\"filter-item\" trigger=\"click\">\n<!--      <el-dropdown class=\"filter-item\" trigger=\"click\" v-has-any-permission=\"['rateLimiter:delete', 'rateLimiter:export','rateLimiter:import']\">-->\n        <el-button>\n          {{ $t(\"table.more\") }}<i class=\"el-icon-arrow-down el-icon--right\" />\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"batchDelete\">\n<!--          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['rateLimiter:delete']\">-->\n            {{ $t(\"table.delete\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\">\n<!--          <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['rateLimiter:export']\">-->\n            {{ $t(\"table.export\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\">\n<!--          <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['rateLimiter:export']\">-->\n            {{ $t(\"table.exportPreview\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"importExcel\">\n<!--          <el-dropdown-item @click.native=\"importExcel\" v-has-permission=\"['rateLimiter:import']\">-->\n            {{ $t(\"table.import\") }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table :data=\"tableData.records\" :key=\"tableKey\" @cell-click=\"cellClick\"\n              @filter-change=\"filterChange\" @selection-change=\"onSelectChange\" @sort-change=\"sortChange\"\n              border fit row-key=\"id\" ref=\"table\" style=\"width: 100%;\" v-loading=\"loading\">\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.rateLimiter.count')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"count\"\n                        width=\"\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.count }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.rateLimiter.requestUri')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"requestUri\"\n                        width=\"\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.requestUri }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.rateLimiter.requestMethod')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"requestMethod\"\n                        width=\"\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.requestMethod }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.rateLimiter.limitStart')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"limitStart\"\n                        width=\"\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.limitStart }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.rateLimiter.limitEnd')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"limitEnd\"\n                        width=\"\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.limitEnd }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.rateLimiter.state')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"state\"\n                       :filter-multiple=\"false\" column-key=\"state\"\n                       :filters=\"[{ text: $t('common.state.valid'), value: true },{ text: $t('common.state.invalid'), value: false }]\"\n                        width=\"\">\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.state ? 'success' : 'danger'\" slot>\n            {{ scope.row.state ? $t(\"common.state.valid\") : $t(\"common.state.invalid\") }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.rateLimiter.intervalSec')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"intervalSec\"\n                        width=\"\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.intervalSec }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.createTime')\"\n        align=\"center\"\n        prop=\"createTime\"\n        sortable=\"custom\"\n        width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.operation')\" align=\"center\" column-key=\"operation\" class-name=\"small-padding fixed-width\" width=\"100px\">\n        <template slot-scope=\"{ row }\">\n          <i @click=\"copy(row)\" class=\"el-icon-copy-document table-operation\" :title=\"$t('common.delete')\"\n             style=\"color: #2db7f5;\"/>\n<!--             style=\"color: #2db7f5;\" v-hasPermission=\"['rateLimiter:add']\"/>-->\n          <i @click=\"edit(row)\" class=\"el-icon-edit table-operation\" :title=\"$t('common.delete')\"\n             style=\"color: #2db7f5;\"/>\n<!--             style=\"color: #2db7f5;\" v-hasPermission=\"['rateLimiter:edit']\"/>-->\n          <i @click=\"singleDelete(row)\" class=\"el-icon-delete table-operation\" :title=\"$t('common.delete')\"\n             style=\"color: #f50;\"/>\n<!--             style=\"color: #f50;\" v-hasPermission=\"['rateLimiter:delete']\"/>-->\n<!--          <el-link class=\"no-perm\" v-has-no-permission=\"['rateLimiter:edit', 'rateLimiter:copy', 'rateLimiter:delete']\">-->\n<!--            {{ $t(\"tips.noPermission\") }}-->\n<!--          </el-link>-->\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\"\n      :total=\"Number(tableData.total)\" @pagination=\"fetch\" v-show=\"tableData.total > 0\"/>\n    <rateLimiter-edit :dialog-visible=\"dialog.isVisible\" :type=\"dialog.type\"\n            @close=\"editClose\" @success=\"editSuccess\" ref=\"edit\"/>\n    <rateLimiter-import ref=\"import\" :dialog-visible=\"fileImport.isVisible\" :type=\"fileImport.type\"\n            :action=\"fileImport.action\" accept=\".xls,.xlsx\" @close=\"importClose\" @success=\"importSuccess\" />\n    <el-dialog :close-on-click-modal=\"false\" :close-on-press-escape=\"true\"\n               title=\"预览\" width=\"80%\" top=\"50px\" :visible.sync=\"preview.isVisible\" v-el-drag-dialog>\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Pagination from \"@/components/Pagination\";\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport RateLimiterEdit from \"./edit\";\nimport rateLimiterApi from \"@/api/RateLimiter.js\";\nimport RateLimiterImport from \"@/components/lamp/Import\"\nimport {downloadFile, loadEnums, initDicts, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"RateLimiterManage\",\n  directives: { elDragDialog },\n  components: { Pagination, RateLimiterEdit, RateLimiterImport},\n  filters: {\n\n  },\n  data() {\n    return {\n      // 编辑\n      dialog: {\n          isVisible: false,\n          type: \"add\"\n      },\n      // 预览\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      // 导入\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/gateway/rateLimiter/import`\n      },\n      tableKey: 0,\n      queryParams: initQueryParams(),\n      selection: [],\n      loading: false,\n      tableData: {\n          total: 0\n      },\n      // 枚举\n      enums: {\n      },\n      // 字典\n      dicts: {\n      }\n    };\n  },\n  computed: {\n  },\n  watch: {\n  },\n  mounted() {\n    this.fetch();\n\n    // 初始化字典和枚举\n    const enumList = [];\n    const dictList = [];\n    loadEnums(enumList, this.enums, 'gateway');\n    initDicts(dictList, this.dicts);\n  },\n  methods: {\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search() {\n      this.fetch({\n          ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams();\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据';\n      rateLimiterApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据';\n      rateLimiterApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n            message: this.$t(\"tips.noDataSelected\"),\n            type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n      })\n      .then(() => {\n        const ids = this.selection.map(u => u.id);\n        this.delete(ids);\n      })\n      .catch(() => {\n        this.clearSelections();\n      });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete(ids) {\n      rateLimiterApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: \"success\"\n          });\n          this.search();\n        }\n      });\n    },\n    add() {\n      this.dialog.type = \"add\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setRateLimiter({ enums: this.enums, dicts: this.dicts});\n    },\n    copy(row) {\n      row.id = null;\n      this.$refs.edit.setRateLimiter({row, enums: this.enums, dicts: this.dicts});\n      this.dialog.type = \"copy\";\n      this.dialog.isVisible = true;\n    },\n    edit(row) {\n      this.$refs.edit.setRateLimiter({row, enums: this.enums, dicts: this.dicts});\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      rateLimiterApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange (filters) {\n      for (const key in filters) {\n        if(key.includes('.')) {\n          const val = { };\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n  }\n};\n</script>\n<style lang=\"scss\" scoped></style>\n"]}]}