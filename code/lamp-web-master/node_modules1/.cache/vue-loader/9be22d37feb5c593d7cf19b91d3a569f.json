{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\profile\\components\\Account.vue?vue&type=style&index=0&id=1d744cf6&prod&lang=scss&scoped=true&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\profile\\components\\Account.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\css-loader\\index.js","mtime":1686711135550},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1686711138278},{"path":"E:\\project\\lamp-web-master\\node_modules\\postcss-loader\\src\\index.js","mtime":1686711136346},{"path":"E:\\project\\lamp-web-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.form {\n  padding: 10px 0 0 0;\n}\n",{"version":3,"sources":["Account.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgGA;AACA;AACA","file":"Account.vue","sourceRoot":"src/views/profile/components","sourcesContent":["<template>\n  <el-form :model=\"user\" :rules=\"rules\" class=\"form\" label-position=\"right\" label-width=\"80px\" ref=\"form\">\n    <el-form-item :label=\"$t('table.user.name')\" prop=\"email\">\n      <el-input v-model=\"user.name\" />\n    </el-form-item>\n    <el-form-item :label=\"$t('table.user.email')\" prop=\"email\">\n      <el-input v-model=\"user.email\" />\n    </el-form-item>\n    <el-form-item :label=\"$t('table.user.mobile')\" prop=\"mobile\">\n      <el-input v-model=\"user.mobile\" />\n    </el-form-item>\n    <el-form-item :label=\"$t('table.user.sex')\" prop=\"sex\">\n      <el-select placeholder v-model=\"user.sex['code']\" value>\n        <el-option :key=\"index\" :label=\"item\" :value=\"key\" v-for=\"(item, key, index) in enums.Sex\" />\n      </el-select>\n    </el-form-item>\n    <el-form-item :label=\"$t('table.user.workDescribe')\" prop=\"workDescribe\">\n      <el-input rows=\"3\" type=\"textarea\" v-model=\"user.workDescribe\" />\n    </el-form-item>\n    <el-form-item>\n      <el-button @click=\"submit\" plain type=\"primary\">{{ $t('common.edit') }}</el-button>\n    </el-form-item>\n  </el-form>\n</template>\n\n<script>\nimport { validMobile } from '@/utils/my-validate'\nimport userApi from '@/api/User.js'\nimport {initEnums} from '@/utils/commons.js'\n\nexport default {\n  components: {},\n  props: {\n    user: {\n      type: Object,\n      default: () => {\n        return {\n          name: '',\n          email: '',\n          sex: {\n            code: 'M'\n          }\n        }\n      }\n    }\n  },\n  data () {\n    return {\n      enums:{Sex: {}},\n      rules: {\n        email: { type: 'email', message: this.$t('rules.email'), trigger: 'blur' },\n        mobile: {          validator: (rule, value, callback) => {\n            if (value !== '' && !validMobile(value)) {\n              callback(this.$t('rules.mobile'))\n            } else {\n              callback()\n            }\n          }, trigger: 'blur'\n        },\n        sex: { required: true, message: this.$t('rules.require'), trigger: 'change' },\n        workDescribe: { max: 255, message: '内容超过255字符', trigger: 'blur' }\n      }\n    }\n  },\n  computed: {\n  },\n  mounted () {\n    initEnums( [\"Sex\"], this.enums);\n  },\n  methods: {\n    submit () {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          const temp = { ...this.user }\n          temp.account = temp.status = temp.avatar = temp.avatar = null\n          userApi.updateBaseInfo({ ...temp })\n            .then((response) => {\n              const res = response.data\n              if (res.isSuccess) {\n                this.$message({\n                  message: this.$t('tips.updateSuccess'),\n                  type: 'success'\n                })\n              }\n              this.$store.commit('account/setUser', this.user)\n            })\n        } else {\n          return false\n        }\n      })\n    }\n\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n.form {\n  padding: 10px 0 0 0;\n}\n</style>\n"]}]}