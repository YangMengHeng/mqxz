{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\org\\station\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\org\\station\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Treeselect from \"@riophae/vue-treeselect\";\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\";\nimport stationApi from \"@/api/Station.js\";\n\nexport default {\n  name: \"StationEdit\",\n  components: { Treeselect },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: \"add\"\n    }\n  },\n  data() {\n    return {\n      remoteStationLoading: false,\n      station: this.initStation(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      orgList: [],\n      stationList: [],\n      rules: {\n        name: [\n          {\n            required: true,\n            message: this.$t(\"rules.require\"),\n            trigger: \"blur\"\n          },\n          {\n            min: 1,\n            max: 255,\n            message: this.$t(\"rules.range4to10\"),\n            trigger: \"blur\"\n          },\n          {\n            validator: (rule, value, callback) => {\n              if (!this.station.id) {\n                // this.$get(`system/user/check/${value}`).then((r) => {\n                //   if (!r.data) {\n                //     callback(this.$t('rules.usernameExist'))\n                //   } else {\n                //     callback()\n                //   }\n                // })\n              } else {\n                // callback()\n              }\n              callback();\n            },\n            trigger: \"blur\"\n          }\n        ],\n        state: {\n          required: true,\n          message: this.$t(\"rules.require\"),\n          trigger: \"blur\"\n        }\n      }\n    };\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible;\n      },\n      set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title() {\n      return this.type === \"add\"\n        ? this.$t(\"common.add\")\n        : this.$t(\"common.edit\");\n    }\n  },\n  watch: {},\n  mounted() {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth();\n      })();\n    };\n  },\n  methods: {\n    initStation() {\n      return {\n        id: \"\",\n        name: \"\",\n        org: {\n          key: null,\n          data: null\n        },\n        state: true,\n        describe: \"\"\n      };\n    },\n    initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return \"90%\";\n      } else if (this.screenWidth < 1400) {\n        return \"45%\";\n      } else {\n        return \"800px\";\n      }\n    },\n    loadListOptions({ callback }) {\n      callback();\n    },\n    setStation(val, orgs) {\n      const vm = this;\n      vm.orgList = orgs;\n      if (val) {\n        vm.station = { ...val };\n      }\n    },\n    close() {\n      this.$emit(\"close\");\n    },\n    reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.station = this.initStation();\n    },\n    submitForm() {\n      const vm = this;\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit() {\n      const vm = this;\n      if (vm.type === \"add\") {\n        vm.save();\n      } else {\n        vm.update();\n      }\n    },\n    save() {\n      const vm = this;\n      stationApi.save(this.station).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: vm.$t(\"tips.createSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      });\n    },\n    update() {\n      stationApi.update(this.station).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.isVisible = false;\n          this.$message({\n            message: this.$t(\"tips.updateSuccess\"),\n            type: \"success\"\n          });\n          this.$emit(\"success\");\n        }\n      });\n    }\n  }\n};\n",null]}