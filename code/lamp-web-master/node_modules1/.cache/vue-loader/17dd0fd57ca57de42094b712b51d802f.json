{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\menu\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\menu\\index.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport commonTree from '@/components/lamp/CommonTree.vue'\nimport Icons from './icons'\nimport ResourceEdit from './edit'\nimport Pagination from '@/components/Pagination'\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport menuApi from '@/api/Menu.js'\nimport resourceApi from '@/api/Resource.js'\nimport { initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'MenuManage',\n  directives: {elDragDialog},\n  components: {Icons, commonTree, Pagination, ResourceEdit},\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      iconVisible: false,\n      menuTree: [],\n      label: '',\n      menu: this.initMenu(),\n      resourceQueryParams: initQueryParams({\n        model:{\n          menuId: null\n        }\n      }),\n      resourceTableKey: 0,\n      resourceLoading: false,\n      resourceSelection: [],\n      resourceTableData: {\n        total: 0\n      },\n      rules: {\n        label: [\n          {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n          {min: 1, max: 255, message: this.$t('rules.range2to10'), trigger: 'blur'}\n        ],\n        path: [{max: 255, message: this.$t('rules.noMoreThan100'), trigger: 'blur'},\n          {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n          {\n            validator: (rule, value, callback) => {\n              const isUrl = this.isUrl(this.menu.path)\n\n              if (value === '/' || (!isUrl && value.endsWith('/'))) {\n                callback('请填写有效的路由地址')\n              } else {\n                callback()\n              }\n            }, trigger: 'blur'\n          }]\n      }\n    }\n  },\n  computed: {\n    menuComponent() {\n      let comp = ''\n      if (this.menu.path && this.menu.path !== '/') {\n        const isUrl = this.isUrl(this.menu.path)\n        if (isUrl) {\n          comp = `跳转地址：${this.menu.path}`\n        } else {\n          comp = `组件路径：src/views/${this.menu.component}.vue`\n        }\n      } else {\n        comp = `组件路径：src/views/lamp/index.vue`\n      }\n      return comp\n    }\n  },\n  watch: {\n    'menu.path': function () {\n      this.computedComponent()\n    }\n  },\n  mounted() {\n    this.initMenuTree()\n  },\n  methods: {\n    isUrl(path) {\n      const urls = ['http://', '/http://', 'https://', '/https://', 'www.', '/www.']\n      const urlIndex = urls.findIndex(item => {\n        return path.startsWith(item)\n      })\n      return urlIndex >= 0\n    },\n    menuPath() {\n      const isUrl = this.isUrl(this.menu.path)\n      if (!isUrl && !this.menu.path.startsWith('/')) {\n        this.menu.path = '/' + this.menu.path\n      } else if (isUrl) {\n        if (this.menu.path.startsWith('/')) {\n          this.menu.path = this.menu.path.substr(1)\n        }\n      }\n    },\n    computedComponent() {\n      const isUrl = this.isUrl(this.menu.path)\n      if (isUrl) {\n        this.menu.component = 'Layout'\n      } else if(this.menu.id === \"\"){\n        if (this.menu.path) {\n          this.menu.component = `lamp${this.menu.path}/index`\n        } else {\n          this.menu.component = `lamp/index`\n        }\n      }\n    },\n    initMenuTree() {\n      menuApi.allTree().then((response) => {\n        const res = response.data\n        this.menuTree = res.data\n      })\n    },\n    initMenu() {\n      return {\n        id: '',\n        label: '',\n        describe: '',\n        code: '',\n        isGeneral: false,\n        path: '',\n        component: '',\n        state: true,\n        sortValue: '',\n        parentId: 0,\n        icon: '',\n        group: ''\n      }\n    },\n    nodeClick(data) {\n      this.menu = {...data}\n      this.$refs.form.clearValidate()\n\n      this.resourceQueryParams.model.menuId = data.id\n      this.resourceSearch()\n    },\n    handleNumChange(val) {\n      this.menu.sortValue = val\n    },\n    chooseIcons() {\n      this.iconVisible = true\n    },\n    chooseIcon(icon) {\n      this.menu.icon = icon\n      this.iconVisible = false\n    },\n    submit() {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          this.menu.createTime = this.menu.updateTime = null\n          if (this.menu.id) {\n            this.update()\n          } else {\n            this.save()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    save() {\n      console.log(this.menu.component)\n      menuApi.save(this.menu)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n          }\n          this.reset()\n        })\n\n    },\n    update() {\n      console.log(this.menu)\n      menuApi.update(this.menu)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n          }\n          this.reset()\n        })\n    },\n    reset() {\n      this.initMenuTree()\n      this.label = ''\n      this.resetForm()\n    },\n    search() {\n      this.$refs.menuTree.$refs.treeRef.filter(this.label)\n    },\n    add() {\n      this.resetForm()\n      const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\n      if (checked.length > 1) {\n        this.$message({\n          message: this.$t('tips.onlyChooseOne'),\n          type: 'warning'\n        })\n      } else if (checked.length > 0) {\n        this.menu.parentId = checked[0]\n      } else {\n        this.menu.parentId = 0\n      }\n      this.resourceQueryParams.model.menuId = null\n      this.resourceReset()\n    },\n    deleteMenu() {\n      const checked = this.$refs.menuTree.$refs.treeRef.getCheckedKeys()\n      if (checked.length === 0) {\n        this.$message({\n          message: this.$t('tips.noNodeSelected'),\n          type: 'warning'\n        })\n      } else {\n        this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          menuApi.delete(checked)\n            .then((response) => {\n              const res = response.data\n              if (res.isSuccess) {\n                this.$message({\n                  message: this.$t('tips.deleteSuccess'),\n                  type: 'success'\n                })\n              }\n              this.reset()\n              this.resourceQueryParams.model.menuId = null\n              this.resourceReset()\n            })\n        }).catch(() => {\n          this.$refs.menuTree.$refs.treeRef.setCheckedKeys([])\n        })\n      }\n    },\n    resetForm() {\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.menu = this.initMenu()\n    },\n    resourceAdd() {\n      this.dialog.type = 'add'\n      this.dialog.isVisible = true\n      this.$refs.resourceEdit.setResource({\n        menuId: this.menu.id\n      })\n    },\n    resourceEdit(row) {\n      this.dialog.type = 'edit'\n      this.dialog.isVisible = true\n      row.menuId = this.menu.id\n      this.$refs.resourceEdit.setResource(row)\n    },\n    resourceSingleDelete(row) {\n      this.$refs.resourceTable.clearSelection()\n      this.$refs.resourceTable.toggleRowSelection(row, true)\n      this.resourceBatchDelete()\n    },\n    resourceBatchDelete() {\n      if (!this.resourceSelection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        const ids = this.resourceSelection.map((item) => item.id)\n        resourceApi.delete(ids).then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n          }\n          this.resourceReset()\n        })\n      })\n\n    },\n    resourceReset() {\n      this.resourceQueryParams = initQueryParams({\n        model:{\n          menuId: this.resourceQueryParams.menuId\n        }\n      });\n      this.$refs.resourceTable.clearSort()\n      this.$refs.resourceTable.clearFilter()\n      this.resourceSearch()\n    },\n    resourceSearch() {\n      this.resourceFetch({\n        ...this.resourceQueryParams\n      })\n    },\n    resourceFetch(params = {}) {\n      if (this.resourceQueryParams.timeRange) {\n        this.resourceQueryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.resourceQueryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.resourceQueryParams.current = params.current ? params.current : this.resourceQueryParams.current;\n      this.resourceQueryParams.size = params.size ? params.size : this.resourceQueryParams.size;\n\n      if (this.resourceQueryParams.model.menuId) {\n        this.resourceLoading = true\n        resourceApi.page(this.resourceQueryParams)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.resourceTableData = res.data\n            }\n          })\n          .finally(() => this.resourceLoading = false);\n      } else {\n        this.resourceTableData = {}\n      }\n\n    },\n    resourceSortChange(val) {\n      this.resourceQueryParams.sort = val.prop;\n      this.resourceQueryParams.order = val.order;\n      if (this.resourceQueryParams.sort) {\n        this.resourceSearch();\n      }\n    },\n    resourceFilterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.resourceQueryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.resourceQueryParams.model[key] = filters[key][0]\n        }\n      }\n      this.resourceSearch()\n    },\n    onResourceSelectChange(selection) {\n      this.resourceSelection = selection\n    },\n    resourceEditClose() {\n      this.dialog.isVisible = false\n    },\n    resourceEditSuccess() {\n      this.resourceSearch()\n    }\n  }\n}\n",null]}