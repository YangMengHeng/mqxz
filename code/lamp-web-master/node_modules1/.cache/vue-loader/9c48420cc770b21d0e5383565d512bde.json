{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\museum\\index1.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\museum\\index1.vue","mtime":1692713017060},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\r\nimport Chart from 'chart.js';\r\n\r\nexport default {\r\n  mounted() {\r\n    this.chart = new Chart(this.$refs.chart, {\r\n      type: 'line',\r\n      data: {\r\n        labels: [], // 折线图的标签\r\n        datasets: [{\r\n          label: '数据集',\r\n          data: [], // 实时数据\r\n          fill: false,\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          tension: 0.1\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          x: {\r\n            display: true\r\n          },\r\n          y: {\r\n            display: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n\r\n  \r\n  methods: {\r\n    updateChart(data) {\r\n      // 更新折线图数据\r\n      this.chart.data.labels.push(data.minuteTime);\r\n      this.chart.data.datasets[0].data.push(data.inPerMinute);\r\n      this.chart.update();\r\n    },\r\n\r\n    fetchData() {\r\n      // 调用后端API获取数据\r\n      // 假设后端返回的数据格式为 { label: '标签', value: 10 }\r\n      // 可以使用axios或者fetch等库进行API请求\r\n      axios.get('/miniute/lineMap')\r\n        .then(response => {\r\n          const data = response.data;\r\n          this.updateChart(data);\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    // ...\r\n  \r\n  mounted() {\r\n    this.fetchData();\r\n    setInterval(() => {\r\n      this.fetchData();\r\n    }, 1000); // 每秒钟更新一次数据\r\n  }\r\n}\r\n  }\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n",{"version":3,"sources":["index1.vue"],"names":[],"mappings":";;;;;;;AAOA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index1.vue","sourceRoot":"src/views/lamp/museum","sourcesContent":["<template>\r\n  <div>\r\n    <canvas ref=\"chart\"></canvas>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport Chart from 'chart.js';\r\n\r\nexport default {\r\n  mounted() {\r\n    this.chart = new Chart(this.$refs.chart, {\r\n      type: 'line',\r\n      data: {\r\n        labels: [], // 折线图的标签\r\n        datasets: [{\r\n          label: '数据集',\r\n          data: [], // 实时数据\r\n          fill: false,\r\n          borderColor: 'rgba(75,192,192,1)',\r\n          tension: 0.1\r\n        }]\r\n      },\r\n      options: {\r\n        responsive: true,\r\n        maintainAspectRatio: false,\r\n        scales: {\r\n          x: {\r\n            display: true\r\n          },\r\n          y: {\r\n            display: true\r\n          }\r\n        }\r\n      }\r\n    });\r\n  },\r\n\r\n  \r\n  methods: {\r\n    updateChart(data) {\r\n      // 更新折线图数据\r\n      this.chart.data.labels.push(data.minuteTime);\r\n      this.chart.data.datasets[0].data.push(data.inPerMinute);\r\n      this.chart.update();\r\n    },\r\n\r\n    fetchData() {\r\n      // 调用后端API获取数据\r\n      // 假设后端返回的数据格式为 { label: '标签', value: 10 }\r\n      // 可以使用axios或者fetch等库进行API请求\r\n      axios.get('/miniute/lineMap')\r\n        .then(response => {\r\n          const data = response.data;\r\n          this.updateChart(data);\r\n        })\r\n        .catch(error => {\r\n          console.error(error);\r\n        });\r\n    },\r\n    // ...\r\n  \r\n  mounted() {\r\n    this.fetchData();\r\n    setInterval(() => {\r\n      this.fetchData();\r\n    }, 1000); // 每秒钟更新一次数据\r\n  }\r\n}\r\n  }\r\n\r\n\r\n\r\n\r\n \r\n\r\n\r\n</script>\r\n"]}]}