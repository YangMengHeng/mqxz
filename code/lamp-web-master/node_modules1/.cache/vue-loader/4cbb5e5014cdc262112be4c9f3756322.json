{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\resources\\msg\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\resources\\msg\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport msgApi from '@/api/Msg.js'\nimport roleApi from '@/api/Role.js'\nimport userApi from '@/api/User.js'\nimport Tinymce from '@/components/Tinymce'\nimport {initMsgEnums} from '@/utils/commons.js'\n\nexport default {\n  name: 'MsgEdit',\n  components: { Tinymce },\n  filters: {\n\n  },\n  props: {\n\n  },\n  data () {\n    return {\n      allUserList: [],\n      allRoleList: [],\n      oldChooseUserIdList: [[]],\n      oldChooseRoleIdList: [[]],\n      dialog: {\n        isVisible: false\n      },\n      type: 'add',\n      msg: this.initMsg(),\n      disabled: false,\n      disabledReceiveType: false,\n      enums:{\n        MsgBizType:{},\n        MsgType:{}\n      },\n      rules: {\n        \"msgDTO.title\": [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 1, max: 255, message: \"长度在 1 到 255 个字符\", trigger: 'blur' }\n        ],\n        \"msgDTO.content\": [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 1, max: 65535, message: \"长度在 1 到 65535 个字符\", trigger: 'blur' }\n        ],\n        \"msgDTO.msgType\": { required: true, message: this.$t('rules.require'), trigger: 'change' },\n        \"roleCodeList\": {\n          validator: (rule, value, callback) => {\n            if (this.msg.receiveType === 'role' && this.msg.msgDTO.msgType.code !== 'PUBLICITY' && this.msg.roleCodeList.length <= 0) {\n              callback('请选择角色')\n            } else {\n              callback()\n            }\n          }, trigger: 'blur'\n        },\n        \"userIdList\": {\n          validator: (rule, value, callback) => {\n            if (this.msg.receiveType === 'user' && this.msg.msgDTO.msgType.code !== 'PUBLICITY' && this.msg.userIdList.length <= 0) {\n              callback('请选择用户')\n            } else {\n              callback()\n            }\n          }, trigger: 'blur'\n        },\n        \"msgDTO.handlerUrl\": { min: 1, max: 255, message: \"长度在 1 到 255 个字符\", trigger: 'blur' }\n      }\n    }\n  },\n  computed: {\n\n  },\n  watch: {\n    $route () {\n      if (this.$route.path === '/resources/msg/edit') {\n        this.loadMsg()\n        this.loadUserList()\n        this.loadRoleList()\n      }\n    }\n  },\n  mounted () {\n    this.loadMsg()\n    this.loadUserList()\n    this.loadRoleList()\n    initMsgEnums(['MsgType', 'MsgBizType'], this.enums)\n  },\n  methods: {\n    initMsg () {\n      return {\n        userIdList: [],\n        roleCodeList: [],\n        receiveType: 'user',\n        msgDTO: {\n          id: '',\n          bizId: '',\n          bizType: {\n            code: ''\n          },\n          msgType: {\n            code: ''\n          },\n          title: '',\n          content: '',\n          author: '',\n          handlerUrl: '',\n          handlerParams: '',\n          isSingleHandle: true\n        }\n      }\n    },\n    loadMsg () {\n      const type = this.$route.query.type\n      const id = this.$route.query.id\n      this.type = type\n      if (type === 'view') {\n        msgApi.get(id)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.msg.msgDTO = res.data\n              if (this.msg.msgDTO.bizType === null) {\n                this.msg.msgDTO.bizType = { code: '' }\n              }\n              if (this.msg.msgDTO.msgType === null) {\n                this.msg.msgDTO.msgType = { code: '' }\n              }\n            }\n          })\n      } else {\n        this.reset()\n      }\n    },\n    loadUserList () {\n      userApi.page({ current: 1, size: 10000, model: {status: true}  })\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            if (res.data.records.length > 0) {\n              this.allUserList = [...[{ id: '-1', name: '全选' }], ...res.data.records]\n            }\n          }\n        })\n    },\n    loadRoleList () {\n      roleApi.page({ current: 1, size: 10000, model: {status: true}  })\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            if (res.data.records.length > 0) {\n              this.allRoleList = [...[{ code: '-1', name: '全选' }], ...res.data.records]\n            }\n\n          }\n        })\n    },\n    msgTypeChange (select) {\n      if (select === 'PUBLICITY') {\n        this.disabledReceiveType = true\n      } else {\n        this.disabledReceiveType = false\n      }\n    },\n    userSelect (val) {\n      //保留所有值\n      let allValues = this.allUserList.map(item => item.id)\n\n      // 用来储存上一次的值，可以进行对比\n      const oldVal = this.oldChooseUserIdList.length === 1 ? [] : this.oldChooseUserIdList[1]\n\n      // 若是全部选择\n      if (val.includes('-1')) {\n        this.msg.userIdList = allValues\n      }\n\n      // 取消全部选中  上次有 当前没有 表示取消全选\n      if (oldVal.includes('-1') && !val.includes('-1')) {\n        this.msg.userIdList = []\n      }\n\n      // 点击非全部选中  需要排除全部选中 以及 当前点击的选项\n      // 新老数据都有全部选中\n      if (oldVal.includes('-1') && val.includes('-1')) {\n        const index = val.indexOf('-1')\n        val.splice(index, 1) // 排除全选选项\n        this.msg.userIdList = val\n      }\n\n      //全选未选 但是其他选项全部选上 则全选选上 上次和当前 都没有全选\n      if (!oldVal.includes('-1') && !val.includes('-1')) {\n        if (val.length === allValues.length - 1) {\n          this.msg.userIdList = ['-1'].concat(val)\n        }\n      }\n\n      //储存当前最后的结果 作为下次的老数据\n      this.oldChooseUserIdList[1] = this.msg.userIdList\n    },\n    roleSelect (val) {\n      //保留所有值\n      let allValues = this.allRoleList.map(item => item.code)\n\n      // 用来储存上一次的值，可以进行对比\n      const oldVal = this.oldChooseRoleIdList.length === 1 ? [] : this.oldChooseRoleIdList[1]\n\n      // 若是全部选择\n      if (val.includes('-1')) {\n        this.msg.roleCodeList = allValues\n      }\n\n      // 取消全部选中  上次有 当前没有 表示取消全选\n      if (oldVal.includes('-1') && !val.includes('-1')) {\n        this.msg.roleCodeList = []\n      }\n\n      // 点击非全部选中  需要排除全部选中 以及 当前点击的选项\n      // 新老数据都有全部选中\n      if (oldVal.includes('-1') && val.includes('-1')) {\n        const index = val.indexOf('-1')\n        val.splice(index, 1) // 排除全选选项\n        this.msg.roleCodeList = val\n      }\n\n      //全选未选 但是其他选项全部选上 则全选选上 上次和当前 都没有全选\n      if (!oldVal.includes('-1') && !val.includes('-1')) {\n        if (val.length === allValues.length - 1) {\n          this.msg.roleCodeList = ['-1'].concat(val)\n        }\n      }\n\n      //储存当前最后的结果 作为下次的老数据\n      this.oldChooseRoleIdList[1] = this.msg.roleCodeList\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.msg = this.initMsg()\n      this.disabledReceiveType = false;\n\n      //这里报错\n      // this.$nextTick(() =>\n      //   this.$refs.content.setContent('')\n      // )\n\n      // 设置设置的时间短了 也报错\n      setTimeout(() => {\n        this.$refs.content.setContent('')\n      }, 1000)\n    },\n    submitForm (draft) {\n      const vm = this\n      console.log(vm.msg)\n\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          vm.editSubmit(draft)\n        } else {\n          return false\n        }\n      })\n    },\n    editSubmit (draft) {\n      const vm = this\n      if (vm.type === 'edit') {\n        vm.update()\n      } else {\n        vm.save()\n      }\n    },\n    save () {\n      const vm = this\n      vm.disabled = true\n      msgApi.save(vm.msg)\n        .then((response) => {\n          vm.disabled = false\n          const res = response.data\n          if (res.isSuccess) {\n            vm.$message({\n              message: vm.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            vm.reset()\n            vm.$router.push('/resources/msg')\n          }\n        })\n    },\n    update () {\n      const vm = this\n      vm.disabled = true\n      msgApi.update(vm.msg)\n        .then((response) => {\n          vm.disabled = false\n          const res = response.data\n          if (res.isSuccess) {\n            vm.$message({\n              message: vm.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            vm.reset()\n            vm.$router.push('/resources/msg')\n          }\n        })\n    }\n\n  }\n}\n",null]}