{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\dictionary.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\dictionary.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport DictionaryEdit from './edit'\nimport dictionaryApi from '@/api/Dictionary.js'\nimport {initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'DictionaryManage',\n  components: {Pagination, DictionaryEdit},\n  filters: {\n    statusFilter(status) {\n      const map = {\n        false: 'danger',\n        true: 'success'\n      }\n      return map[status] || 'success'\n    }\n  },\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({}),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      }\n    }\n  },\n  computed: {},\n  watch: {},\n  mounted() {\n    this.fetch()\n  },\n  methods: {\n    editClose() {\n      this.dialog.isVisible = false\n    },\n    editSuccess() {\n      this.search()\n    },\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n      this.$emit('dictionaryClick', {id: -1})\n    },\n    reset() {\n      this.queryParams = initQueryParams({});\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search()\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        const types = []\n        this.selection.forEach((u) => {\n          types.push(u.type)\n        })\n        this.delete(types)\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(types) {\n      dictionaryApi.deleteType(types)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n          }\n          this.search()\n        })\n    },\n    add() {\n      this.dialog.type = 'add'\n      this.dialog.isVisible = true\n      this.$refs.edit.setDictionary(false)\n    },\n    edit(row) {\n      this.$refs.edit.setDictionary(row)\n      this.dialog.type = 'edit'\n      this.dialog.isVisible = true\n    },\n    fetch(params = {}) {\n      this.loading = true\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n      this.queryParams.sort = '';\n      this.queryParams.order = '';\n\n      dictionaryApi.pageType(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    rowClick(row) {\n      this.$emit('dictionaryClick', row)\n    }\n  }\n}\n",{"version":3,"sources":["dictionary.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAifile":"dictionary.vue","sourceRoot":"src/views/lamp/system/dictionary","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.keyword')\" size=\"small\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.label\" clearable/>\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\" size=\"small\">{{ $t('table.search') }}</el-button>\n      <el-dropdown class=\"filter-item\" trigger=\"click\"\n                   v-has-any-permission=\"['authority:dictionary:delete','authority:dictionary:add']\">\n        <el-button size=\"small\">\n          {{ $t('table.more') }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"add\" v-has-permission=\"['authority:dictionary:add']\">\n            {{ $t('table.add') }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['authority:dictionary:delete']\">\n            {{ $t('table.delete') }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @row-click=\"rowClick\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      size=\"mini\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.dictionary.type')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"type\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.type }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.dictionary.label')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"name\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.label }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        column-key=\"state\"\n        :filters=\"[{ text: $t('common.state.valid'), value: true }, { text: $t('common.state.invalid'), value: false }]\"\n        :label=\"$t('table.dictionary.state')\"\n        class-name=\"status-col\"\n        width=\"70px\"\n      >\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.state | statusFilter\">{{ row.state ? $t('common.state.valid') :\n            $t('common.state.invalid') }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.operation')\" align=\"center\" class-name=\"small-padding fixed-width\"\n                       width=\"70px\">\n        <template slot-scope=\"{row}\">\n          <i @click=\"edit(row)\" class=\"el-icon-edit table-operation\" style=\"color: #2db7f5;\"\n             v-hasPermission=\"['authority:dictionary:edit']\"/>\n          <i @click=\"singleDelete(row)\" class=\"el-icon-delete \" style=\"color: #f50;\"\n             v-hasPermission=\"['authority:dictionary:delete']\"/>\n          <el-link class=\"no-perm\" v-has-no-permission=\"['authority:dictionary:edit','authority:dictionary:delete']\">{{ $t('tips.noPermission') }}\n          </el-link>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\" :total=\"Number(tableData.total)\"\n                @pagination=\"fetch\" v-show=\"tableData.total>0\"/>\n    <dictionary-edit :dialog-visible=\"dialog.isVisible\" :type=\"dialog.type\" @close=\"editClose\" @success=\"editSuccess\"\n                     ref=\"edit\"/>\n  </div>\n</template>\n\n<script>\n  import Pagination from '@/components/Pagination'\n  import DictionaryEdit from './edit'\n  import dictionaryApi from '@/api/Dictionary.js'\n  import {initQueryParams} from '@/utils/commons'\n\n  export default {\n    name: 'DictionaryManage',\n    components: {Pagination, DictionaryEdit},\n    filters: {\n      statusFilter(status) {\n        const map = {\n          false: 'danger',\n          true: 'success'\n        }\n        return map[status] || 'success'\n      }\n    },\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: 'add'\n        },\n        tableKey: 0,\n        queryParams: initQueryParams({}),\n        selection: [],\n        loading: false,\n        tableData: {\n          total: 0\n        }\n      }\n    },\n    computed: {},\n    watch: {},\n    mounted() {\n      this.fetch()\n    },\n    methods: {\n      editClose() {\n        this.dialog.isVisible = false\n      },\n      editSuccess() {\n        this.search()\n      },\n      onSelectChange(selection) {\n        this.selection = selection\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        })\n        this.$emit('dictionaryClick', {id: -1})\n      },\n      reset() {\n        this.queryParams = initQueryParams({});\n        this.$refs.table.clearSort();\n        this.$refs.table.clearFilter();\n        this.search()\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection()\n        this.$refs.table.toggleRowSelection(row, true)\n        this.batchDelete()\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t('tips.noDataSelected'),\n            type: 'warning'\n          })\n          return\n        }\n        this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          const types = []\n          this.selection.forEach((u) => {\n            types.push(u.type)\n          })\n          this.delete(types)\n        }).catch(() => {\n          this.clearSelections()\n        })\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection()\n      },\n      delete(types) {\n        dictionaryApi.deleteType(types)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.deleteSuccess'),\n                type: 'success'\n              })\n            }\n            this.search()\n          })\n      },\n      add() {\n        this.dialog.type = 'add'\n        this.dialog.isVisible = true\n        this.$refs.edit.setDictionary(false)\n      },\n      edit(row) {\n        this.$refs.edit.setDictionary(row)\n        this.dialog.type = 'edit'\n        this.dialog.isVisible = true\n      },\n      fetch(params = {}) {\n        this.loading = true\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n        this.queryParams.sort = '';\n        this.queryParams.order = '';\n\n        dictionaryApi.pageType(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      rowClick(row) {\n        this.$emit('dictionaryClick', row)\n      }\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}