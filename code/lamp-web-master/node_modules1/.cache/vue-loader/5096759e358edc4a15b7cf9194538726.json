{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\parameter\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\parameter\\index.vue","mtime":1689843948627},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport ParameterEdit from \"./edit\";\nimport parameterApi from \"@/api/Parameter.js\";\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport FileImport from \"@/components/lamp/Import\"\nimport {downloadFile, initDicts, initEnums, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"ParameterManage\",\n  directives: {elDragDialog},\n  components: {Pagination, ParameterEdit, FileImport},\n  filters: {},\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/authority/parameter/import`\n        //action: `${process.env.VUE_APP_BASE_API}/enc/encadd`                        //修改\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {}\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n    };\n  },\n  computed: {},\n  watch: {},\n  mounted() {\n    this.fetch();\n  },\n  methods: {\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({});\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出参数数据';\n      parameterApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出参数数据';\n      parameterApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection();\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          const ids = this.selection.map(u => u.id);\n          this.delete(ids);\n        })\n        .catch(() => {\n          this.clearSelections();\n        });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete(ids) {\n      parameterApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n        }\n        this.search();\n      });\n    },\n    add() {\n      this.dialog.type = \"add\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setParameter(false);\n    },\n    copy(row) {\n      row.id = null;\n      this.$refs.edit.setParameter(row);\n      this.dialog.type = \"copy\";\n      this.dialog.isVisible = true;\n    },\n    edit(row) {\n      this.$refs.edit.setParameter(row);\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n\n      parameterApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"index.vue","sourceRoot":"src/views/lamp/system/parameter","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n\n      <el-input\n        :placeholder=\"$t('table.parameter.key')\"\n        class=\"filter-item search-item\"\n        v-model=\"queryParams.model.key\"\n        placeholder='参数名称'\n      />\n      <el-input\n        :placeholder=\"$t('table.parameter.name')\"\n        class=\"filter-item search-item\"\n        v-model=\"queryParams.model.name\"\n        placeholder='参数类型'\n      />\n      <el-input\n        :placeholder=\"$t('table.parameter.value')\"\n        class=\"filter-item search-item\"\n        v-model=\"queryParams.model.value\"\n        placeholder='请求类型'\n      />\n\n      <el-date-picker\n        :range-separator=\"null\"\n        class=\"filter-item search-item date-range-item\"\n        end-placeholder=\"结束日期\"\n        format=\"yyyy-MM-dd HH:mm:ss\"\n        start-placeholder=\"开始日期\"\n        type=\"daterange\"\n        v-model=\"queryParams.timeRange\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">\n        {{ $t(\"table.search\") }}\n      </el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">\n        {{ $t(\"table.reset\") }}\n      </el-button>\n\n      <el-button @click=\"add\" class=\"filter-item\" plain type=\"danger\" v-has-permission=\"['authority:parameter:add']\">\n        {{ $t(\"table.add\") }}\n      </el-button>\n      \n      <el-dropdown class=\"filter-item\" trigger=\"click\"\n                   v-has-any-permission=\"['authority:parameter:delete', 'authority:parameter:export', 'authority:parameter:import']\">\n        <el-button>\n          {{ $t(\"table.more\") }}<i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['authority:parameter:delete']\">\n            {{ $t(\"table.delete\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['authority:parameter:export']\">\n            {{ $t(\"table.export\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['authority:parameter:export']\">\n            {{ $t(\"table.exportPreview\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"importExcel\" v-has-permission=\"['authority:parameter:import']\">\n            {{ $t(\"table.import\") }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\">\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.parameter.key')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"key\" width=\"\" label=' 参数名称'>\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.key }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.parameter.name')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"name\" width=\"\" label=' 参数说明'>\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.parameter.value')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"value\" width=\"\" label=' 请求类型'>\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.value }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.parameter.describe')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"describe\" width=\"\" label=' 数据类型'>\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.describe }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.parameter.readonly')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       :filter-multiple=\"false\" column-key=\"readonly\"\n                       :filters=\"[{ text: $t('common.yes'), value: 'true' }, { text: $t('common.no'), value: 'false' }]\"\n                       prop=\"readonly\" width=\"80px\" label=' 是否必须'>\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.readonly ? 'danger' : 'success'\" slot>\n            {{ scope.row.readonly ? $t(\"common.yes\") : $t(\"common.no\") }}\n          </el-tag>\n        </template>\n      </el-table-column>\n\n   \n      <el-table-column :label=\"$t('table.parameter.schema')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"dschema\" width=\"\" label=' schema'>\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.schema }}</span>\n        </template>\n      </el-table-column>\n\n\n      <el-table-column\n        :label=\"$t('table.createTime')\"\n        align=\"center\"\n        prop=\"createTime\"\n        sortable=\"custom\"\n        width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.operation')\" column-key=\"operation\" align=\"center\" class-name=\"small-padding fixed-width\" width=\"100px\">\n        <template slot-scope=\"{ row }\">\n          <i @click=\"copy(row)\" class=\"el-icon-copy-document table-operation\" :title=\"$t('common.delete')\"\n             style=\"color: #2db7f5;\" v-hasPermission=\"['authority:parameter:add']\"/>\n          <i @click=\"edit(row)\" class=\"el-icon-edit table-operation\" :title=\"$t('common.delete')\"\n             style=\"color: #2db7f5;\" v-hasPermission=\"['authority:parameter:edit']\"/>\n          <i @click=\"singleDelete(row)\" class=\"el-icon-delete table-operation\" :title=\"$t('common.delete')\"\n             style=\"color: #f50;\" v-hasPermission=\"['authority:parameter:delete']\"/>\n          <el-link class=\"no-perm\" v-has-no-permission=\"['authority:parameter:edit', 'authority:parameter:add', 'authority:parameter:delete']\">\n            {{ $t(\"tips.noPermission\") }}\n          </el-link>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination\n      :limit.sync=\"queryParams.size\"\n      :page.sync=\"queryParams.current\"\n      :total=\"Number(tableData.total)\"\n      @pagination=\"fetch\"\n      v-show=\"tableData.total > 0\"/>\n    <parameter-edit\n      :dialog-visible=\"dialog.isVisible\"\n      :type=\"dialog.type\"\n      @close=\"editClose\"\n      @success=\"editSuccess\"\n      ref=\"edit\"/>\n    <file-import\n      :dialog-visible=\"fileImport.isVisible\"\n      :type=\"fileImport.type\"\n      :action=\"fileImport.action\" accept=\".xls,.xlsx\"\n      @close=\"importClose\"\n      @success=\"importSuccess\"\n      ref=\"import\"\n    />\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n      v-el-drag-dialog>\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import Pagination from \"@/components/Pagination\";\n  import ParameterEdit from \"./edit\";\n  import parameterApi from \"@/api/Parameter.js\";\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import FileImport from \"@/components/lamp/Import\"\n  import {downloadFile, initDicts, initEnums, initQueryParams} from '@/utils/commons'\n\n  export default {\n    name: \"ParameterManage\",\n    directives: {elDragDialog},\n    components: {Pagination, ParameterEdit, FileImport},\n    filters: {},\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: \"add\"\n        },\n        preview: {\n          isVisible: false,\n          context: ''\n        },\n        fileImport: {\n          isVisible: false,\n          type: \"import\",\n          action: `${process.env.VUE_APP_BASE_API}/authority/parameter/import`\n          //action: `${process.env.VUE_APP_BASE_API}/enc/encadd`                        //修改\n        },\n        tableKey: 0,\n        queryParams: initQueryParams({\n          model: {}\n        }),\n        selection: [],\n        loading: false,\n        tableData: {\n          total: 0\n        },\n      };\n    },\n    computed: {},\n    watch: {},\n    mounted() {\n      this.fetch();\n    },\n    methods: {\n      editClose() {\n        this.dialog.isVisible = false;\n      },\n      editSuccess() {\n        this.search();\n      },\n      onSelectChange(selection) {\n        this.selection = selection;\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        });\n      },\n      reset() {\n        this.queryParams = initQueryParams({});\n        this.$refs.table.clearSort();\n        this.$refs.table.clearFilter();\n        this.search();\n      },\n      exportExcelPreview() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出参数数据';\n        parameterApi.preview(this.queryParams).then(response => {\n          const res = response.data;\n          this.preview.isVisible = true;\n          this.preview.context = res.data;\n        });\n      },\n      exportExcel() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出参数数据';\n        parameterApi.export(this.queryParams).then(response => {\n          downloadFile(response);\n        });\n      },\n      importExcel() {\n        this.fileImport.type = \"upload\";\n        this.fileImport.isVisible = true;\n        this.$refs.import.setModel(false);\n      },\n      importSuccess() {\n        this.search();\n      },\n      importClose() {\n        this.fileImport.isVisible = false;\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection();\n        this.$refs.table.toggleRowSelection(row, true);\n        this.batchDelete();\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t(\"tips.noDataSelected\"),\n            type: \"warning\"\n          });\n          return;\n        }\n        this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n          .then(() => {\n            const ids = this.selection.map(u => u.id);\n            this.delete(ids);\n          })\n          .catch(() => {\n            this.clearSelections();\n          });\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection();\n      },\n      delete(ids) {\n        parameterApi.delete(ids).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: \"success\"\n            });\n          }\n          this.search();\n        });\n      },\n      add() {\n        this.dialog.type = \"add\";\n        this.dialog.isVisible = true;\n        this.$refs.edit.setParameter(false);\n      },\n      copy(row) {\n        row.id = null;\n        this.$refs.edit.setParameter(row);\n        this.dialog.type = \"copy\";\n        this.dialog.isVisible = true;\n      },\n      edit(row) {\n        this.$refs.edit.setParameter(row);\n        this.dialog.type = \"edit\";\n        this.dialog.isVisible = true;\n      },\n      fetch(params = {}) {\n        this.loading = true;\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n\n        parameterApi.page(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      cellClick (row, column) {\n        if (column['columnKey'] === \"operation\") {\n          return;\n        }\n        let flag = false;\n        this.selection.forEach((item) => {\n          if (item.id === row.id) {\n            flag = true;\n            this.$refs.table.toggleRowSelection(row);\n          }\n        })\n\n        if (!flag) {\n          this.$refs.table.toggleRowSelection(row, true);\n        }\n      }\n    }\n  };\n</script>\n<style lang=\"scss\" scoped></style>\n"]}]}