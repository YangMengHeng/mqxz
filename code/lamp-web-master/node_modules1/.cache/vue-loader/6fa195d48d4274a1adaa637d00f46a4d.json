{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\role\\roleAuthority.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\role\\roleAuthority.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport roleApi from \"@/api/Role.js\";\nimport menuApi from \"@/api/Menu.js\";\nimport resourceApi from \"@/api/Resource.js\";\n\nexport default {\n  name: \"RoleAuthorityEdit\",\n  components: {},\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      roleAuthority: this.initRoleAuthority(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      menuTree: [],\n      resourceList: [],\n      //回显的数据\n      echoResourceIdList: [],\n      rules: {},\n      tableKey: 0,\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      selection: [],\n      disabled: false,\n      isIndeterminate: false,\n      checkedMenu: false\n    };\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible;\n      },\n      set() {\n        this.close();\n        this.reset();\n      }\n    },\n    title() {\n      return \"配置菜单资源\";\n    }\n  },\n  watch: {},\n  mounted() {\n    this.initMenuTree();\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth();\n      })();\n    };\n  },\n  methods: {\n    allMenuIdList() {\n      const menuIdList = [];\n      this.getMenuIdList(this.menuTree, menuIdList);\n      return menuIdList;\n    },\n    getMenuIdList(menuList, menuIdList) {\n      if (menuList) {\n        menuList.forEach(item => {\n          menuIdList.push(item.id);\n          if (item.children && item.children.length > 0) {\n            this.getMenuIdList(item.children, menuIdList);\n          }\n        });\n      }\n    },\n    checkedAll() {\n      if (this.checkedMenu) {\n        //全选\n        this.$refs.menuTree.setCheckedKeys(this.allMenuIdList());\n        this.isIndeterminate = false;\n      } else {\n        //取消选中\n        this.$refs.menuTree.setCheckedKeys([]);\n        this.isIndeterminate = false;\n      }\n    },\n    nodeClick(data) {\n      const vm = this;\n      vm.loading = true;\n\n      resourceApi\n        .page({\n          current: 1, size: 10000,\n          model: {menuId: data.id}\n        })\n        .then(response => {\n          const res = response.data;\n          vm.tableData = res.data;\n          vm.loading = false;\n          vm.displayTable();\n        });\n    },\n    displayTable() {\n      const vm = this;\n      vm.tableData.records.forEach(item => {\n        vm.roleAuthority.resourceIdList.forEach(resourceId => {\n          if (item.id === resourceId) {\n            vm.$refs.table.toggleRowSelection(item, true);\n          }\n        });\n      });\n    },\n    onAllSelect(selection) {\n      this.onSelect(selection);\n    },\n    onSelect(selection, row) {\n      this.mergeResourceIdList(selection, row);\n      //this.roleAuthority.resourceIdList = selection.map(item => item.id);\n      this.selection = selection;\n\n      // 根据右侧选中的资源，强制勾选左侧的 树状层级菜单\n      const old = this.$refs.menuTree.getCheckedKeys();\n      const must = selection.map(item => item.menuId);\n      const newSelected = Array.from(new Set([...old, ...must]));\n      this.$refs.menuTree.setCheckedKeys(newSelected);\n      newSelected.forEach(item => {\n        this.selectedParent(item);\n      });\n    },\n    mergeResourceIdList(selection, row) {\n      // true就是选中，0或者false是取消选中\n      let selected = true;\n      if (row) {\n        selected = selection.length && selection.indexOf(row) !== -1;\n      } else {\n        selected = selection.length > 0;\n      }\n\n      //本次选中的\n      const curResourceIdList = selection.map(item => item.id);\n\n      const ridList = this.echoResourceIdList;\n      if (!selected && row) {\n        var index = ridList.findIndex(item => {\n          if (item == row.id) {\n            return true;\n          }\n        });\n        ridList.splice(index, 1);\n      }\n\n      // 本次选中的 + 回显的 然后去重\n      this.roleAuthority.resourceIdList = [\n        ...new Set([...curResourceIdList, ...ridList])\n      ];\n    },\n\n    initMenuTree() {\n      menuApi.allTree().then(response => {\n        const res = response.data;\n        this.menuTree = res.data;\n      });\n    },\n    initRoleAuthority() {\n      return {\n        roleId: \"\",\n        menuIdList: [],\n        resourceIdList: []\n      };\n    },\n    initWidth() {\n      this.screenWidth = document.body.clientWidth;\n      if (this.screenWidth < 991) {\n        return \"90%\";\n      } else if (this.screenWidth < 1400) {\n        return \"45%\";\n      } else {\n        return \"1000px\";\n      }\n    },\n    setRoleAuthority(val) {\n      const vm = this;\n      vm.roleAuthority.roleId = val.id;\n      // vm.disabled = val.readonly\n      // 回显\n      roleApi.findAuthorityIdByRoleId(val.id).then(response => {\n        const res = response.data;\n        vm.roleAuthority.menuIdList = res.data.menuIdList;\n        vm.roleAuthority.resourceIdList = res.data.resourceIdList;\n        vm.echoResourceIdList = res.data.resourceIdList;\n        vm.$refs.menuTree.setCheckedKeys(res.data.menuIdList);\n        res.data.menuIdList.forEach(item => {\n          vm.selectedParent(item);\n        });\n      });\n    },\n    close() {\n      this.$emit(\"close\");\n    },\n    reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.roleAuthority = this.initRoleAuthority();\n      this.$refs.menuTree.setCheckedKeys([]);\n      this.$refs.table.clearSelection();\n    },\n    submitForm() {\n      const vm = this;\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          vm.editSubmit();\n        } else {\n          return false;\n        }\n      });\n    },\n    editSubmit() {\n      const vm = this;\n\n      this.roleAuthority.menuIdList = vm.$refs.menuTree\n        .getHalfCheckedKeys()\n        .concat(vm.$refs.menuTree.getCheckedKeys());\n\n      //勾选时， 实时计算出来\n      //this.roleAuthority.resourceIdList = vm.selection.map(item => item.id);\n\n      roleApi.saveRoleAuthority(this.roleAuthority).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          vm.isVisible = false;\n          vm.$message({\n            message: vm.$t(\"tips.createSuccess\"),\n            type: \"success\"\n          });\n          vm.$emit(\"success\");\n        }\n      });\n    },\n    checkMenu(data, node) {\n      if (node.checkedKeys.length === 0) {\n        //取消\n        this.checkedMenu = false;\n        this.isIndeterminate = false;\n      } else if (node.checkedKeys.length === this.allMenuIdList().length) {\n        //全选\n        this.checkedMenu = true;\n        this.isIndeterminate = false;\n      } else {\n        // 中立\n        this.checkedMenu = false;\n        this.isIndeterminate = true;\n      }\n\n      // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\n      let selected = node.checkedKeys.indexOf(data.id); // -1未选中\n      // 选中\n      if (selected !== -1) {\n        // 子节点只要被选中父节点就被选中\n        this.selectedParent(data);\n        // 统一处理子节点为相同的勾选状态\n        this.uniteChildSame(data, true);\n      } else {\n        // 未选中 处理子节点全部未选中\n        if (data.children && data.children.length !== 0) {\n          this.uniteChildSame(data, false);\n        }\n      }\n    },\n    // 统一处理子节点为相同的勾选状态\n    uniteChildSame(data, isSelected) {\n      this.$refs.menuTree.setChecked(data.id, isSelected);\n      if (data.children) {\n        for (let i = 0; i < data.children.length; i++) {\n          this.uniteChildSame(data.children[i], isSelected);\n        }\n      }\n    },\n    // 统一处理父节点为选中\n    selectedParent(data) {\n      let currentNode = this.$refs.menuTree.getNode(data);\n      if (currentNode.parent.key !== undefined) {\n        this.$refs.menuTree.setChecked(currentNode.parent, true);\n        this.selectedParent(currentNode.parent);\n      }\n    }\n  }\n};\n",{"version":3,"sources":["roleAuthority.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"roleAuthority.vue","sourceRoot":"src/views/lamp/system/role","sourcesContent":["<template>\n  <el-dialog\n    :close-on-click-modal=\"false\"\n    :title=\"title\"\n    :visible.sync=\"isVisible\"\n    :width=\"width\"\n    top=\"50px\"\n  >\n    <el-form\n      :model=\"roleAuthority\"\n      :rules=\"rules\"\n      label-position=\"top\"\n      label-width=\"100px\"\n      ref=\"form\"\n    >\n      <el-scrollbar style=\"height:800px\">\n        <el-row :gutter=\"12\">\n          <el-col :span=\"8\">\n            <el-card class=\"box-card\">\n              <el-form-item label=\"菜单\" prop=\"menuIdList\">\n                <div align=\"left\" style=\"margin-left:24px;\">\n                  <el-checkbox\n                    :indeterminate=\"isIndeterminate\"\n                    @change=\"checkedAll\"\n                    v-model=\"checkedMenu\"\n                  />\n                  全选/反选\n                </div>\n                <el-tree\n                  :check-strictly=\"true\"\n                  :data=\"menuTree\"\n                  :default-checked-keys=\"roleAuthority.menuIdList\"\n                  :default-expanded-keys=\"roleAuthority.menuIdList\"\n                  :disabled=\"disabled\"\n                  :expand-on-click-node=\"false\"\n                  @check=\"checkMenu\"\n                  @node-click=\"nodeClick\"\n                  default-expand-all\n                  highlight-current\n                  node-key=\"id\"\n                  ref=\"menuTree\"\n                  show-checkbox\n                />\n              </el-form-item>\n            </el-card>\n          </el-col>\n          <el-col :span=\"16\">\n            <el-card class=\"box-card\">\n              <el-form-item label=\"资源\" prop=\"resourceIdList\">\n                <el-table\n                  :data=\"tableData.records\"\n                  :key=\"tableKey\"\n                  @select=\"onSelect\"\n                  @select-all=\"onAllSelect\"\n                  border\n                  fit\n                  ref=\"table\"\n                  row-key=\"id\"\n                  style=\"width: 100%;\"\n                  v-loading=\"loading\"\n                >\n                  <el-table-column\n                    :reserve-selection=\"true\"\n                    align=\"center\"\n                    type=\"selection\"\n                    width=\"40px\"\n                  />\n                  <el-table-column\n                    :label=\"$t('table.resource.code')\"\n                    :show-overflow-tooltip=\"true\"\n                    align=\"center\"\n                    prop=\"code\"\n                  >\n                    <template slot-scope=\"scope\">\n                      <span>{{ scope.row.code }}</span>\n                    </template>\n                  </el-table-column>\n                  <el-table-column\n                    :label=\"$t('table.resource.name')\"\n                    :show-overflow-tooltip=\"true\"\n                    align=\"center\"\n                    prop=\"name\"\n                  >\n                    <template slot-scope=\"scope\">\n                      <span>{{ scope.row.name }}</span>\n                    </template>\n                  </el-table-column>\n                </el-table>\n              </el-form-item>\n            </el-card>\n          </el-col>\n        </el-row>\n      </el-scrollbar>\n    </el-form>\n    <div class=\"dialog-footer\" slot=\"footer\">\n      <el-button @click=\"isVisible = false\" plain type=\"warning\">{{\n        $t(\"common.cancel\")\n        }}\n      </el-button>\n      <el-button\n        :disabled=\"disabled\"\n        @click=\"submitForm\"\n        plain\n        type=\"primary\"\n      >{{ $t(\"common.confirm\") }}\n      </el-button\n      >\n    </div>\n  </el-dialog>\n</template>\n<script>\n  import roleApi from \"@/api/Role.js\";\n  import menuApi from \"@/api/Menu.js\";\n  import resourceApi from \"@/api/Resource.js\";\n\n  export default {\n    name: \"RoleAuthorityEdit\",\n    components: {},\n    props: {\n      dialogVisible: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data() {\n      return {\n        roleAuthority: this.initRoleAuthority(),\n        screenWidth: 0,\n        width: this.initWidth(),\n        menuTree: [],\n        resourceList: [],\n        //回显的数据\n        echoResourceIdList: [],\n        rules: {},\n        tableKey: 0,\n        loading: false,\n        tableData: {\n          total: 0\n        },\n        selection: [],\n        disabled: false,\n        isIndeterminate: false,\n        checkedMenu: false\n      };\n    },\n    computed: {\n      isVisible: {\n        get() {\n          return this.dialogVisible;\n        },\n        set() {\n          this.close();\n          this.reset();\n        }\n      },\n      title() {\n        return \"配置菜单资源\";\n      }\n    },\n    watch: {},\n    mounted() {\n      this.initMenuTree();\n      window.onresize = () => {\n        return (() => {\n          this.width = this.initWidth();\n        })();\n      };\n    },\n    methods: {\n      allMenuIdList() {\n        const menuIdList = [];\n        this.getMenuIdList(this.menuTree, menuIdList);\n        return menuIdList;\n      },\n      getMenuIdList(menuList, menuIdList) {\n        if (menuList) {\n          menuList.forEach(item => {\n            menuIdList.push(item.id);\n            if (item.children && item.children.length > 0) {\n              this.getMenuIdList(item.children, menuIdList);\n            }\n          });\n        }\n      },\n      checkedAll() {\n        if (this.checkedMenu) {\n          //全选\n          this.$refs.menuTree.setCheckedKeys(this.allMenuIdList());\n          this.isIndeterminate = false;\n        } else {\n          //取消选中\n          this.$refs.menuTree.setCheckedKeys([]);\n          this.isIndeterminate = false;\n        }\n      },\n      nodeClick(data) {\n        const vm = this;\n        vm.loading = true;\n\n        resourceApi\n          .page({\n            current: 1, size: 10000,\n            model: {menuId: data.id}\n          })\n          .then(response => {\n            const res = response.data;\n            vm.tableData = res.data;\n            vm.loading = false;\n            vm.displayTable();\n          });\n      },\n      displayTable() {\n        const vm = this;\n        vm.tableData.records.forEach(item => {\n          vm.roleAuthority.resourceIdList.forEach(resourceId => {\n            if (item.id === resourceId) {\n              vm.$refs.table.toggleRowSelection(item, true);\n            }\n          });\n        });\n      },\n      onAllSelect(selection) {\n        this.onSelect(selection);\n      },\n      onSelect(selection, row) {\n        this.mergeResourceIdList(selection, row);\n        //this.roleAuthority.resourceIdList = selection.map(item => item.id);\n        this.selection = selection;\n\n        // 根据右侧选中的资源，强制勾选左侧的 树状层级菜单\n        const old = this.$refs.menuTree.getCheckedKeys();\n        const must = selection.map(item => item.menuId);\n        const newSelected = Array.from(new Set([...old, ...must]));\n        this.$refs.menuTree.setCheckedKeys(newSelected);\n        newSelected.forEach(item => {\n          this.selectedParent(item);\n        });\n      },\n      mergeResourceIdList(selection, row) {\n        // true就是选中，0或者false是取消选中\n        let selected = true;\n        if (row) {\n          selected = selection.length && selection.indexOf(row) !== -1;\n        } else {\n          selected = selection.length > 0;\n        }\n\n        //本次选中的\n        const curResourceIdList = selection.map(item => item.id);\n\n        const ridList = this.echoResourceIdList;\n        if (!selected && row) {\n          var index = ridList.findIndex(item => {\n            if (item == row.id) {\n              return true;\n            }\n          });\n          ridList.splice(index, 1);\n        }\n\n        // 本次选中的 + 回显的 然后去重\n        this.roleAuthority.resourceIdList = [\n          ...new Set([...curResourceIdList, ...ridList])\n        ];\n      },\n\n      initMenuTree() {\n        menuApi.allTree().then(response => {\n          const res = response.data;\n          this.menuTree = res.data;\n        });\n      },\n      initRoleAuthority() {\n        return {\n          roleId: \"\",\n          menuIdList: [],\n          resourceIdList: []\n        };\n      },\n      initWidth() {\n        this.screenWidth = document.body.clientWidth;\n        if (this.screenWidth < 991) {\n          return \"90%\";\n        } else if (this.screenWidth < 1400) {\n          return \"45%\";\n        } else {\n          return \"1000px\";\n        }\n      },\n      setRoleAuthority(val) {\n        const vm = this;\n        vm.roleAuthority.roleId = val.id;\n        // vm.disabled = val.readonly\n        // 回显\n        roleApi.findAuthorityIdByRoleId(val.id).then(response => {\n          const res = response.data;\n          vm.roleAuthority.menuIdList = res.data.menuIdList;\n          vm.roleAuthority.resourceIdList = res.data.resourceIdList;\n          vm.echoResourceIdList = res.data.resourceIdList;\n          vm.$refs.menuTree.setCheckedKeys(res.data.menuIdList);\n          res.data.menuIdList.forEach(item => {\n            vm.selectedParent(item);\n          });\n        });\n      },\n      close() {\n        this.$emit(\"close\");\n      },\n      reset() {\n        // 先清除校验，再清除表单，不然有奇怪的bug\n        this.$refs.form.clearValidate();\n        this.$refs.form.resetFields();\n        this.roleAuthority = this.initRoleAuthority();\n        this.$refs.menuTree.setCheckedKeys([]);\n        this.$refs.table.clearSelection();\n      },\n      submitForm() {\n        const vm = this;\n        this.$refs.form.validate(valid => {\n          if (valid) {\n            vm.editSubmit();\n          } else {\n            return false;\n          }\n        });\n      },\n      editSubmit() {\n        const vm = this;\n\n        this.roleAuthority.menuIdList = vm.$refs.menuTree\n          .getHalfCheckedKeys()\n          .concat(vm.$refs.menuTree.getCheckedKeys());\n\n        //勾选时， 实时计算出来\n        //this.roleAuthority.resourceIdList = vm.selection.map(item => item.id);\n\n        roleApi.saveRoleAuthority(this.roleAuthority).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            vm.isVisible = false;\n            vm.$message({\n              message: vm.$t(\"tips.createSuccess\"),\n              type: \"success\"\n            });\n            vm.$emit(\"success\");\n          }\n        });\n      },\n      checkMenu(data, node) {\n        if (node.checkedKeys.length === 0) {\n          //取消\n          this.checkedMenu = false;\n          this.isIndeterminate = false;\n        } else if (node.checkedKeys.length === this.allMenuIdList().length) {\n          //全选\n          this.checkedMenu = true;\n          this.isIndeterminate = false;\n        } else {\n          // 中立\n          this.checkedMenu = false;\n          this.isIndeterminate = true;\n        }\n\n        // 用于：父子节点严格互不关联时，父节点勾选变化时通知子节点同步变化，实现单向关联。\n        let selected = node.checkedKeys.indexOf(data.id); // -1未选中\n        // 选中\n        if (selected !== -1) {\n          // 子节点只要被选中父节点就被选中\n          this.selectedParent(data);\n          // 统一处理子节点为相同的勾选状态\n          this.uniteChildSame(data, true);\n        } else {\n          // 未选中 处理子节点全部未选中\n          if (data.children && data.children.length !== 0) {\n            this.uniteChildSame(data, false);\n          }\n        }\n      },\n      // 统一处理子节点为相同的勾选状态\n      uniteChildSame(data, isSelected) {\n        this.$refs.menuTree.setChecked(data.id, isSelected);\n        if (data.children) {\n          for (let i = 0; i < data.children.length; i++) {\n            this.uniteChildSame(data.children[i], isSelected);\n          }\n        }\n      },\n      // 统一处理父节点为选中\n      selectedParent(data) {\n        let currentNode = this.$refs.menuTree.getNode(data);\n        if (currentNode.parent.key !== undefined) {\n          this.$refs.menuTree.setChecked(currentNode.parent, true);\n          this.selectedParent(currentNode.parent);\n        }\n      }\n    }\n  };\n</script>\n<style lang=\"scss\" scoped></style>\n"]}]}