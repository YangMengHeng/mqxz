{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\menu\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\menu\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport resourceApi from '@/api/Resource.js';\n\nexport default {\n  name: 'ResourceEdit',\n  components: {},\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'add'\n    }\n  },\n  data () {\n    return {\n      resource: this.initResource(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        code: [\n          {\n            required: true,\n            message: this.$t('rules.require'),\n            trigger: 'blur'\n          },\n          {\n            min: 1,\n            max: 500,\n            message: '不能超过500字符',\n            trigger: 'blur'\n          },\n          {\n            validator: (rule, value, callback) => {\n              if (!this.resource.id) {\n                // this.$get(`system/user/check/${value}`).then((r) => {\n                //   if (!r.data) {\n                //     callback(this.$t('rules.usernameExist'))\n                //   } else {\n                //     callback()\n                //   }\n                // })\n              } else {\n                // callback()\n              }\n              callback()\n            },\n            trigger: 'blur'\n          }\n        ],\n        name: {\n          required: true,\n          message: this.$t('rules.require'),\n          trigger: 'blur'\n        }\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    },\n    title () {\n      return this.type === 'add'\n        ? this.$t('common.add')\n        : this.$t('common.edit')\n    }\n  },\n  watch: {},\n  mounted () {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    };\n  },\n  methods: {\n    initResource () {\n      return {\n        id: '',\n        name: '',\n        code: '',\n        describe: ''\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%';\n      } else if (this.screenWidth < 1400) {\n        return '45%';\n      } else {\n        return '800px';\n      }\n    },\n    setResource (val) {\n      const that = this\n      if (val) {\n        that.resource = { ...val }\n      }\n    },\n    close () {\n      this.$emit('close')\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.resource = this.initResource()\n    },\n    submitForm () {\n      const that = this\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          that.editSubmit()\n        } else {\n          return false\n        }\n      })\n    },\n    editSubmit () {\n      const that = this\n      if (that.type === 'add') {\n        that.save()\n      } else {\n        that.update()\n      }\n    },\n    save () {\n      const that = this\n      resourceApi.save(this.resource).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          that.isVisible = false\n          that.$message({\n            message: that.$t('tips.createSuccess'),\n            type: 'success'\n          })\n          that.$emit('success')\n        }\n      })\n    },\n    update () {\n      resourceApi.update(this.resource).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.isVisible = false\n          this.$message({\n            message: this.$t('tips.updateSuccess'),\n            type: 'success'\n          })\n          this.$emit('success')\n        }\n      })\n    }\n  }\n}\n",null]}