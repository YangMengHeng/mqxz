{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\layout\\components\\Navbar.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\layout\\components\\Navbar.vue","mtime":1688110966381},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Breadcrumb from \"@/components/Breadcrumb\";\nimport Hamburger from \"@/components/Hamburger\";\nimport LangSelect from \"@/components/LangSelect\";\nimport db from \"@/utils/localstorage\";\nimport Screenfull from \"@/components/Screenfull\";\nimport Search from \"@/components/HeaderSearch\";\nimport loginApi from \"@/api/Login.js\";\nimport msgApi from \"@/api/Msg.js\";\n\nexport default {\n  components: {\n    Breadcrumb,\n    Hamburger,\n    LangSelect,\n    Screenfull,\n    Search\n  },\n  filters: {\n    userAvatarFilter(name) {\n      return name.charAt(0);\n    },\n    msgTypeFilter(status) {\n      const map = {\n        WAIT: \"\",\n        NOTIFY: \"success\",\n        PUBLICITY: \"info\",\n        WARN: \"danger\"\n      };\n      return map[status] || \"\";\n    },\n  },\n  data() {\n    return {\n      tips: ' 演示环境禁止修改、删除重要数据！请登录租户【0000】，账号【lamp_pt】查询其他租户的管理员账号后，登录其他租户测试全部功能!!! ',\n      tableData: {\n        total: 0,\n        records: []\n      },\n      msgRefresh: db.get('MSG_REFRESH', false), // 消息是否自动刷新\n      msgRefreshTimer: null\n    }\n  },\n  computed: {\n    sidebar() {\n      return this.$store.state.setting.sidebar;\n    },\n    avatar() {\n      const user = this.$store.state.account.user;\n      if (!user[\"avatar\"]) {\n        return require(`@/assets/avatar/default.jpg`);\n      } else {\n        if (\n          user[\"avatar\"].startsWith(\"http://\") ||\n          user[\"avatar\"].startsWith(\"https://\")\n        ) {\n          return user[\"avatar\"];\n        } else {\n          return require(`@/assets/avatar/${user.avatar}`);\n        }\n      }\n    },\n    name() {\n      return this.$store.state.account.user.name;\n    },\n    userId() {\n      return this.$store.state.account.user.id;\n    },\n    device() {\n      return this.$store.state.setting.device;\n    }\n  },\n  mounted() {\n    this.tipsScrolling();\n    this.loadMyMsg();\n    if (this.msgRefresh) {\n      this.msgRefreshChange(true);\n    }\n  },\n  methods: {\n    tipsScrolling (){\n      setInterval(() => { //ES6箭头函数\n        // 截取首字符串(第一个)\n        let head = this.tips.substring(0,1);\n        // 截取除首字符串外所有字符串(除第一个所有)\n        let foot = this.tips.substring(1);\n        // 头尾拼接后赋给data => tit属性\n        this.tips = foot + head;\n      },1000)\n    },\n    loadMyMsg() {\n      const params = {\n        model: {}\n      };\n      params.size = 10;\n      params.current = 1;\n      params.model.isRead = false;\n      msgApi.page(params, {isAlert: false}).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      });\n    },\n    mark(ids, callback) {\n      msgApi.mark( ids).then(response => {\n        const res = response.data;\n        if (typeof callback === \"function\") {\n          callback(ids);\n        }\n      });\n    },\n    view(row) {\n      this.mark([row.id], ids => {\n        this.loadMyMsg();\n        this.$router.push({\n          path: \"/resources/msg/edit\",\n          query: {\n            id: row.id,\n            type: \"view\"\n          }\n        });\n      });\n    },\n    msgRefreshChange(val) {\n      db.save('MSG_REFRESH', val);\n      if (val) {\n        this.msgRefreshTimer = setInterval(() => {\n          this.loadMyMsg();\n        }, 15000)\n      } else {\n        clearInterval(this.msgRefreshTimer);\n        console.log(\"定时拉取消息停止了！\")\n        this.msgRefreshTimer = null;\n      }\n    },\n    toggleSideBar() {\n      this.$store.commit(\"setting/toggleSidebar\");\n    },\n    setting() {\n      this.$store.commit(\"setting/openSettingBar\", true);\n    },\n    logout() {\n      let param = {\n        token: db.get('TOKEN', ''),\n        userId: db.get('USER', {id: null}).id,\n        clientId: process.env.VUE_APP_CLIENT_ID,\n      }\n      loginApi.logout(param).finally(() => this.clean());\n    },\n    clean() {\n      db.clear();\n      location.reload();\n    },\n    deleteCache() {\n      this.$confirm(\n        this.$t(\"tips.confirmDeleteCache\"),\n        this.$t(\"common.tips\"),\n        {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        }\n      ).then(() => {\n        this.reloadData();\n      })\n        .catch(() => {\n          // do nothing\n        });\n    },\n    reloadData() {\n      const param = {\n        grantType: 'refresh_token',\n        refreshToken: db.get('REFRESH_TOKEN', '')\n      }\n      loginApi.login(param).then((response) => {\n        const res = response.data;\n        if (res.isSuccess) {\n          const data = res.data\n          this.$store.commit(\"account/setToken\", data['token']);\n          this.$store.commit(\"account/setRefreshToken\", data['refreshToken']);\n          this.$store.commit(\"account/setExpireTime\", data['expiration']);\n          this.$store.commit(\"account/setUser\", {\n            id: data.userId,\n            account: data.account,\n            name: data.name,\n            avatar: data.avatar,\n            workDescribe: data.workDescribe\n          });\n\n          this.loadPermissions();\n        } else {\n          this.logout();\n        }\n      }).catch(() => {\n        db.remove(\"EXPIRE_TIME\");\n        db.remove(\"TOKEN\");\n        db.remove(\"USER_ROUTER\");\n        db.remove(\"PERMISSIONS\");\n\n        this.logout();\n      });\n    },\n    loadPermissions() {\n      loginApi.getResource().then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          const authorityResource = res.data;\n          const permissionsList = authorityResource.resourceList || [];\n          this.$store.commit(\"account/setPermissions\", permissionsList);\n          this.$store.commit(\"account/setAuthorityResource\", authorityResource);\n\n          setTimeout(() => {\n            location.reload();\n          }, 1000);\n        } else {\n          this.logout();\n        }\n      }).catch(() => {\n        this.logout();\n      });\n    }\n  }\n};\n",null]}