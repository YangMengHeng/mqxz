{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination/index'\nimport GlobalUserEdit from './edit'\nimport globalUserApi from '@/api/GlobalUser.js'\nimport tenantApi from '@/api/Tenant.js'\nimport UpdatePassword from \"./updatePassword\"\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport {downloadFile, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'GlobalUserManage',\n  directives: {elDragDialog},\n  components: {Pagination, GlobalUserEdit, UpdatePassword},\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        title: ''\n      },\n      updatePasswordDialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      tableKey: 0,\n      tenantList: [],\n      queryParams: initQueryParams({\n        model: {\n          tenantCode: '0000'\n        }\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      }\n    }\n  },\n  computed: {\n    currentUser() {\n      return this.$store.state.account.user\n    }\n  },\n  mounted() {\n    this.fetch()\n    this.loadTenantList()\n  },\n  methods: {\n    loadTenantList() {\n      tenantApi.list({status: 'NORMAL'}).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.tenantList = res.data\n        }\n      })\n    },\n    editClose() {\n      this.dialog.isVisible = false\n    },\n    editSuccess() {\n      this.search()\n    },\n    updatePasswordSuccess() {\n      this.search()\n    },\n    updatePasswordClose() {\n      this.updatePasswordDialog.isVisible = false\n    },\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model: {\n          tenantCode: '0000'\n        }\n      })\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = `导出租户${this.queryParams.model.tenantCode}的用户数据`\n      globalUserApi.preview(this.queryParams).then(response => {\n        const res = response.data\n        this.preview.isVisible = true\n        this.preview.context = res.data\n      })\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = `导出租户${this.queryParams.model.tenantCode}的用户数据`\n      globalUserApi.export(this.queryParams).then(response => {\n        downloadFile(response)\n      })\n    },\n    add() {\n      this.$refs.edit.setUser({\n        tenantCode: this.queryParams.model.tenantCode\n      })\n      this.$refs.edit.type = 'add'\n      this.dialog.title = this.$t('common.add')\n      this.dialog.isVisible = true\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        let contain = false\n        const userIds = []\n        let isSystemData = false\n        this.selection.forEach((item) => {\n          if (item.id === this.currentUser.id) {\n            contain = true\n            return\n          }\n          if (item.readonly) {\n            isSystemData = true\n            return\n          }\n          userIds.push(item.id)\n        })\n        if (isSystemData) {\n          this.$message({\n            message: this.$t('tips.readonly'),\n            type: 'warning'\n          })\n        } else if (contain) {\n          this.$message({\n            message: this.$t('tips.containCurrentUser'),\n            type: 'warning'\n          })\n          this.clearSelections()\n        } else {\n          this.delete(this.queryParams.model.tenantCode, userIds)\n        }\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(tenantCode, ids) {\n      globalUserApi.remove({tenantCode: tenantCode, 'ids[]': ids})\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n            this.search()\n          }\n        })\n    },\n    edit(row) {\n      if (row.readonly) {\n        this.$message({\n          message: this.$t('tips.readonly'),\n          type: 'warning'\n        })\n        return\n      }\n      row.tenantCode = this.queryParams.model.tenantCode\n      this.$refs.edit.setUser(row)\n      this.$refs.edit.type = 'edit'\n      this.dialog.title = this.$t('common.edit')\n      this.dialog.isVisible = true\n    },\n    updatePassword(row) {\n      row.tenantCode = this.queryParams.model.tenantCode\n      this.$refs.updatePassword.setUser(row)\n      this.updatePasswordDialog.type = \"edit\"\n      this.updatePasswordDialog.isVisible = true\n    },\n    fetch(params = {}) {\n      this.loading = true\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current\n      this.queryParams.size = params.size ? params.size : this.queryParams.size\n      if(!this.queryParams.model.tenantCode){\n        this.$message({\n          message: '请先选择租户',\n          type: 'error'\n        })\n        return ;\n      }\n      globalUserApi.page(this.queryParams).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.tableData = res.data\n        }\n      }).finally(() => {\n        this.loading = false\n        return true\n      })\n    },\n    codeChange() {\n      this.fetch()\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop\n      this.queryParams.order = val.order\n      if (this.queryParams.sort) {\n        this.search()\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {}\n          val[key.split('.')[1]] = filters[key][0]\n          this.queryParams.model[key.split('.')[0]] = val\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return\n      }\n      let flag = false\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true\n          this.$refs.table.toggleRowSelection(row)\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true)\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"index.vue","sourceRoot":"src/views/lamp/tenant/user","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <aside>\n      该菜单和用户管理的区别在于：这里只能查询到所有租户的超级管理员和内置用户。<br>\n      系统初始化时会初始化1个用户（内置超级管理员），内置用户用于开发者运营时使用，该账号尽量不告知租户用户\n      然后需要手动新增一个超级管理员，提供给租户使用。\n    </aside>\n    <div class=\"filter-container\">\n      <el-select\n        v-model=\"queryParams.model.tenantCode\"\n        placeholder=\"租户\"\n        class=\"filter-item search-item\"\n        @change=\"codeChange\"\n      >\n        <el-option v-for=\"(item, key, index) in tenantList\" :key=\"index\" :label=\"item.name + '(' + item.code + ')'\"\n                   :value=\"item.code\"/>\n      </el-select>\n      <el-input v-model=\"queryParams.model.account\" :placeholder=\"$t('table.user.account')\"\n                class=\"filter-item search-item\"/>\n      <el-input v-model=\"queryParams.model.name\" :placeholder=\"$t('table.user.name')\"\n                class=\"filter-item search-item\"/>\n      <el-date-picker\n        v-model=\"queryParams.timeRange\"\n        :range-separator=\"null\"\n        :start-placeholder=\"$t('table.createTime')\"\n        class=\"filter-item search-item date-range-item\"\n        format=\"yyyy-MM-dd HH:mm:ss\"\n        type=\"daterange\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button class=\"filter-item\" plain type=\"primary\" @click=\"search\">{{ $t('table.search') }}</el-button>\n      <el-button class=\"filter-item\" plain type=\"warning\" @click=\"reset\">{{ $t('table.reset') }}</el-button>\n      <el-button class=\"filter-item\" plain type=\"danger\" @click=\"add\">\n        {{ $t(\"table.add\") }}\n      </el-button>\n      <el-dropdown class=\"filter-item\" trigger=\"click\">\n        <el-button>\n          {{ $t('table.more') }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item icon=\"el-icon-delete\" @click.native=\"batchDelete\">{{ $t('table.delete') }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\">{{ $t(\"table.export\") }}</el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\">{{ $t(\"table.exportPreview\") }}</el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table\n      :key=\"tableKey\"\n      ref=\"table\"\n      v-loading=\"loading\"\n      :data=\"tableData.records\"\n      border\n      fit\n      row-key=\"id\"\n      style=\"width: 100%;\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" column-key=\"selectionId\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.user.account')\" :show-overflow-tooltip=\"true\" class-name=\"status-col\"\n                       prop=\"account\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.account }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.user.name')\" class-name=\"status-col\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.user.mobile')\" class-name=\"status-col\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.mobile }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.user.email')\" class-name=\"status-col\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.email }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.readonly')\" align=\"center\" prop=\"readonly\" sortable width=\"120px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.readonly ? $t(\"common.yes\") : $t(\"common.no\") }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.createTime')\" align=\"center\" prop=\"createTime\" sortable=\"custom\" width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.operation')\" column-key=\"operation\" align=\"center\"\n                       class-name=\"small-padding fixed-width\" width=\"150px\">\n        <template slot-scope=\"{row}\">\n<!--          <i class=\"el-icon-edit table-operation\" style=\"color: #2db7f5;\" @click=\"edit(row)\"/>-->\n          <i class=\"el-icon-delete table-operation\" style=\"color: #f50;\" @click=\"singleDelete(row)\"/>\n          <i\n            class=\"el-icon-refresh-left\"\n            style=\"color: #f50;\"\n            @click=\"updatePassword(row)\"\n          />\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination v-show=\"tableData.total>0\" :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\"\n                :total=\"Number(tableData.total)\" @pagination=\"fetch\"/>\n    <global-user-edit ref=\"edit\" :dialog-visible=\"dialog.isVisible\" :title=\"dialog.title\" @close=\"editClose\"\n                      @success=\"editSuccess\"/>\n    <update-password\n      ref=\"updatePassword\"\n      :dialog-visible=\"updatePasswordDialog.isVisible\"\n      :type=\"updatePasswordDialog.type\"\n      @close=\"updatePasswordClose\"\n      @success=\"updatePasswordSuccess\"\n    />\n    <el-dialog\n      v-el-drag-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"/>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Pagination from '@/components/Pagination/index'\nimport GlobalUserEdit from './edit'\nimport globalUserApi from '@/api/GlobalUser.js'\nimport tenantApi from '@/api/Tenant.js'\nimport UpdatePassword from \"./updatePassword\"\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport {downloadFile, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'GlobalUserManage',\n  directives: {elDragDialog},\n  components: {Pagination, GlobalUserEdit, UpdatePassword},\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        title: ''\n      },\n      updatePasswordDialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      tableKey: 0,\n      tenantList: [],\n      queryParams: initQueryParams({\n        model: {\n          tenantCode: '0000'\n        }\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      }\n    }\n  },\n  computed: {\n    currentUser() {\n      return this.$store.state.account.user\n    }\n  },\n  mounted() {\n    this.fetch()\n    this.loadTenantList()\n  },\n  methods: {\n    loadTenantList() {\n      tenantApi.list({status: 'NORMAL'}).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.tenantList = res.data\n        }\n      })\n    },\n    editClose() {\n      this.dialog.isVisible = false\n    },\n    editSuccess() {\n      this.search()\n    },\n    updatePasswordSuccess() {\n      this.search()\n    },\n    updatePasswordClose() {\n      this.updatePasswordDialog.isVisible = false\n    },\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model: {\n          tenantCode: '0000'\n        }\n      })\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = `导出租户${this.queryParams.model.tenantCode}的用户数据`\n      globalUserApi.preview(this.queryParams).then(response => {\n        const res = response.data\n        this.preview.isVisible = true\n        this.preview.context = res.data\n      })\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = `导出租户${this.queryParams.model.tenantCode}的用户数据`\n      globalUserApi.export(this.queryParams).then(response => {\n        downloadFile(response)\n      })\n    },\n    add() {\n      this.$refs.edit.setUser({\n        tenantCode: this.queryParams.model.tenantCode\n      })\n      this.$refs.edit.type = 'add'\n      this.dialog.title = this.$t('common.add')\n      this.dialog.isVisible = true\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        let contain = false\n        const userIds = []\n        let isSystemData = false\n        this.selection.forEach((item) => {\n          if (item.id === this.currentUser.id) {\n            contain = true\n            return\n          }\n          if (item.readonly) {\n            isSystemData = true\n            return\n          }\n          userIds.push(item.id)\n        })\n        if (isSystemData) {\n          this.$message({\n            message: this.$t('tips.readonly'),\n            type: 'warning'\n          })\n        } else if (contain) {\n          this.$message({\n            message: this.$t('tips.containCurrentUser'),\n            type: 'warning'\n          })\n          this.clearSelections()\n        } else {\n          this.delete(this.queryParams.model.tenantCode, userIds)\n        }\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(tenantCode, ids) {\n      globalUserApi.remove({tenantCode: tenantCode, 'ids[]': ids})\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n            this.search()\n          }\n        })\n    },\n    edit(row) {\n      if (row.readonly) {\n        this.$message({\n          message: this.$t('tips.readonly'),\n          type: 'warning'\n        })\n        return\n      }\n      row.tenantCode = this.queryParams.model.tenantCode\n      this.$refs.edit.setUser(row)\n      this.$refs.edit.type = 'edit'\n      this.dialog.title = this.$t('common.edit')\n      this.dialog.isVisible = true\n    },\n    updatePassword(row) {\n      row.tenantCode = this.queryParams.model.tenantCode\n      this.$refs.updatePassword.setUser(row)\n      this.updatePasswordDialog.type = \"edit\"\n      this.updatePasswordDialog.isVisible = true\n    },\n    fetch(params = {}) {\n      this.loading = true\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current\n      this.queryParams.size = params.size ? params.size : this.queryParams.size\n      if(!this.queryParams.model.tenantCode){\n        this.$message({\n          message: '请先选择租户',\n          type: 'error'\n        })\n        return ;\n      }\n      globalUserApi.page(this.queryParams).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.tableData = res.data\n        }\n      }).finally(() => {\n        this.loading = false\n        return true\n      })\n    },\n    codeChange() {\n      this.fetch()\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop\n      this.queryParams.order = val.order\n      if (this.queryParams.sort) {\n        this.search()\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {}\n          val[key.split('.')[1]] = filters[key][0]\n          this.queryParams.model[key.split('.')[0]] = val\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return\n      }\n      let flag = false\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true\n          this.$refs.table.toggleRowSelection(row)\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true)\n      }\n    }\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}