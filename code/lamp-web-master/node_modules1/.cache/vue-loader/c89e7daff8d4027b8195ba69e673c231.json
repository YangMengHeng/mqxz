{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\tenant\\tenant\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\tenant\\tenant\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\"\nimport TenantEdit from \"./edit\"\nimport TenantView from \"./view\"\nimport TenantConnection from \"./connection\"\nimport tenantApi from \"@/api/Tenant.js\"\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport { downloadFile, initEnums, initQueryParams } from '@/utils/commons'\nexport default {\n  name: \"TenantManage\",\n  directives: { elDragDialog },\n  components: { TenantConnection, Pagination, TenantEdit, TenantView },\n  filters: {\n    typeFilter (status) {\n      const map = {\n        CREATE: \"success\",\n        REGISTER: \"danger\"\n      }\n      return map[status] || \"info\"\n    },\n    statusFilter (status) {\n      const map = {\n        NORMAL: \"success\",\n        FORBIDDEN: \"warning\",\n        WAITING: \"info\",\n        REFUSE: \"danger\"\n      }\n      return map[status] || \"\"\n    }\n  },\n  data () {\n    return {\n      dialog: {\n        isVisible: false,\n        title: \"\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      tenantViewVisible: false,\n      tenantConnectionVisible: false,\n      tableKey: 0,\n      queryParams: initQueryParams({}),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {\n        TenantTypeEnum: {},\n        TenantStatusEnum: {}\n      }\n    }\n  },\n  computed: {\n    currentUser () {\n      return this.$store.state.account.user\n    },\n    typeFilterList () {\n      const list = []\n      for (const key in this.enums.TenantTypeEnum) {\n        list.push({\n          value: key,\n          text: this.enums.TenantTypeEnum[key]\n        })\n      }\n      return list\n    },\n    statusFilterList () {\n      const list = []\n      for (const key in this.enums.TenantStatusEnum) {\n        list.push({\n          value: key,\n          text: this.enums.TenantStatusEnum[key]\n        })\n      }\n      return list\n    }\n  },\n  mounted () {\n    initEnums(['TenantStatusEnum', 'TenantTypeEnum'], this.enums)\n    this.fetch()\n  },\n  methods: {\n    tenantConnectionClose () {\n      this.tenantConnectionVisible = false\n    },\n    viewClose () {\n      this.tenantViewVisible = false\n    },\n    editClose () {\n      this.dialog.isVisible = false\n    },\n    editSuccess () {\n      this.search()\n    },\n    onSelectChange (selection) {\n      this.selection = selection\n    },\n    search () {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset () {\n      this.queryParams = initQueryParams({})\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    exportExcelPreview () {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = '导出用户数据'\n      tenantApi.preview(this.queryParams).then(response => {\n        const res = response.data\n        this.preview.isVisible = true\n        this.preview.context = res.data\n      })\n    },\n    exportExcel () {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = '导出用户数据'\n      tenantApi.export(this.queryParams).then(response => {\n        downloadFile(response)\n      })\n    },\n    add () {\n      if (this.tableData.total > 5) {\n        this.$message({\n          message: '演示环境有限，最多支持创建5个租户，请在现有租户下创建用户进行测试',\n          type: \"warning\",\n          duration: 5000\n        })\n        return\n      }\n      this.$refs.edit.type = \"add\"\n      this.dialog.title = this.$t(\"common.add\")\n      this.dialog.isVisible = true\n    },\n    singleDelete (row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete () {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        })\n        return\n      }\n\n      const readonlyIndex = this.selection.findIndex(item => item.readonly)\n\n      if (readonlyIndex > -1) {\n        this.$message({\n          message: this.$t(\"tips.readonly\"),\n          type: \"warning\"\n        })\n        return\n      }\n\n      this.$confirm(\"删除租户数据后，会将租户库及其所有数据全部删除，建议调用禁用接口。\", this.$t(\"common.tips\"), {\n        confirmButtonText: \"禁用\",\n        cancelButtonText: \"删除\",\n        type: \"warning\",\n        closeOnClickModal: false,\n        closeOnPressEscape: false,\n        distinguishCancelAndClose: true\n      })\n        .then(() => {\n          const ids = []\n          let contain = false\n          this.selection.forEach(item => {\n            if (item.readonly) {\n              contain = true\n              return\n            }\n            ids.push(item.id)\n          })\n          if (contain) {\n            this.$message({\n              message: this.$t(\"tips.readonly\"),\n              type: \"warning\"\n            })\n          } else {\n            this.updateStatus(ids)\n          }\n        })\n        .catch((action) => {\n          if (action === 'cancel') {\n            const ids = []\n            let contain = false\n            this.selection.forEach(item => {\n              if (item.readonly) {\n                contain = true\n                return\n              }\n              ids.push(item.id)\n            })\n            if (contain) {\n              this.$message({\n                message: this.$t(\"tips.readonly\"),\n                type: \"warning\"\n              })\n            } else {\n              this.delete(ids)\n            }\n          }\n        })\n    },\n    clearSelections () {\n      this.$refs.table.clearSelection()\n    },\n    delete (ids) {\n      tenantApi.remove(ids).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          })\n          this.search()\n        }\n      })\n    },\n    updateStatus (ids) {\n      tenantApi.updateStatus({ 'ids[]': ids }).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.$message({\n            message: '禁用成功',\n            type: \"success\"\n          })\n          this.search()\n        }\n      })\n    },\n    changeStatus (row) {\n      let status = 'NORMAL'\n      if (row.status['code'] === 'NORMAL') {\n        status = 'FORBIDDEN'\n      } else {\n        status = 'NORMAL'\n      }\n      tenantApi.updateStatus({ 'ids[]': row.id, status: status }).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.$message({\n            message: row.status['code'] === 'NORMAL' ? '禁用成功' : '启用成功',\n            type: row.status['code'] === 'NORMAL' ? 'warning' : 'success'\n          })\n          this.search()\n        }\n      })\n    },\n    view (row) {\n      this.$refs.view.setTenant(row)\n      this.tenantViewVisible = true\n    },\n    edit (row) {\n      if (row.readonly) {\n        this.$message({\n          message: this.$t(\"tips.readonly\"),\n          type: \"warning\"\n        })\n        return\n      }\n      this.$refs.edit.setTenant(row)\n      this.$refs.edit.type = \"edit\"\n      this.dialog.title = this.$t(\"common.edit\")\n      this.dialog.isVisible = true\n    },\n    fetch (params = {}) {\n      this.loading = true\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current\n      this.queryParams.size = params.size ? params.size : this.queryParams.size\n\n      tenantApi.page(this.queryParams).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.tableData = res.data\n        }\n        // eslint-disable-next-line no-return-assign\n      }).finally(() => this.loading = false)\n    },\n    sortChange (val) {\n      this.queryParams.sort = val.prop\n      this.queryParams.order = val.order\n      if (this.queryParams.sort) {\n        this.search()\n      }\n    },\n    filterChange (filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {}\n          val[key.split('.')[1]] = filters[key][0]\n          this.queryParams.model[key.split('.')[0]] = val\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return\n      }\n      let flag = false\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true\n          this.$refs.table.toggleRowSelection(row)\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true)\n      }\n    },\n    initConnection (row) {\n      this.$refs.connection.setTenant(row)\n      this.tenantConnectionVisible = true\n    }\n  }\n}\n",null]}