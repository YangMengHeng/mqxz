{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\dashboard\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\dashboard\\index.vue","mtime":1689064321243},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport echarts from \"echarts\";\nimport { parseTime } from \"@/utils\";\nimport countTo from \"vue-count-to\";\nimport resize from \"@/components/Charts/mixins/resize\";\nimport clipboard from \"@/utils/clipboard\";\nimport { simplePie, simpleBar } from \"@/utils/chartsOption\";\nimport dashboardApi from \"@/api/Dashboard.js\";\n\nexport default {\n  name: \"Dashboard\",\n  components: { countTo },\n  filters: {\n    userAvatarFilter(name) {\n      return name.charAt(0);\n    }\n  },\n  mixins: [resize],\n  data() {\n    return {\n      activeName: \"first\",\n      welcomeMessage: \"\",\n      todayIp: 0,\n      todayVisit: 0,\n      totalVisit: 0,\n      chart: null,\n      chartOption: simpleBar(this.$t(\"common.visitTitle\") + \"\\n\"),\n      browserCountOption: simplePie(\"访问用户浏览器\"),\n      operatingSystemCountOption: simplePie(\"访问用户操作系统\"),\n      browserCountChart: null,\n      operatingSystemCountChart: null,\n      // 技术栈数据\n      projects: [\n        {\n          name: \"Spring全家桶\",\n          des: \"Spring Boot & SpringCloud & SpringCloudAlibaba\",\n          avatar: \"SB\"\n        },\n        {\n          name: \"Mybatis-Plus\",\n          des: \"Mybatis-plus：Mybatis 增强组件\",\n          avatar: \"MP\"\n        },\n        {\n          name: \"灰度发布\",\n          des: \"修改ribbon的负载均衡策略来实现来灰度发布与本地协同开发\",\n          avatar: \"灰\"\n        },\n        {\n          name: \"J2cache\",\n          des: \"二级缓存框架\",\n          avatar: \"J\"\n        },\n        {\n          name: \"文件存储API\",\n          des: \"封装文件接口，实现本地存储、阿里云、FastDFS存储的配置化\",\n          avatar: \"F\"\n        },\n        {\n          name: \"XXL-JOB\",\n          des: \"基于xxl-jobs增强的，分布式定时任务调度器\",\n          avatar: \"JOB\"\n        },\n        {\n          name: \"监控\",\n          des:\n            \"集成SpringBootAdmin、Zipkin、Redis、Mysql、定时任务等监控，对系统进行全方位监控护航\",\n          avatar: \"M\"\n        },\n        {\n          name: \"容器技术\",\n          des: \"基于Docker虚拟化容器技术，让迁移、部署更加方便快捷\",\n          avatar: \"C\"\n        }\n      ]\n    };\n  },\n  computed: {\n    donation() {\n      return require(\"@/assets/捐赠.png\");\n    },\n    user() {\n      return this.$store.state.account.user;\n    },\n    avatar() {\n      if (!this.user[\"avatar\"]) {\n        return require(`@/assets/avatar/default.jpg`);\n      } else {\n        if (\n          this.user[\"avatar\"].startsWith(\"http://\") ||\n          this.user[\"avatar\"].startsWith(\"https://\")\n        ) {\n          return this.user[\"avatar\"];\n        } else {\n          return require(`@/assets/avatar/${this.user.avatar}`);\n        }\n      }\n    }\n  },\n  mounted() {\n    this.welcomeMessage = this.welcome();\n    this.initIndexData();\n  },\n  methods: {\n    handleClipboard(text, event) {\n      clipboard(text, event);\n    },\n    // 欢迎语句\n    welcome() {\n      const date = new Date();\n      const hour = date.getHours();\n      const time =\n        hour < 6\n          ? this.$t(\"common.goodMorning\")\n          : hour <= 11\n          ? this.$t(\"common.goodMorning\")\n          : hour <= 13\n          ? this.$t(\"common.goodAfternoon\")\n          : hour <= 18\n          ? this.$t(\"common.goodAfternoon\")\n          : this.$t(\"common.goodEvening\");\n\n      const welcomeArr = Array.from({ length: 10 }, (v, i) =>\n        this.$t(\"common.randomMessage.\" + i)\n      );\n      const index = Math.floor(Math.random() * welcomeArr.length);\n      return `${time}, ${this.user.name}, ${welcomeArr[index]}`;\n    },\n    initIndexData: function() {\n      dashboardApi.getItem({}).then(response => {\n        const res = response.data;\n        const data = res.data;\n\n        this.todayIp = Number(data.todayLoginIv);\n        this.totalVisit = Number(data.totalLoginPv);\n        this.todayVisit = Number(data.todayLoginPv);\n      });\n\n      dashboardApi.getChart({}).then(response => {\n        const res = response.data;\n        const data = res.data;\n\n        this.tenDaysData(data);\n        this.browserCount(data.browserCount);\n        this.operatingSystemCount(data.operatingSystemCount);\n      });\n    },\n    tenDaysData(data) {\n      const tenVisitCount = [];\n      const dateArr = [];\n      const tenUserVisitCount = [];\n\n      for (let i = 9; i >= 0; i--) {\n        const time = parseTime(\n          new Date(new Date().getTime() - 24 * 60 * 60 * 1000 * i),\n          \"{y}-{m}-{d}\"\n        );\n        let contain = false;\n        for (const o of data.lastTenVisitCount) {\n          if (o.login_date === time) {\n            contain = true;\n            tenVisitCount.push(o.count);\n            break;\n          }\n        }\n        if (!contain) {\n          tenVisitCount.push(0);\n        }\n\n        let userContain = false;\n        for (const o of data.lastTenUserVisitCount) {\n          if (o.login_date === time) {\n            userContain = true;\n            tenUserVisitCount.push(o.count);\n            break;\n          }\n        }\n        if (!userContain) {\n          tenUserVisitCount.push(0);\n        }\n        dateArr.push(time);\n      }\n\n      this.chart = echarts.init(document.getElementById(\"visit-count-chart\"));\n      this.chartOption.legend.data = [\n        this.$t(\"common.you\"),\n        this.$t(\"common.total\")\n      ];\n      this.chartOption.xAxis.data = dateArr;\n      this.chartOption.series.push({\n        name: this.$t(\"common.you\"),\n        type: \"bar\",\n        barWidth: \"25%\",\n        color: \"rgb(0, 227, 150)\",\n        data: tenUserVisitCount\n      });\n      this.chartOption.series.push({\n        name: this.$t(\"common.total\"),\n        type: \"bar\",\n        barWidth: \"25%\",\n        color: \"rgb(0, 143, 251)\",\n        data: tenVisitCount\n      });\n      this.chart.setOption(this.chartOption);\n    },\n    browserCount(data) {\n      if (!data) {\n        return;\n      }\n      const legend_data = [];\n      const series_data = [];\n      data.forEach(item => {\n        const browser = item.browser || \"未知\";\n        series_data.push({ value: item.count, name: browser });\n        legend_data.push(browser);\n      });\n\n      this.browserCountOption.series[0].data = series_data;\n      this.browserCountOption.legend.data = legend_data;\n\n      this.browserCountChart = echarts.init(\n        document.getElementById(\"browser-count-chart\"),\n        \"westeros\"\n      );\n      this.browserCountChart.setOption(this.browserCountOption);\n    },\n    operatingSystemCount(data) {\n      if (!data) {\n        return;\n      }\n      const legend_data = [];\n      const series_data = [];\n      data.forEach(item => {\n        const browser = item.operating_system || \"未知\";\n        series_data.push({ value: item.count, name: browser });\n        legend_data.push(browser);\n      });\n\n      this.operatingSystemCountOption.series[0].data = series_data;\n      this.operatingSystemCountOption.legend.data = legend_data;\n\n      this.browserCountChart = echarts.init(\n        document.getElementById(\"operating-system-count-chart\"),\n        \"westeros\"\n      );\n      this.browserCountChart.setOption(this.operatingSystemCountOption);\n    }\n  }\n};\n",null]}