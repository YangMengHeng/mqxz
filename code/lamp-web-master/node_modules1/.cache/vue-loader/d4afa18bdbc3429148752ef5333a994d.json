{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\optLog\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1686711135008},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport {readUserAgent} from '@/utils/utils'\nimport optLogApi from '@/api/OptLog.js'\nimport {convertEnum} from '@/utils/utils'\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport { downloadFile, initEnums, initQueryParams } from '@/utils/commons'\n\nexport default {\n  name: 'OptLog',\n  directives: { elDragDialog },\n  components: {Pagination},\n  filters: {\n    timeFilter(time) {\n      if (time < 500) {\n        return 'success'\n      } else if (time < 1000) {\n        return ''\n      } else if (time < 1500) {\n        return 'warning'\n      } else {\n        return 'danger'\n      }\n    }\n  },\n  data() {\n    return {\n      tableKey: 0,\n      loading: false,\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      queryParams: initQueryParams({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        },\n        sort: 'createTime'\n      }),\n      selection: [],\n      tableData: {},\n      enums: {\n        LogType: {},\n        HttpMethod: {},\n      },\n      drawer: false,\n      currentRow: {}\n    }\n  },\n  computed: {\n    typeFilters() {\n      return convertEnum(this.enums.LogType)\n    },\n    httpMethodFilters() {\n      return convertEnum(this.enums.HttpMethod)\n    }\n  },\n  mounted() {\n    initEnums(['LogType', 'HttpMethod'], this.enums)\n    this.fetch()\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      optLogApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出操作日志';\n      optLogApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      optLogApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    clear(type) {\n      this.$confirm('确认要清除日志吗？', this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          optLogApi.clear({type: type}).then(response => {\n            const res = response.data;\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t(\"tips.deleteSuccess\"),\n                type: \"success\"\n              });\n            }\n\n            this.search();\n          });\n\n        })\n        .catch(() => {\n        });\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        const logIds = this.selection.map(item => item.id)\n        this.delete(logIds)\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(logIds) {\n      optLogApi.delete(logIds)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n          }\n          this.search()\n        })\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model: {\n          type: {\n            key: null\n          },\n          httpMethod: {\n            key: null\n          }\n        }\n      });\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    transTime(time) {\n      return `${time} ms`\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    onView(row) {\n      optLogApi.get(row.id) .then((response) => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.currentRow = res.data\n          this.drawer = true\n        }\n      })\n    },\n    closeDrawer(done) {\n      done()\n      this.currentRow = {}\n    },\n    uaForamt(row) {\n      let ua = readUserAgent(row.ua)\n      return ua.terminal + '  |  ' + ua.browser\n    }\n\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqfile":"index.vue","sourceRoot":"src/views/lamp/system/optLog","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.optLog.userName')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.userName\"/>\n      <el-input :placeholder=\"$t('table.optLog.requestIp')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.requestIp\"/>\n      <el-date-picker\n        :range-separator=\"null\"\n        :start-placeholder=\"$t('table.createTime')\"\n        class=\"filter-item search-item date-range-item\"\n        format=\"yyyy-MM-dd HH:mm:ss\"\n        type=\"datetimerange\"\n        v-model=\"queryParams.timeRange\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">{{ $t('table.search') }}</el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">{{ $t('table.reset') }}</el-button>\n      <el-dropdown class=\"filter-item\" trigger=\"click\" v-has-any-permission=\"['authority:optLog:delete','authority:optLog:export']\">\n        <el-button>\n          {{ $t('table.more') }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['authority:optLog:delete']\">{{ $t('table.delete') }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['authority:optLog:export']\">{{ $t('table.export') }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['authority:optLog:export']\">\n            {{ $t(\"table.exportPreview\") }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n      <el-dropdown class=\"filter-item\" trigger=\"click\" v-has-any-permission=\"['authority:optLog:delete']\">\n        <el-button>\n          清理日志\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"clear(1)\" >\n            保留一个月\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(2)\" >\n            保留三个月\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(3)\" >\n            保留六个月\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(4)\" >\n            保留一年\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(5)\" >\n            保留一千条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(6)\" >\n            保留一万条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(7)\" >\n            保留三万条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(8)\" >\n            保留十万条\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"clear(9)\" >\n            清空所有\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.optLog.userName')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"userName\"\n                       width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.userName }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.requestUri')\" :show-overflow-tooltip=\"true\" align=\"left\"\n                       min-width=\"120px\" prop=\"requestUri\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.requestUri }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        :filters=\"httpMethodFilters\"\n        :label=\"$t('table.optLog.httpMethod')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        column-key=\"httpMethod\"\n        prop=\"httpMethod\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.httpMethod.desc }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.requestIp')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"requestIp\" width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.requestIp }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.description')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       min-width=\"100px\" prop=\"description\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.description }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :filter-multiple=\"false\" :filters=\"typeFilters\" :label=\"$t('table.optLog.type')\"\n                       :show-overflow-tooltip=\"true\" align=\"center\" column-key=\"type\" prop=\"type\" width=\"80px\">\n        <template slot-scope=\"scope\">\n          <span>\n            <el-badge :type=\"(scope.row.type && scope.row.type.code == 'OPT')? 'success':'danger' \" class=\"item\"\n                      is-dot/>\n            {{ scope.row.type.desc }}\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.actionMethod')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       min-width=\"120px\" prop=\"actionMethod\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.classPath + '.' + scope.row.actionMethod }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('table.optLog.startTime')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"startTime\" sortable=\"custom\" width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.startTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.optLog.consumingTime')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"consumingTime\" width=\"110px\">\n        <template slot-scope=\"{row}\">\n          <el-tag :type=\"row.consumingTime | timeFilter\">{{ transTime(row.consumingTime) }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column :formatter=\"uaForamt\" label=\"终端 | 浏览器\" prop=\"ua\" width=\"120\"/>\n      <el-table-column :label=\"$t('table.operation')\" column-key=\"operation\" align=\"center\" class-name=\"small-padding fixed-width\"\n                       width=\"110px\">\n        <template slot-scope=\"{row}\">\n          <i @click=\"singleDelete(row)\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\"\n             v-has-permission=\"['authority:optLog:delete']\"/>\n          <i @click=\"onView(row)\" class=\"el-icon-view table-operation\" style=\"color: #87d068;\"\n             v-has-permission=\"['authority:optLog:view']\"/>\n          <el-link class=\"no-perm\" v-has-no-permission=\"['authority:optLog:delete','authority:optLog:view']\">{{ $t('tips.noPermission') }}\n          </el-link>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\" :total=\"Number(tableData.total)\"\n                @pagination=\"fetch\" v-show=\"tableData.total>0\"/>\n\n    <el-drawer :before-close=\"closeDrawer\" :visible.sync=\"drawer\" direction=\"rtl\" v-model=\"currentRow\">\n      <div class=\"clearfix\" slot=\"title\">\n        <el-badge :type=\"(currentRow.type && currentRow.type.code == 'OPT')? 'success':'danger' \" class=\"item\" is-dot/>\n        {{ currentRow.type ? currentRow.type.desc : '' }}\n        {{ currentRow.requestUri }}\n      </div>\n      <el-scrollbar style=\"height: 100%;\">\n        <el-card class=\"box-card\">\n          <div class=\"box-item\">\n            <span class=\"field-label\">执行方法:</span>\n            <aside>{{ currentRow.classPath + '.' + currentRow.actionMethod + '()' }}</aside>\n          </div>\n\n          <div class=\"box-item\">\n            <span class=\"field-label\">请求参数:</span>\n            <aside style>{{ currentRow.params }}</aside>\n          </div>\n\n          <div class=\"box-item\">\n            <span class=\"field-label\">响应信息:</span>\n            <aside style>\n              <pre style=\"white-space: pre-wrap;\">{{ currentRow.result ? JSON.stringify(JSON.parse(currentRow.result), null, 4) : '' }}</pre>\n            </aside>\n          </div>\n          <div class=\"box-item\" v-if=\"currentRow.type && currentRow.type['code']==='EX'\">\n            <span class=\"field-label\">错误信息:</span>\n            <aside>{{ currentRow.exDetail }}</aside>\n          </div>\n        </el-card>\n      </el-scrollbar>\n    </el-drawer>\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n      v-el-drag-dialog\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n<script>\n  import Pagination from '@/components/Pagination'\n  import {readUserAgent} from '@/utils/utils'\n  import optLogApi from '@/api/OptLog.js'\n  import {convertEnum} from '@/utils/utils'\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import { downloadFile, initEnums, initQueryParams } from '@/utils/commons'\n\n  export default {\n    name: 'OptLog',\n    directives: { elDragDialog },\n    components: {Pagination},\n    filters: {\n      timeFilter(time) {\n        if (time < 500) {\n          return 'success'\n        } else if (time < 1000) {\n          return ''\n        } else if (time < 1500) {\n          return 'warning'\n        } else {\n          return 'danger'\n        }\n      }\n    },\n    data() {\n      return {\n        tableKey: 0,\n        loading: false,\n        preview: {\n          isVisible: false,\n          context: ''\n        },\n        queryParams: initQueryParams({\n          model: {\n            type: {\n              key: null\n            },\n            httpMethod: {\n              key: null\n            }\n          },\n          sort: 'createTime'\n        }),\n        selection: [],\n        tableData: {},\n        enums: {\n          LogType: {},\n          HttpMethod: {},\n        },\n        drawer: false,\n        currentRow: {}\n      }\n    },\n    computed: {\n      typeFilters() {\n        return convertEnum(this.enums.LogType)\n      },\n      httpMethodFilters() {\n        return convertEnum(this.enums.HttpMethod)\n      }\n    },\n    mounted() {\n      initEnums(['LogType', 'HttpMethod'], this.enums)\n      this.fetch()\n    },\n    methods: {\n      onSelectChange(selection) {\n        this.selection = selection\n      },\n      exportExcelPreview() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出操作日志';\n        optLogApi.preview(this.queryParams).then(response => {\n          const res = response.data;\n          this.preview.isVisible = true;\n          this.preview.context = res.data;\n        });\n      },\n      exportExcel() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出操作日志';\n        optLogApi.export(this.queryParams).then(response => {\n          downloadFile(response);\n        });\n      },\n      fetch(params = {}) {\n        this.loading = true;\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n        optLogApi.page(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      clear(type) {\n        this.$confirm('确认要清除日志吗？', this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n          .then(() => {\n            optLogApi.clear({type: type}).then(response => {\n              const res = response.data;\n              if (res.isSuccess) {\n                this.$message({\n                  message: this.$t(\"tips.deleteSuccess\"),\n                  type: \"success\"\n                });\n              }\n\n              this.search();\n            });\n\n          })\n          .catch(() => {\n          });\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection()\n        this.$refs.table.toggleRowSelection(row, true)\n        this.batchDelete()\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t('tips.noDataSelected'),\n            type: 'warning'\n          })\n          return\n        }\n        this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          const logIds = this.selection.map(item => item.id)\n          this.delete(logIds)\n        }).catch(() => {\n          this.clearSelections()\n        })\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection()\n      },\n      delete(logIds) {\n        optLogApi.delete(logIds)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.deleteSuccess'),\n                type: 'success'\n              })\n            }\n            this.search()\n          })\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        })\n      },\n      reset() {\n        this.queryParams = initQueryParams({\n          model: {\n            type: {\n              key: null\n            },\n            httpMethod: {\n              key: null\n            }\n          }\n        });\n        this.$refs.table.clearSort()\n        this.$refs.table.clearFilter()\n        this.search()\n      },\n      transTime(time) {\n        return `${time} ms`\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      cellClick (row, column) {\n        if (column['columnKey'] === \"operation\") {\n          return;\n        }\n        let flag = false;\n        this.selection.forEach((item)=>{\n          if(item.id === row.id) {\n            flag = true;\n            this.$refs.table.toggleRowSelection(row);\n          }\n        })\n\n        if(!flag){\n          this.$refs.table.toggleRowSelection(row, true);\n        }\n      },\n      onView(row) {\n        optLogApi.get(row.id) .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.currentRow = res.data\n            this.drawer = true\n          }\n        })\n      },\n      closeDrawer(done) {\n        done()\n        this.currentRow = {}\n      },\n      uaForamt(row) {\n        let ua = readUserAgent(row.ua)\n        return ua.terminal + '  |  ' + ua.browser\n      }\n\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n  .item {\n    margin-top: 7px;\n  }\n\n  .drawer-item {\n    margin-top: 6px;\n  }\n\n  .box-item {\n    margin-top: 15px;\n\n    aside {\n      word-wrap: break-word;\n      margin-top: 15px;\n    }\n\n    pre {\n      white-space: pre-wrap;\n      font-size: 0.8em;\n      line-height: 1.5em;\n    }\n  }\n</style>\n"]}]}