{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\dictionary\\edit.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport dictionaryApi from '@/api/Dictionary.js'\n\n\nexport default {\n  name: 'DictionaryEdit',\n  components: {},\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'add'\n    }\n  },\n  data () {\n    return {\n      dictionary: this.initDictionary(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        type: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 1, max: 64, message: this.$t('rules.range4to10'), trigger: 'blur' }\n        ],\n        label: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 1, max: 64, message: this.$t('rules.range4to10'), trigger: 'blur' }\n        ],\n        describe: [\n          { min: 1, max: 200, message: this.$t('rules.range4to10'), trigger: 'blur' }\n        ],\n        state: { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    },\n    title () {\n      return this.type === 'add' ? this.$t('common.add') : this.$t('common.edit')\n    }\n  },\n  watch: {\n\n  },\n  mounted () {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initDictionary () {\n      return {\n        id: '',\n        label: '',\n        type: '',\n        state: true\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    setDictionary (val) {\n      const vm = this\n      if (val) {\n        vm.dictionary = { ...val }\n      }\n    },\n    close () {\n      this.$emit('close')\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.dictionary = this.initDictionary()\n    },\n    submitForm () {\n      const vm = this\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          vm.editSubmit()\n        } else {\n          return false\n        }\n      })\n    },\n    editSubmit () {\n      const vm = this\n      if (vm.type === 'add') {\n        vm.save()\n      } else {\n        vm.update()\n      }\n    },\n    save () {\n      const vm = this\n      dictionaryApi.saveType(this.dictionary)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            vm.isVisible = false\n            vm.$message({\n              message: vm.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            vm.$emit('success')\n          }\n        })\n    },\n    update () {\n      dictionaryApi.updateType(this.dictionary)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        })\n    }\n  }\n}\n",null]}