{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\activiti\\modelManager\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\activiti\\modelManager\\index.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport ModelEdit from \"./edit\";\nimport activitiApi from \"@/api/Activiti.js\";\nimport {  initQueryParams } from '@/utils/commons'\nfunction subForm() {\n  return {\n    name: '',\n    key: '',\n    description: '',\n  }\n}\nexport default {\n  name: \"ModelManage\",\n  components: { Pagination, ModelEdit },\n  filters: {},\n  data() {\n    return {\n      dialogVisible: false,\n      addVisible: false,\n      dialogImageUrl: \"\",\n      subForm: subForm(),\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model:{}\n      }),\n      url: process.env.VUE_APP_DEV_REQUEST_DOMAIN_PREFIX,\n      selection: [],\n      loading: false,\n      tableData: {\n        records: [],\n        total: 0\n      },\n    };\n  },\n  computed: {},\n  mounted() {\n    this.fetch();\n  },\n  methods: {\n    fetch(params = {}) {\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      activitiApi.pageModel(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData.records = res.data.records;\n          this.tableData.total = res.data.total;\n        }\n      }).finally(() => this.loading = false);\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    editClose() {\n      this.reset()\n    },\n    addClose() {\n      this.addVisible = false\n      this.subForm = subForm()\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model:{}\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleAddView() {\n      this.addVisible = true\n    },\n    singleAdd() {\n      const vm = this\n      activitiApi.addModel(vm.subForm).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.createSuccess\"),\n              type: 'success'\n            });\n            vm.$refs.modelEdit.open(res.data)\n            vm.addClose()\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally();\n    },\n    singleEdit(row) {\n      this.$refs.modelEdit.open(row.id)\n    },\n    singleDelete(row) {\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n        .then(() => {\n          this.delete(row);\n        })\n        .catch(() => {\n          this.reset();\n        });\n    },\n    singlePublish(row) {\n      const vm = this\n      this.$confirm(this.$t(\"tips.confirmPublish\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n        .then(() => {\n          this.publish(row);\n        })\n        .catch((err) => {\n          this.reset();\n        });\n    },\n    singleExport(row) {\n      const vm = this\n      this.export(row);\n    },\n    export(row) {\n      const vm = this\n      var url = `/api/activiti/static/exportXMLByModelId?modelId=${row.id}`;\n      window.location.href = url;\n    },\n    delete(row) {\n      activitiApi.deleteModel({modelId: row.id}).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: 'success'\n            });\n            this.search();\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally();\n    },\n    publish(row) {\n      activitiApi.publishModel({modelId: row.id}).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.publishSuccess\"),\n              type: 'success'\n            });\n            this.search();\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally(() => this.loading = false);\n    }\n  }\n};\n",null]}