{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport smsTaskApi from '@/api/SmsTask.js'\nimport {convertEnum} from '@/utils/utils'\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport FileImport from \"@/components/lamp/Import\"\nimport {downloadFile, initMsgEnums, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'StationManage',\n  directives: {elDragDialog},\n  components: {Pagination, FileImport},\n  filters: {\n    statusFilter(status) {\n      const map = {\n        WAITING: 'danger',\n        SUCCESS: 'success',\n        FAIL: 'error'\n      }\n      return map[status] || 'success'\n    }\n  },\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/msg/smsTask/import`\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({}),\n      selection: [],\n      // 以下已修改\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {\n        TaskStatus: {}\n      },\n    }\n  },\n  computed: {\n    statusFilters() {\n      return convertEnum(this.enums.TaskStatus)\n    }\n  },\n  watch: {\n    '$route'(to) {\n      if (to.path === '/resources/sms') {\n        this.fetch();\n      }\n    }\n  },\n  mounted() {\n    initMsgEnums(['TaskStatus'], this.enums)\n    this.fetch()\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = initQueryParams({});\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      smsTaskApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      smsTaskApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        const ids = []\n        this.selection.forEach((u) => {\n          ids.push(u.id)\n        })\n        this.delete(ids)\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(ids) {\n      smsTaskApi.delete( ids)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n          }\n          this.search()\n        })\n    },\n    copy(row) {\n      this.$router.push({\n        path: '/resources/sms/edit',\n        query: {\n          id: row.id,\n          type: 'copy'\n        }\n      })\n    },\n    view(row) {\n      this.$router.push({\n        path: '/resources/sms/edit',\n        query: {\n          id: row.id,\n          type: 'view'\n        }\n      })\n    },\n    edit(row) {\n      this.$router.push({\n        path: '/resources/sms/edit',\n        query: {\n          id: row.id,\n          type: 'edit'\n        }\n      })\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      smsTaskApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {};\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2JA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/lamp/resources/sms","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.smsTask.templateId')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.templateId\"/>\n      <el-input :placeholder=\"$t('table.smsTask.topic')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.topic\"/>\n      <el-input :placeholder=\"$t('table.smsTask.content')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.content\"/>\n      <el-date-picker\n        :range-separator=\"null\"\n        class=\"filter-item search-item date-range-item\"\n        end-placeholder=\"结束日期\"\n        format=\"yyyy-MM-dd HH:mm:ss\"\n        start-placeholder=\"开始日期\"\n        type=\"daterange\"\n        v-model=\"queryParams.timeRange\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">{{ $t('table.search') }}</el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">{{ $t('table.reset') }}</el-button>\n      <router-link :to=\"{path:'/resources/sms/edit',query: {type: 'add'}}\">\n        <el-button class=\"filter-item\" plain type=\"danger\" v-has-permission=\"['msg:sms:add']\">\n          {{ $t(\"table.add\") }}\n        </el-button>\n      </router-link>\n      <el-dropdown class=\"filter-item\" trigger=\"click\" v-has-any-permission=\"['msg:sms:delete','msg:sms:export']\">\n        <el-button>\n          {{ $t('table.more') }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['msg:sms:delete']\">{{ $t('table.delete')\n            }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['msg:sms:export']\">\n            {{ $t(\"table.export\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['msg:sms:export']\">\n            {{ $t(\"table.exportPreview\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"importExcel\" v-has-permission=\"['msg:sms:import']\">\n            {{ $t(\"table.import\") }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.smsTask.templateId')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"templateId\" width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.templateId }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.smsTask.topic')\" :show-overflow-tooltip=\"true\" align=\"center\" width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.topic }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.smsTask.content')\" :show-overflow-tooltip=\"true\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.content }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :filter-multiple=\"false\" :filters=\"statusFilters\" :label=\"$t('table.smsTask.status')\"\n                       :show-overflow-tooltip=\"true\" class-name=\"status-col\" column-key=\"status\" width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span v-if=\"scope.row.sendTime\">\n            <el-tooltip :content=\"'发送时间: '+ scope.row.sendTime\" class=\"item\" effect=\"dark\" placement=\"top\">\n              <el-tag :type=\"scope.row.status | statusFilter\">{{ scope.row.status.desc }}</el-tag>\n            </el-tooltip>\n          </span>\n          <span v-else>\n            <el-tag :type=\"scope.row.status | statusFilter\">{{ scope.row.status.desc }}</el-tag>\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        :filters=\"[{ text: $t('common.yes'), value: 'true' }, { text: $t('common.no'), value: 'false' }]\"\n        :label=\"$t('table.smsTask.draft')\"\n        align=\"center\"\n        column-key=\"draft\"\n        prop=\"draft\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>\n            <el-tag :type=\"scope.row.draft?'danger':'success'\" slot>{{ scope.row.draft ? '是' : '否' }}</el-tag>\n          </span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.createTime')\" align=\"center\" sortable=\"custom\" prop=\"createTime\" width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.operation')\" align=\"center\" column-key=\"operation\"\n                       class-name=\"small-padding fixed-width\" width=\"130px\">\n        <template slot-scope=\"{row}\">\n          <i @click=\"view(row)\" class=\"el-icon-view table-operation\" style=\"color: #2db7f5;\"\n             v-hasPermission=\"['msg:sms:view']\"/>\n          <i @click=\"edit(row)\" class=\"el-icon-edit table-operation\" style=\"color: #2db7f5;\"\n             v-hasPermission=\"['msg:sms:edit']\" v-show=\"row.draft\"/>\n          <i @click=\"copy(row)\" class=\"el-icon-copy-document table-operation\" style=\"color: #909399;\"\n             v-hasPermission=\"['msg:sms:add']\"/>\n          <i @click=\"singleDelete(row)\" class=\"el-icon-delete table-operation\" style=\"color: #f50;\"\n             v-hasPermission=\"['msg:sms:delete']\"/>\n          <el-link class=\"no-perm\"\n                   v-has-no-permission=\"['msg:sms:edit','msg:sms:delete','msg:sms:add','msg:sms:view']\">\n            {{ $t('tips.noPermission') }}\n          </el-link>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\" :total=\"Number(tableData.total)\"\n                @pagination=\"fetch\" v-show=\"tableData.total>0\"/>\n    <file-import\n      :dialog-visible=\"fileImport.isVisible\"\n      :type=\"fileImport.type\"\n      :action=\"fileImport.action\" accept=\".xls,.xlsx\"\n      @close=\"importClose\"\n      @success=\"importSuccess\"\n      ref=\"import\"\n    />\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n      v-el-drag-dialog\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\n  import Pagination from '@/components/Pagination'\n  import smsTaskApi from '@/api/SmsTask.js'\n  import {convertEnum} from '@/utils/utils'\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import FileImport from \"@/components/lamp/Import\"\n  import {downloadFile, initMsgEnums, initQueryParams} from '@/utils/commons'\n\n  export default {\n    name: 'StationManage',\n    directives: {elDragDialog},\n    components: {Pagination, FileImport},\n    filters: {\n      statusFilter(status) {\n        const map = {\n          WAITING: 'danger',\n          SUCCESS: 'success',\n          FAIL: 'error'\n        }\n        return map[status] || 'success'\n      }\n    },\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: 'add'\n        },\n        preview: {\n          isVisible: false,\n          context: ''\n        },\n        fileImport: {\n          isVisible: false,\n          type: \"import\",\n          action: `${process.env.VUE_APP_BASE_API}/msg/smsTask/import`\n        },\n        tableKey: 0,\n        queryParams: initQueryParams({}),\n        selection: [],\n        // 以下已修改\n        loading: false,\n        tableData: {\n          total: 0\n        },\n        enums: {\n          TaskStatus: {}\n        },\n      }\n    },\n    computed: {\n      statusFilters() {\n        return convertEnum(this.enums.TaskStatus)\n      }\n    },\n    watch: {\n      '$route'(to) {\n        if (to.path === '/resources/sms') {\n          this.fetch();\n        }\n      }\n    },\n    mounted() {\n      initMsgEnums(['TaskStatus'], this.enums)\n      this.fetch()\n    },\n    methods: {\n      onSelectChange(selection) {\n        this.selection = selection\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        })\n      },\n      reset() {\n        this.queryParams = initQueryParams({});\n        this.$refs.table.clearSort()\n        this.$refs.table.clearFilter()\n        this.search()\n      },\n      exportExcelPreview() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出用户数据';\n        smsTaskApi.preview(this.queryParams).then(response => {\n          const res = response.data;\n          this.preview.isVisible = true;\n          this.preview.context = res.data;\n        });\n      },\n      exportExcel() {\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n        this.queryParams.extra.fileName = '导出用户数据';\n        smsTaskApi.export(this.queryParams).then(response => {\n          downloadFile(response);\n        });\n      },\n      importExcel() {\n        this.fileImport.type = \"upload\";\n        this.fileImport.isVisible = true;\n        this.$refs.import.setModel(false);\n      },\n      importSuccess() {\n        this.search();\n      },\n      importClose() {\n        this.fileImport.isVisible = false;\n      },\n      singleDelete(row) {\n        this.$refs.table.clearSelection()\n        this.$refs.table.toggleRowSelection(row, true)\n        this.batchDelete()\n      },\n      batchDelete() {\n        if (!this.selection.length) {\n          this.$message({\n            message: this.$t('tips.noDataSelected'),\n            type: 'warning'\n          })\n          return\n        }\n        this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n          confirmButtonText: this.$t('common.confirm'),\n          cancelButtonText: this.$t('common.cancel'),\n          type: 'warning'\n        }).then(() => {\n          const ids = []\n          this.selection.forEach((u) => {\n            ids.push(u.id)\n          })\n          this.delete(ids)\n        }).catch(() => {\n          this.clearSelections()\n        })\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection()\n      },\n      delete(ids) {\n        smsTaskApi.delete( ids)\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.deleteSuccess'),\n                type: 'success'\n              })\n            }\n            this.search()\n          })\n      },\n      copy(row) {\n        this.$router.push({\n          path: '/resources/sms/edit',\n          query: {\n            id: row.id,\n            type: 'copy'\n          }\n        })\n      },\n      view(row) {\n        this.$router.push({\n          path: '/resources/sms/edit',\n          query: {\n            id: row.id,\n            type: 'view'\n          }\n        })\n      },\n      edit(row) {\n        this.$router.push({\n          path: '/resources/sms/edit',\n          query: {\n            id: row.id,\n            type: 'edit'\n          }\n        })\n      },\n      fetch(params = {}) {\n        this.loading = true;\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n        smsTaskApi.page(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          if (key.includes('.')) {\n            const val = {};\n            val[key.split('.')[1]] = filters[key][0];\n            this.queryParams.model[key.split('.')[0]] = val;\n          } else {\n            this.queryParams.model[key] = filters[key][0]\n          }\n        }\n        this.search()\n      },\n      cellClick (row, column) {\n        if (column['columnKey'] === \"operation\") {\n          return;\n        }\n        let flag = false;\n        this.selection.forEach((item)=>{\n          if(item.id === row.id) {\n            flag = true;\n            this.$refs.table.toggleRowSelection(row);\n          }\n        })\n        if(!flag){\n          this.$refs.table.toggleRowSelection(row, true);\n        }\n      }\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}