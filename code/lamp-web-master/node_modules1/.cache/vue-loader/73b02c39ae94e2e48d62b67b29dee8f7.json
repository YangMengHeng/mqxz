{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\tenant\\datasourceConfig\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\tenant\\datasourceConfig\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport datasourceConfigApi from '@/api/DatasourceConfig.js'\nimport globalUserApi from \"@/api/GlobalUser\";\n\nexport default {\n  name: 'DatasourceConfigEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      type: 'add',\n      datasourceConfig: this.initDatasourceConfig(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      roles: [],\n      rules: {\n        name: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        username: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        password: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ],\n        url: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if(value.indexOf('lamp_base_') > 0 || value.indexOf('lamp_extend_') > 0) {\n                callback()\n              } else {\n                callback('数据库必须包含 lamp_base 或者 lamp_extend ')\n              }\n            }, trigger: 'blur'\n          }\n        ],\n        driverClassName: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' }\n        ]\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted () {\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initDatasourceConfig () {\n      return {\n        id: '',\n        name: '1111-基础服务',\n        username: '',\n        password: '',\n        driverClassName: 'com.mysql.cj.jdbc.Driver',\n        url: 'jdbc:mysql://127.0.0.1:3306/lamp_base_1111?serverTimezone=CTT&characterEncoding=utf8&useUnicode=true&useSSL=false&autoReconnect=true&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true'\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    setDatasourceConfig (val) {\n      this.datasourceConfig = { ...val }\n      if (this.type === 'copy') {\n        this.datasourceConfig.id = null\n      }\n    },\n    close () {\n      this.$emit('close')\n    },\n    submitForm () {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          if (this.type === 'edit') {\n            this.update()\n          } else {\n            this.save()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    save () {\n      datasourceConfigApi.save(this.datasourceConfig)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        }).finally(() => {\n          return true\n        })\n    },\n    update () {\n      datasourceConfigApi.update(this.datasourceConfig)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        }).finally(() => {\n          return true\n        })\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.datasourceConfig = this.initDatasourceConfig()\n    }\n  }\n}\n",null]}