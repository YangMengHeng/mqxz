{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\gateway\\ratelimiter\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\gateway\\ratelimiter\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport RateLimiterEdit from \"./edit\";\nimport rateLimiterApi from \"@/api/RateLimiter.js\";\nimport RateLimiterImport from \"@/components/lamp/Import\"\nimport {downloadFile, loadEnums, initDicts, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"RateLimiterManage\",\n  directives: { elDragDialog },\n  components: { Pagination, RateLimiterEdit, RateLimiterImport},\n  filters: {\n\n  },\n  data() {\n    return {\n      // 编辑\n      dialog: {\n          isVisible: false,\n          type: \"add\"\n      },\n      // 预览\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      // 导入\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/gateway/rateLimiter/import`\n      },\n      tableKey: 0,\n      queryParams: initQueryParams(),\n      selection: [],\n      loading: false,\n      tableData: {\n          total: 0\n      },\n      // 枚举\n      enums: {\n      },\n      // 字典\n      dicts: {\n      }\n    };\n  },\n  computed: {\n  },\n  watch: {\n  },\n  mounted() {\n    this.fetch();\n\n    // 初始化字典和枚举\n    const enumList = [];\n    const dictList = [];\n    loadEnums(enumList, this.enums, 'gateway');\n    initDicts(dictList, this.dicts);\n  },\n  methods: {\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    search() {\n      this.fetch({\n          ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams();\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据';\n      rateLimiterApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出数据';\n      rateLimiterApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n            message: this.$t(\"tips.noDataSelected\"),\n            type: \"warning\"\n        });\n        return;\n      }\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n      })\n      .then(() => {\n        const ids = this.selection.map(u => u.id);\n        this.delete(ids);\n      })\n      .catch(() => {\n        this.clearSelections();\n      });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete(ids) {\n      rateLimiterApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: \"success\"\n          });\n          this.search();\n        }\n      });\n    },\n    add() {\n      this.dialog.type = \"add\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setRateLimiter({ enums: this.enums, dicts: this.dicts});\n    },\n    copy(row) {\n      row.id = null;\n      this.$refs.edit.setRateLimiter({row, enums: this.enums, dicts: this.dicts});\n      this.dialog.type = \"copy\";\n      this.dialog.isVisible = true;\n    },\n    edit(row) {\n      this.$refs.edit.setRateLimiter({row, enums: this.enums, dicts: this.dicts});\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      rateLimiterApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange (filters) {\n      for (const key in filters) {\n        if(key.includes('.')) {\n          const val = { };\n          val[key.split('.')[1]] = filters[key][0];\n          this.queryParams.model[key.split('.')[0]] = val;\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n  }\n};\n",null]}