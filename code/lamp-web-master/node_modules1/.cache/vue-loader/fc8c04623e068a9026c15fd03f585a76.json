{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\online\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\system\\online\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport onlineApi from '@/api/Online.js'\n\nexport default {\n  name: 'OnlineList',\n  directives: {},\n  components: {},\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      loading: false,\n      selection: [],\n      queryParams: {\n        name: ''\n      },\n      tableData: [],\n    }\n  },\n  computed: {},\n  mounted() {\n    this.fetch()\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    fetch() {\n      this.loading = true;\n      onlineApi.list(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = { name: ''}\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    sortChange(val) {\n      this.search();\n    },\n    filterChange(filters) {\n      // for (const key in filters) {\n      //   if (key.includes('.')) {\n      //     const val = {};\n      //     val[key.split('.')[1]] = filters[key][0];\n      //     this.queryParams.model[key.split('.')[0]] = val;\n      //   } else {\n      //     this.queryParams.model[key] = filters[key][0]\n      //   }\n      // }\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    onDelete(row) {\n      const param = {\n        userId: row.userId,\n        userToken: row.token,\n        clientId: row.clientId,\n      }\n      onlineApi.t(param).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: \"操作成功\",\n            type: 'success'\n          });\n          this.search();\n        } else {\n          this.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      })\n    },\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"index.vue","sourceRoot":"src/views/lamp/system/online","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.online.name')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.name\"/>\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">{{ $t('table.search') }}</el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">{{ $t('table.reset') }}</el-button>\n    </div>\n    <el-table\n      :data=\"tableData\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" column-key=\"selectionId\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.online.account')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"account\"\n                       width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.account }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.online.name')\" :show-overflow-tooltip=\"true\" align=\"left\"\n                       width=\"100px\" prop=\"name\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.online.token')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"token\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.token }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.online.clientId')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       width=\"100px\" prop=\"clientId\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.clientId }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('table.online.location')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       width=\"170px\" prop=\"location\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.location }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('table.online.loginIp')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"loginIp\" sortable=\"custom\" width=\"100px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.loginIp }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.online.loginTime')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"consumingTime\" width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.loginTime }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('table.operation')\" column-key=\"operation\" align=\"center\"\n                       class-name=\"small-padding fixed-width\"\n                       width=\"110px\">\n        <template slot-scope=\"{row}\">\n          <i @click=\"onDelete(row)\" class=\"el-icon-delete table-operation\" style=\"color: #87d068;\"\n             v-has-permission=\"['authority:online:delete']\"/>\n          <el-link class=\"no-perm\" v-has-no-permission=\"['authority:online:delete']\">\n            {{ $t('tips.noPermission') }}\n          </el-link>\n        </template>\n      </el-table-column>\n    </el-table>\n\n  </div>\n</template>\n<script>\nimport onlineApi from '@/api/Online.js'\n\nexport default {\n  name: 'OnlineList',\n  directives: {},\n  components: {},\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      loading: false,\n      selection: [],\n      queryParams: {\n        name: ''\n      },\n      tableData: [],\n    }\n  },\n  computed: {},\n  mounted() {\n    this.fetch()\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    fetch() {\n      this.loading = true;\n      onlineApi.list(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = { name: ''}\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    sortChange(val) {\n      this.search();\n    },\n    filterChange(filters) {\n      // for (const key in filters) {\n      //   if (key.includes('.')) {\n      //     const val = {};\n      //     val[key.split('.')[1]] = filters[key][0];\n      //     this.queryParams.model[key.split('.')[0]] = val;\n      //   } else {\n      //     this.queryParams.model[key] = filters[key][0]\n      //   }\n      // }\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    onDelete(row) {\n      const param = {\n        userId: row.userId,\n        userToken: row.token,\n        clientId: row.clientId,\n      }\n      onlineApi.t(param).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: \"操作成功\",\n            type: 'success'\n          });\n          this.search();\n        } else {\n          this.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      })\n    },\n  }\n}\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}