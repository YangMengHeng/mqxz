{"remainingRequest":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\system\\application\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\src\\views\\lamp\\system\\application\\edit.vue","mtime":1689132408453},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web1(原版)\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\nimport applicationApi from '@/api/Application.js'\nimport {initEnums} from '@/utils/commons.js'\n\nexport default {\n  name: 'ApplicationEdit',\n  components: {},\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    type: {\n      type: String,\n      default: 'add'\n    }\n  },\n  data() {\n    return {\n      remoteApplicationLoading: false,\n      application: this.initApplication(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      orgList: [],\n      enums: {ApplicationAppTypeEnum: {}},\n      applicationList: [],\n      rules: {\n        name: [\n          {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n          {min: 1, max: 255, message: this.$t('rules.range4to10'), trigger: 'blur'}\n        ],\n        state: {required: true, message: this.$t('rules.require'), trigger: 'blur'}\n\n      },\n      serviceList: [\n        {id: \"lamp-authority-server\", name: \"权限服务\"},\n        {id: \"lamp-file-server\", name: \"文件服务\"},\n        {id: \"lamp-msg-server\", name: \"消息服务\"},\n        {id: \"lamp-demo-server\", name: \"演示服务\"},\n        {id: \"lamp-order-server\", name: \"订单服务\"},\n      ]\n    }\n  },\n  computed: {\n    isVisible: {\n      get() {\n        return this.dialogVisible\n      },\n      set() {\n        this.close()\n        this.reset()\n      }\n    },\n    title() {\n      return this.type === 'add' ? this.$t('common.add') : this.$t('common.edit')\n    }\n  },\n  watch: {},\n  mounted() {\n    initEnums(['ApplicationAppTypeEnum'], this.enums)\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initApplication() {\n      return {\n        id: '',\n        clientId: '',\n        clientSecret: '',\n        website: '',\n        name: '',\n        icon: '',\n        describe: '',\n        state: true,\n      }\n    },\n    initWidth() {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    loadListOptions({callback}) {\n      callback()\n    },\n    setApplication(val, orgs) {\n      const vm = this\n      vm.orgList = orgs\n      if (val) {\n        vm.application = {...val}\n      }\n    },\n    close() {\n      this.$emit('close')\n    },\n    reset() {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.application = this.initApplication()\n    },\n    submitForm() {\n      const vm = this\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          vm.editSubmit()\n        } else {\n          return false\n        }\n      })\n    },\n    editSubmit() {\n      const vm = this\n      if (vm.type === 'add') {\n        vm.save()\n      } else {\n        vm.update()\n      }\n    },\n    save() {\n      const vm = this\n      applicationApi.save(this.application)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            vm.isVisible = false\n            vm.$message({\n              message: vm.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            vm.$emit('success')\n          }\n        })\n    },\n    update() {\n      applicationApi.update(this.application)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        })\n    }\n  }\n}\n",null]}