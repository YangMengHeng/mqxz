{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\index.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination/index'\nimport GlobalUserEdit from './edit'\nimport globalUserApi from '@/api/GlobalUser.js'\nimport tenantApi from '@/api/Tenant.js'\nimport UpdatePassword from \"./updatePassword\"\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport {downloadFile, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: 'GlobalUserManage',\n  directives: {elDragDialog},\n  components: {Pagination, GlobalUserEdit, UpdatePassword},\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        title: ''\n      },\n      updatePasswordDialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      tableKey: 0,\n      tenantList: [],\n      queryParams: initQueryParams({\n        model: {\n          tenantCode: '0000'\n        }\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      }\n    }\n  },\n  computed: {\n    currentUser() {\n      return this.$store.state.account.user\n    }\n  },\n  mounted() {\n    this.fetch()\n    this.loadTenantList()\n  },\n  methods: {\n    loadTenantList() {\n      tenantApi.list({status: 'NORMAL'}).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.tenantList = res.data\n        }\n      })\n    },\n    editClose() {\n      this.dialog.isVisible = false\n    },\n    editSuccess() {\n      this.search()\n    },\n    updatePasswordSuccess() {\n      this.search()\n    },\n    updatePasswordClose() {\n      this.updatePasswordDialog.isVisible = false\n    },\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model: {\n          tenantCode: '0000'\n        }\n      })\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = `导出租户${this.queryParams.model.tenantCode}的用户数据`\n      globalUserApi.preview(this.queryParams).then(response => {\n        const res = response.data\n        this.preview.isVisible = true\n        this.preview.context = res.data\n      })\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n      this.queryParams.extra.fileName = `导出租户${this.queryParams.model.tenantCode}的用户数据`\n      globalUserApi.export(this.queryParams).then(response => {\n        downloadFile(response)\n      })\n    },\n    add() {\n      this.$refs.edit.setUser({\n        tenantCode: this.queryParams.model.tenantCode\n      })\n      this.$refs.edit.type = 'add'\n      this.dialog.title = this.$t('common.add')\n      this.dialog.isVisible = true\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true)\n      this.batchDelete()\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t('tips.noDataSelected'),\n          type: 'warning'\n        })\n        return\n      }\n      this.$confirm(this.$t('tips.confirmDelete'), this.$t('common.tips'), {\n        confirmButtonText: this.$t('common.confirm'),\n        cancelButtonText: this.$t('common.cancel'),\n        type: 'warning'\n      }).then(() => {\n        let contain = false\n        const userIds = []\n        let isSystemData = false\n        this.selection.forEach((item) => {\n          if (item.id === this.currentUser.id) {\n            contain = true\n            return\n          }\n          if (item.readonly) {\n            isSystemData = true\n            return\n          }\n          userIds.push(item.id)\n        })\n        if (isSystemData) {\n          this.$message({\n            message: this.$t('tips.readonly'),\n            type: 'warning'\n          })\n        } else if (contain) {\n          this.$message({\n            message: this.$t('tips.containCurrentUser'),\n            type: 'warning'\n          })\n          this.clearSelections()\n        } else {\n          this.delete(this.queryParams.model.tenantCode, userIds)\n        }\n      }).catch(() => {\n        this.clearSelections()\n      })\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    delete(tenantCode, ids) {\n      globalUserApi.remove({tenantCode: tenantCode, 'ids[]': ids})\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t('tips.deleteSuccess'),\n              type: 'success'\n            })\n            this.search()\n          }\n        })\n    },\n    edit(row) {\n      if (row.readonly) {\n        this.$message({\n          message: this.$t('tips.readonly'),\n          type: 'warning'\n        })\n        return\n      }\n      row.tenantCode = this.queryParams.model.tenantCode\n      this.$refs.edit.setUser(row)\n      this.$refs.edit.type = 'edit'\n      this.dialog.title = this.$t('common.edit')\n      this.dialog.isVisible = true\n    },\n    updatePassword(row) {\n      row.tenantCode = this.queryParams.model.tenantCode\n      this.$refs.updatePassword.setUser(row)\n      this.updatePasswordDialog.type = \"edit\"\n      this.updatePasswordDialog.isVisible = true\n    },\n    fetch(params = {}) {\n      this.loading = true\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0]\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1]\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current\n      this.queryParams.size = params.size ? params.size : this.queryParams.size\n      if(!this.queryParams.model.tenantCode){\n        this.$message({\n          message: '请先选择租户',\n          type: 'error'\n        })\n        return ;\n      }\n      globalUserApi.page(this.queryParams).then(response => {\n        const res = response.data\n        if (res.isSuccess) {\n          this.tableData = res.data\n        }\n      }).finally(() => {\n        this.loading = false\n        return true\n      })\n    },\n    codeChange() {\n      this.fetch()\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop\n      this.queryParams.order = val.order\n      if (this.queryParams.sort) {\n        this.search()\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          const val = {}\n          val[key.split('.')[1]] = filters[key][0]\n          this.queryParams.model[key.split('.')[0]] = val\n        } else {\n          this.queryParams.model[key] = filters[key][0]\n        }\n      }\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return\n      }\n      let flag = false\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true\n          this.$refs.table.toggleRowSelection(row)\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true)\n      }\n    }\n  }\n}\n",null]}