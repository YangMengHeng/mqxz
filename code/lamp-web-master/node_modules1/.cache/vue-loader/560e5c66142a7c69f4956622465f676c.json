{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\activiti\\modelManager\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\activiti\\modelManager\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport ModelEdit from \"./edit\";\nimport activitiApi from \"@/api/Activiti.js\";\nimport {  initQueryParams } from '@/utils/commons'\nfunction subForm() {\n  return {\n    name: '',\n    key: '',\n    description: '',\n  }\n}\nexport default {\n  name: \"ModelManage\",\n  components: { Pagination, ModelEdit },\n  filters: {},\n  data() {\n    return {\n      dialogVisible: false,\n      addVisible: false,\n      dialogImageUrl: \"\",\n      subForm: subForm(),\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model:{}\n      }),\n      url: process.env.VUE_APP_DEV_REQUEST_DOMAIN_PREFIX,\n      selection: [],\n      loading: false,\n      tableData: {\n        records: [],\n        total: 0\n      },\n    };\n  },\n  computed: {},\n  mounted() {\n    this.fetch();\n  },\n  methods: {\n    fetch(params = {}) {\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      activitiApi.pageModel(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData.records = res.data.records;\n          this.tableData.total = res.data.total;\n        }\n      }).finally(() => this.loading = false);\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    editClose() {\n      this.reset()\n    },\n    addClose() {\n      this.addVisible = false\n      this.subForm = subForm()\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model:{}\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleAddView() {\n      this.addVisible = true\n    },\n    singleAdd() {\n      const vm = this\n      activitiApi.addModel(vm.subForm).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.createSuccess\"),\n              type: 'success'\n            });\n            vm.$refs.modelEdit.open(res.data)\n            vm.addClose()\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally();\n    },\n    singleEdit(row) {\n      this.$refs.modelEdit.open(row.id)\n    },\n    singleDelete(row) {\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n        .then(() => {\n          this.delete(row);\n        })\n        .catch(() => {\n          this.reset();\n        });\n    },\n    singlePublish(row) {\n      const vm = this\n      this.$confirm(this.$t(\"tips.confirmPublish\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n        .then(() => {\n          this.publish(row);\n        })\n        .catch((err) => {\n          this.reset();\n        });\n    },\n    singleExport(row) {\n      const vm = this\n      this.export(row);\n    },\n    export(row) {\n      const vm = this\n      var url = `/api/activiti/static/exportXMLByModelId?modelId=${row.id}`;\n      window.location.href = url;\n    },\n    delete(row) {\n      activitiApi.deleteModel({modelId: row.id}).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: 'success'\n            });\n            this.search();\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally();\n    },\n    publish(row) {\n      activitiApi.publishModel({modelId: row.id}).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.publishSuccess\"),\n              type: 'success'\n            });\n            this.search();\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally(() => this.loading = false);\n    }\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/lamp/activiti/modelManager","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input\n        :placeholder=\"$t('table.activitiModel.name')\"\n        clearable\n        class=\"filter-item search-item\"\n        v-model=\"queryParams.model.name\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">\n        {{ $t(\"table.search\") }}\n      </el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">\n        {{ $t(\"table.reset\") }}\n      </el-button>\n      <el-button @click=\"singleAddView\" class=\"filter-item\" plain type=\"danger\">\n        {{ $t(\"table.add\") }}\n      </el-button>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column\n        :label=\"$t('table.activitiModel.name')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        prop=\"name\"\n        width=\"250px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.activitiModel.key')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"300px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.key }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.activitiModel.description')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"300px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ JSON.parse(scope.row.metaInfo).description }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.activitiModel.version')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"120px\"\n      >\n        <template slot-scope=\"scope\">\n          <el-tag type=\"success\">v{{ scope.row.version }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.activitiModel.status')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"120px\"\n      >\n        <template slot-scope=\"scope\">\n          <el-tag :type=\"scope.row.deploymentId ? 'success' : 'warning'\">{{ scope.row.deploymentId ? \"已发布\" : \"未发布\" }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.createTime')\"\n        align=\"center\"\n        :show-overflow-tooltip=\"true\"\n        width=\"170px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.activitiModel.lastUpdateTime')\"\n        align=\"center\"\n        prop=\"createTime\"\n        sortable=\"custom\"\n        width=\"170px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.lastUpdateTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.operation')\"\n        align=\"center\"\n        column-key=\"operation\"\n        class-name=\"small-padding fixed-width\"\n        width=\"150px\"\n        fixed=\"right\"\n      >\n        <template slot-scope=\"{ row }\">\n          <i\n            title=\"编辑模型\"\n            @click=\"singleEdit(row)\"\n            class=\"el-icon-setting table-operation\"\n            style=\"color: #f50;\"\n          />\n          <i\n            title=\"流程发布\"\n            @click=\"singlePublish(row)\"\n            class=\"el-icon-s-promotion table-operation\"\n            style=\"color: #00e1ff;\"\n          />\n          <i\n            title=\"导出流程ZIP\"\n            @click=\"singleExport(row)\"\n            class=\"el-icon-download table-operation\"\n            style=\"color: #59ff00;\"\n          />\n          <i\n            title=\"删除\"\n            @click=\"singleDelete(row)\"\n            class=\"el-icon-delete table-operation\"\n            style=\"color: #ff0000;\"\n          />\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination\n      :limit.sync=\"queryParams.size\"\n      :page.sync=\"queryParams.current\"\n      :total=\"Number(tableData.total)\"\n      @pagination=\"fetch\"\n      v-show=\"tableData.total > 0\"\n      align=\"center\"\n    />\n    <ModelEdit\n      ref=\"edit\"\n    />\n    <ModelEdit ref=\"modelEdit\"></ModelEdit>\n\n    <el-dialog\n      title=\"新增模型\"\n      :visible.sync=\"addVisible\"\n      @close=\"addClose\">\n      <div style=\"margin-top:30px;\">\n        <el-form id=\"model\" :model=\"subForm\" label-position=\"left\" label-width=\"80px\" ref=\"form\" :inline=\"true\"  style=\"text-align:left\">\n          <el-row  style=\"margin: 0 auto;width:80%;\">\n            <el-col :span=\"12\">\n              <el-form-item label=\"模型名:\" prop=\"name\">\n                <el-input\n                  v-model=\"subForm.name\"/>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"12\">\n              <el-form-item label=\"模型KEY:\" prop=\"key\">\n                <el-input\n                  v-model=\"subForm.key\"/>\n              </el-form-item>\n            </el-col>\n            <el-col :span=\"12\">\n              <el-form-item label=\"描述:\" prop=\"description\">\n                <el-input\n                  v-model=\"subForm.description\"/>\n              </el-form-item>\n            </el-col>\n          </el-row>\n          <el-form-item size=\"large\" align=\"center\" style=\"text-align:center;width:100%\">\n            <el-button @click=\"addClose\" plain type=\"warning\">{{ $t('common.cancel') }}</el-button>\n            <el-button @click=\"singleAdd\" plain type=\"primary\">{{ $t('common.confirm') }}</el-button>\n          </el-form-item>\n        </el-form>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Pagination from \"@/components/Pagination\";\nimport ModelEdit from \"./edit\";\nimport activitiApi from \"@/api/Activiti.js\";\nimport {  initQueryParams } from '@/utils/commons'\nfunction subForm() {\n  return {\n    name: '',\n    key: '',\n    description: '',\n  }\n}\nexport default {\n  name: \"ModelManage\",\n  components: { Pagination, ModelEdit },\n  filters: {},\n  data() {\n    return {\n      dialogVisible: false,\n      addVisible: false,\n      dialogImageUrl: \"\",\n      subForm: subForm(),\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model:{}\n      }),\n      url: process.env.VUE_APP_DEV_REQUEST_DOMAIN_PREFIX,\n      selection: [],\n      loading: false,\n      tableData: {\n        records: [],\n        total: 0\n      },\n    };\n  },\n  computed: {},\n  mounted() {\n    this.fetch();\n  },\n  methods: {\n    fetch(params = {}) {\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      activitiApi.pageModel(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData.records = res.data.records;\n          this.tableData.total = res.data.total;\n        }\n      }).finally(() => this.loading = false);\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    editClose() {\n      this.reset()\n    },\n    addClose() {\n      this.addVisible = false\n      this.subForm = subForm()\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        model:{}\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    singleAddView() {\n      this.addVisible = true\n    },\n    singleAdd() {\n      const vm = this\n      activitiApi.addModel(vm.subForm).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.createSuccess\"),\n              type: 'success'\n            });\n            vm.$refs.modelEdit.open(res.data)\n            vm.addClose()\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally();\n    },\n    singleEdit(row) {\n      this.$refs.modelEdit.open(row.id)\n    },\n    singleDelete(row) {\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n        .then(() => {\n          this.delete(row);\n        })\n        .catch(() => {\n          this.reset();\n        });\n    },\n    singlePublish(row) {\n      const vm = this\n      this.$confirm(this.$t(\"tips.confirmPublish\"), this.$t(\"common.tips\"), {\n          confirmButtonText: this.$t(\"common.confirm\"),\n          cancelButtonText: this.$t(\"common.cancel\"),\n          type: \"warning\"\n        })\n        .then(() => {\n          this.publish(row);\n        })\n        .catch((err) => {\n          this.reset();\n        });\n    },\n    singleExport(row) {\n      const vm = this\n      this.export(row);\n    },\n    export(row) {\n      const vm = this\n      var url = `/api/activiti/static/exportXMLByModelId?modelId=${row.id}`;\n      window.location.href = url;\n    },\n    delete(row) {\n      activitiApi.deleteModel({modelId: row.id}).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.deleteSuccess\"),\n              type: 'success'\n            });\n            this.search();\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally();\n    },\n    publish(row) {\n      activitiApi.publishModel({modelId: row.id}).then(response => {\n        const res = response.data;\n          if (res.isSuccess) {\n            this.$message({\n              message: this.$t(\"tips.publishSuccess\"),\n              type: 'success'\n            });\n            this.search();\n          } else {\n            this.$message({\n              message: response.msg,\n              type: 'error'\n            });\n          }\n      }).finally(() => this.loading = false);\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n.file-breadcrumb {\n  margin: 10px 0px 20px;\n}\n.page {\n  text-align: center;\n  margin-top: 5px;\n}\n.button-list {\n  margin-right: 10px;\n  font-size: 20px !important;\n  color: #22a2ed;\n  vertical-align: middle;\n}\n.title {\n  color: #777;\n  font-size: 2em;\n  border-bottom: 1px solid #e5e5e5;\n}\ndiv{\n  &.hover-effect {\n    cursor: pointer;\n    transition: background 0.3s;\n\n    &:hover {\n      background: rgba(0, 0, 0, 0.025);\n    }\n  }\n}\n\n::v-deep.el-table:not(.el-table--scrollable-x) {\n    .el-table__fixed-right {\n        height: calc(100% - 1px) !important;\n    }\n}\n</style>\n"]}]}