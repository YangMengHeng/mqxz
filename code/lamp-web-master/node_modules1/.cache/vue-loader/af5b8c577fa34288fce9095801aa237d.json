{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\area\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\system\\area\\index.vue","mtime":1689129834675},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport areaApi from \"@/api/Area.js\";\nimport { initDicts } from '@/utils/commons'\n\nexport default {\n  name: \"AreaManager\",\n  data() {\n    return {\n      label: \"\",\n      areaTree: [],\n      dicts:{AREA_LEVEL:[]},\n      area: this.initArea(),\n      rules: {\n        label: [\n          {\n            required: true,\n            message: this.$t(\"rules.require\"),\n            trigger: \"blur\"\n          },\n          {\n            min: 1,\n            max: 255,\n            message: this.$t(\"rules.range3to10\"),\n            trigger: \"blur\"\n          }\n        ],\n        code: [\n          {\n            required: true,\n            message: this.$t(\"rules.require\"),\n            trigger: \"blur\"\n          },\n          {\n            min: 1,\n            max: 255,\n            message: this.$t(\"rules.range3to10\"),\n            trigger: \"blur\"\n          },\n          {\n            validator: (rule, value, callback) => {\n              areaApi.check(value, this.area.id).then(response => {\n                const res = response.data;\n                if (res.data) {\n                  callback('编码重复');\n                } else {\n                  callback();\n                }\n              }).catch(() => callback())\n            },\n            trigger: \"blur\"\n          }\n        ]\n      }\n    };\n  },\n  mounted() {\n    initDicts('AREA_LEVEL', this.dicts);\n  },\n  methods: {\n    initArea() {\n      return {\n        id: \"\",\n        code: \"\",\n        label: \"\",\n        parentId: 0,\n        parentLabel: \"\",\n        fullName: \"\",\n        longitude: \"\",\n        latitude: \"\",\n        source: \"\",\n        level: \"PROVINCE\",\n        sortValue: 0\n      };\n    },\n    initAreaTree(parentId = 0) {\n      areaApi.linkage({parentId: parentId}).then(response => {\n        const res = response.data;\n        this.areaTree = res.data;\n      });\n    },\n    loadTree(node, resolve) {\n      areaApi.linkage({parentId: node.data.id}).then(response => {\n        const res = response.data;\n        resolve(res.data);\n      });\n    },\n    handleNumChange(val) {\n      this.area.sortValue = val;\n    },\n    filterNode(value, data) {\n      if (!value) return true;\n      return data.label.indexOf(value) !== -1;\n    },\n    nodeClick(data) {\n      this.area = {...data};\n\n      const parent = this.$refs.areaTree.getNode(data.parentId);\n      if (parent) {\n        this.area.parentLabel = parent.label;\n      }\n\n      this.$refs.form.clearValidate();\n    },\n    add() {\n      this.resetForm();\n      const checked = this.$refs.areaTree.getCheckedNodes();\n      if (checked.length > 1) {\n        this.$message({\n          message: this.$t(\"tips.onlyChooseOne\"),\n          type: \"warning\"\n        });\n      } else if (checked.length > 0) {\n        this.area.parentId = checked[0].id;\n        this.area.parentLabel = checked[0].label;\n      } else {\n        this.area.parentId = 0;\n        this.area.parentLabel = \"\";\n      }\n    },\n    deleteArea() {\n      const checked = this.$refs.areaTree.getCheckedKeys();\n      if (checked.length === 0) {\n        this.$message({\n          message: this.$t(\"tips.noNodeSelected\"),\n          type: \"warning\"\n        });\n      } else {\n        this.$confirm(\n          this.$t(\"tips.confirmDeleteNode\"),\n          this.$t(\"common.tips\"),\n          {\n            confirmButtonText: this.$t(\"common.confirm\"),\n            cancelButtonText: this.$t(\"common.cancel\"),\n            type: \"warning\"\n          }\n        )\n          .then(() => {\n            areaApi.delete(checked).then(response => {\n              const res = response.data;\n              if (res.isSuccess) {\n                this.$message({\n                  message: this.$t(\"tips.deleteSuccess\"),\n                  type: \"success\"\n                });\n              }\n              this.reset();\n            });\n          })\n          .catch(() => {\n            this.$refs.areaTree.setCheckedKeys([]);\n          });\n      }\n    },\n    search() {\n      this.$refs.areaTree.filter(this.label);\n    },\n    reset() {\n      this.initAreaTree();\n      this.label = \"\";\n      this.resetForm();\n    },\n    submit() {\n      this.$refs.form.validate(valid => {\n        if (valid) {\n          if (this.area.id) {\n            this.update();\n          } else {\n            this.save();\n          }\n        } else {\n          return false;\n        }\n      });\n    },\n    save() {\n      areaApi.save({...this.area}).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.createSuccess\"),\n            type: \"success\"\n          });\n        }\n\n        this.reset();\n      });\n    },\n    update() {\n      areaApi.update({...this.area}).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.updateSuccess\"),\n            type: \"success\"\n          });\n        }\n        this.reset();\n      });\n    },\n    resetForm() {\n      this.$refs.form.clearValidate();\n      this.$refs.form.resetFields();\n      this.area = this.initArea();\n    }\n  }\n};\n",null]}