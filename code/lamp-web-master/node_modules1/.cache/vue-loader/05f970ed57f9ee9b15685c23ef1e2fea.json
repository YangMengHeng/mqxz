{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\org\\user\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\org\\user\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport Treeselect from \"@riophae/vue-treeselect\";\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\";\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport FileImport from \"@/components/lamp/Import\"\nimport UserEdit from \"./edit\";\nimport UpdatePassword from \"./updatePassword\";\nimport UserView from \"./view\";\nimport userApi from \"@/api/User.js\";\nimport orgApi from \"@/api/Org.js\";\nimport {convertDict, convertEnum} from '@/utils/utils'\nimport {downloadFile, initDicts, initEnums, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"UserManage\",\n  directives: {elDragDialog},\n  components: {Pagination, UserEdit, UserView, Treeselect, FileImport, UpdatePassword},\n  filters: {\n    userAvatarFilter(name) {\n      return name.charAt(0);\n    },\n    sexFilter(state) {\n      const map = {\n        W: \"success\",\n        M: \"danger\",\n        N: \"info\"\n      };\n      return map[state] || \"info\";\n    },\n    stateFilter(state) {\n      const map = {\n        false: \"danger\",\n        true: \"success\"\n      };\n      return map[state] || \"success\";\n    }\n  },\n  data() {\n    return {\n      orgList: [],\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      updatePasswordDialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/authority/user/import`,\n        exportErrorUrl: `/authority/user/exportError`\n      },\n      userViewVisible: false,\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {\n          nation: [],\n          education: [],\n          positionStatus: [],\n          orgId: null,\n          station: '',\n          sex: [],\n        }\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {\n        Sex: {}\n      },\n      dicts: {\n        NATION: [],\n        POSITION_STATUS: [],\n        EDUCATION: [],\n      }\n    };\n  },\n  computed: {\n    currentUser() {\n      return this.$store.state.account.user;\n    },\n    sexList() {\n      return convertEnum(this.enums.Sex)\n    },\n    nationList() {\n      return convertDict(this.dicts.NATION)\n    },\n    educationList() {\n      return convertDict(this.dicts.EDUCATION)\n    },\n    positionStatusList() {\n      return convertDict(this.dicts.POSITION_STATUS)\n    }\n  },\n  watch: {\n    $route() {\n      if (this.$route.path === \"/user/user\") {\n        this.initOrg();\n      }\n    }\n  },\n  mounted() {\n    initEnums('Sex', this.enums);\n    initDicts(['NATION', 'POSITION_STATUS', 'EDUCATION'], this.dicts);\n    this.fetch();\n    this.initOrg();\n  },\n  methods: {\n    initOrg() {\n      orgApi.allTree({state: true}).then(response => {\n        const res = response.data;\n        this.orgList = res.data;\n      });\n    },\n    myAvatar(avatar) {\n      if (!avatar) {\n        return require(`@/assets/avatar/default.jpg`);\n      } else {\n        if (avatar.startsWith(\"http://\") || avatar.startsWith(\"https://\")) {\n          return avatar;\n        } else {\n          return require(`@/assets/avatar/${avatar}`);\n        }\n      }\n    },\n    viewClose() {\n      this.userViewVisible = false;\n    },\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    updatePasswordSuccess() {\n      this.search();\n    },\n    updatePasswordClose() {\n      this.updatePasswordDialog.isVisible = false;\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    loadListOptions({callback}) {\n      callback();\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams,\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        nation: [],\n        education: [],\n        positionStatus: [],\n        orgId: null,\n        station: '',\n        sex: []\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      userApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      userApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      let contain = false;\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          const ids = [];\n          this.selection.forEach(u => {\n            if (u.id === this.currentUser.id) {\n              contain = true;\n              return;\n            }\n            ids.push(u.id);\n          });\n          if (contain) {\n            this.$message({\n              message: this.$t(\"tips.containCurrentUser\"),\n              type: \"warning\"\n            });\n            this.clearSelections();\n          } else {\n            this.delete(ids);\n          }\n        })\n        .catch(() => {\n          this.clearSelections();\n        });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete(ids) {\n      userApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n        }\n        this.search();\n      });\n    },\n    add() {\n      this.dialog.type = \"add\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setUser(false, this.orgList, this.dicts, this.enums);\n    },\n    view(row) {\n      this.$refs.view.setUser(row, this.orgList, this.dicts, this.enums);\n      this.userViewVisible = true;\n    },\n    edit(row) {\n      this.$refs.edit.setUser(row, this.orgList, this.dicts, this.enums);\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    updatePassword(row) {\n      this.$refs.editPassword.setUser(row);\n      this.updatePasswordDialog.type = \"edit\";\n      this.updatePasswordDialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      userApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          this.queryParams.model[key.split('.')[0]] = filters[key];\n        } else {\n          this.queryParams.model[key] = filters[key]\n        }\n        if (key === 'state'){\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n};\n",null]}