{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\org\\org\\index.vue?vue&type=style&index=0&id=39d8fd9f&lang=scss&scoped=true&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\org\\org\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\css-loader\\index.js","mtime":1686711135550},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1686711138278},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\postcss-loader\\src\\index.js","mtime":1686711136346},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\sass-loader\\dist\\cjs.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.org {\n  margin: 10px;\n\n  .app-container {\n    margin: 0 0 10px 0 !important;\n  }\n}\n\n.el-card.is-always-shadow {\n  box-shadow: none;\n}\n\n.el-card {\n  border-radius: 0;\n  border: none;\n\n  .el-card__header {\n    padding: 10px 20px !important;\n    border-bottom: 1px solid #f1f1f1 !important;\n  }\n}\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgVA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/lamp/org/org","sourcesContent":["<template>\n  <div class=\"org\">\n    <el-row :gutter=\"10\">\n      <el-col :sm=\"12\" :xs=\"24\">\n        <div class=\"app-container\">\n          <div class=\"filter-container\">\n            <el-input :placeholder=\"$t('table.org.label')\" class=\"filter-item search-item\" v-model=\"label\"/>\n            <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">{{ $t('table.search') }}</el-button>\n            <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">{{ $t('table.reset') }}</el-button>\n            <el-button @click=\"add\" class=\"filter-item\" plain type=\"danger\" v-has-permission=\"['authority:org:add']\">{{\n              $t(\"table.add\") }}\n            </el-button>\n            <el-dropdown class=\"filter-item\" trigger=\"click\"\n                         v-has-any-permission=\"['authority:org:delete','authority:org:export', 'authority:org:import']\">\n              <el-button>\n                {{ $t('table.more') }}\n                <i class=\"el-icon-arrow-down el-icon--right\"/>\n              </el-button>\n              <el-dropdown-menu slot=\"dropdown\">\n                <el-dropdown-item @click.native=\"deleteOrg\" v-has-permission=\"['authority:org:delete']\">{{ $t('table.delete') }}\n                </el-dropdown-item>\n                <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['authority:org:export']\">\n                  {{ $t(\"table.export\") }}\n                </el-dropdown-item>\n                <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['authority:org:export']\">\n                  {{ $t(\"table.exportPreview\") }}\n                </el-dropdown-item>\n                <el-dropdown-item @click.native=\"importExcel\" v-has-permission=\"['authority:org:import']\">\n                  {{ $t(\"table.import\") }}\n                </el-dropdown-item>\n              </el-dropdown-menu>\n            </el-dropdown>\n          </div>\n          <el-tree :check-strictly=\"true\" :data=\"orgTree\" :filter-node-method=\"filterNode\" @node-click=\"nodeClick\"\n                   default-expand-all highlight-current node-key=\"id\" ref=\"orgTree\" show-checkbox/>\n        </div>\n      </el-col>\n      <el-col :sm=\"12\" :xs=\"24\">\n        <el-card class=\"box-card\">\n          <div class=\"clearfix\" slot=\"header\">\n            <span>{{ org.id === '' ? this.$t('common.add') : this.$t('common.edit') }}</span>\n          </div>\n          <div>\n            <el-form :model=\"org\" :rules=\"rules\" label-position=\"right\" label-width=\"100px\" ref=\"form\">\n              <el-form-item :label=\"$t('table.org.parentId')\" prop=\"parentId\">\n                <el-tooltip :content=\"$t('tips.topId')\" class=\"item\" effect=\"dark\" placement=\"top-start\">\n                  <el-input readonly v-model=\"org.parentId\"/>\n                </el-tooltip>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.org.label')\" prop=\"label\">\n                <el-input v-model=\"org.label\"/>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.org.abbreviation')\" prop=\"abbreviation\">\n                <el-input v-model=\"org.abbreviation\"/>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.org.type')\" prop=\"type\">\n                <el-radio-group v-model=\"org.type\">\n                  <el-radio-button :key=\"index\" :label=\"item.code\" :value=\"item.code\" v-for=\"(item, key, index) in dicts.ORG_TYPE\">{{item.name}}</el-radio-button>\n                </el-radio-group>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.org.describe')\" prop=\"describe\">\n                <el-input v-model=\"org.describe\"/>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.org.state')\" prop=\"state\">\n                <el-radio-group v-model=\"org.state\">\n                  <el-radio-button :label=\"true\">{{ $t('common.state.valid') }}</el-radio-button>\n                  <el-radio-button :label=\"false\">{{ $t('common.state.invalid') }}</el-radio-button>\n                </el-radio-group>\n              </el-form-item>\n              <el-form-item :label=\"$t('table.org.sortValue')\" prop=\"sortValue\">\n                <el-input-number :max=\"100\" :min=\"0\" @change=\"handleNumChange\" v-model=\"org.sortValue\"/>\n              </el-form-item>\n            </el-form>\n          </div>\n        </el-card>\n        <el-card class=\"box-card\" style=\"margin-top: -2rem;\">\n          <el-row>\n            <el-col :span=\"24\" style=\"text-align: right\">\n              <el-button @click=\"submit\" plain type=\"primary\">{{ org.id === '' ? this.$t('common.add') :\n                this.$t('common.edit') }}\n              </el-button>\n            </el-col>\n          </el-row>\n        </el-card>\n      </el-col>\n    </el-row>\n\n    <file-import\n      :dialog-visible=\"fileImport.isVisible\"\n      :type=\"fileImport.type\"\n      :action=\"fileImport.action\" accept=\".xls,.xlsx\"\n      @close=\"importClose\"\n      @success=\"importSuccess\"\n      ref=\"import\"\n    />\n    <el-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n      v-el-drag-dialog\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n<script>\n  import orgApi from '@/api/Org.js'\n  import elDragDialog from '@/directive/el-drag-dialog'\n  import FileImport from \"@/components/lamp/Import\"\n  import { downloadFile, initDicts } from '@/utils/commons'\n\n  export default {\n    name: 'OrgManager',\n    directives: {elDragDialog},\n    components: {FileImport},\n    data() {\n      return {\n        label: '',\n        orgTree: [],\n        org: this.initOrg(),\n        preview: {\n          isVisible: false,\n          context: ''\n        },\n        fileImport: {\n          isVisible: false,\n          type: \"import\",\n          action: `${process.env.VUE_APP_BASE_API}/authority/org/import`\n        },\n        rules: {\n          label: [\n            {required: true, message: this.$t('rules.require'), trigger: 'blur'},\n            {min: 1, max: 255, message: this.$t('rules.range3to10'), trigger: 'blur'}\n          ],\n          type: [\n            {required: true, message: this.$t('rules.require'), trigger: 'change'},\n            {\n              validator: (rule, value, callback) => {\n                if (value === null || value.trim().length <= 0) {\n                  callback(this.$t('rules.require'))\n                } else {\n                  callback()\n                }\n              }, trigger: 'change'\n            }\n          ]\n        },\n        dicts: {\n          ORG_TYPE: [],\n        }\n      }\n    },\n    mounted() {\n      this.initOrgTree()\n      initDicts(['ORG_TYPE'], this.dicts)\n    },\n    methods: {\n      initOrg() {\n        return {\n          id: '',\n          abbreviation: '',\n          label: '',\n          type: '',\n          parentId: 0,\n          state: true,\n          describe: '',\n          sortValue: 0\n        }\n      },\n      initOrgTree() {\n        orgApi.allTree({})\n          .then((response) => {\n            const res = response.data\n            this.orgTree = res.data\n          })\n      },\n      exportExcelPreview() {\n        const queryParams = {\n          model: {},\n          map: {\n            fileName: '导出组织数据'\n          },\n          size: 10000\n        };\n        orgApi.preview(queryParams).then(response => {\n          const res = response.data;\n          this.preview.isVisible = true;\n          this.preview.context = res.data;\n        });\n      },\n      exportExcel() {\n        const queryParams = {\n          model: {},\n          map: {\n            fileName: '导出组织数据'\n          },\n          size: 10000\n        };\n        orgApi.export(queryParams).then(response => {\n          downloadFile(response);\n        });\n      },\n      importExcel() {\n        this.fileImport.type = \"upload\";\n        this.fileImport.isVisible = true;\n        this.$refs.import.setModel(false);\n      },\n      importSuccess() {\n        this.initOrgTree();\n      },\n      importClose() {\n        this.fileImport.isVisible = false;\n      },\n      handleNumChange(val) {\n        this.org.sortValue = val\n      },\n      filterNode(value, data) {\n        if (!value) return true\n        return data.label.indexOf(value) !== -1\n      },\n      nodeClick(data) {\n        this.org = {...data}\n        this.$refs.form.clearValidate()\n      }\n      ,\n      add() {\n        this.resetForm()\n        const checked = this.$refs.orgTree.getCheckedKeys()\n        if (checked.length > 1) {\n          this.$message({\n            message: this.$t('tips.onlyChooseOne'),\n            type: 'warning'\n          })\n        } else if (checked.length > 0) {\n          this.org.parentId = checked[0]\n        } else {\n          this.org.parentId = 0\n        }\n      },\n      deleteOrg() {\n        const checked = this.$refs.orgTree.getCheckedKeys()\n        if (checked.length === 0) {\n          this.$message({\n            message: this.$t('tips.noNodeSelected'),\n            type: 'warning'\n          })\n        } else {\n          this.$confirm(this.$t('tips.confirmDeleteNode'), this.$t('common.tips'), {\n            confirmButtonText: this.$t('common.confirm'),\n            cancelButtonText: this.$t('common.cancel'),\n            type: 'warning'\n          }).then(() => {\n            orgApi.delete(checked)\n              .then((response) => {\n                const res = response.data\n                if (res.isSuccess) {\n                  this.$message({\n                    message: this.$t('tips.deleteSuccess'),\n                    type: 'success'\n                  })\n                }\n                this.reset()\n              })\n          }).catch(() => {\n            this.$refs.orgTree.setCheckedKeys([])\n          })\n        }\n      }\n      ,\n      search() {\n        this.$refs.orgTree.filter(this.label)\n      }\n      ,\n      reset() {\n        this.initOrgTree()\n        this.label = ''\n        this.resetForm()\n      }\n      ,\n      submit() {\n        this.$refs.form.validate((valid) => {\n          if (valid) {\n            if (this.org.id) {\n              this.update()\n            } else {\n              this.save()\n            }\n          } else {\n            return false\n          }\n        })\n      }\n      ,\n      save() {\n        orgApi.save({...this.org})\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.createSuccess'),\n                type: 'success'\n              })\n            }\n\n            this.reset()\n          })\n      }\n      ,\n      update() {\n        orgApi.update({...this.org})\n          .then((response) => {\n            const res = response.data\n            if (res.isSuccess) {\n              this.$message({\n                message: this.$t('tips.updateSuccess'),\n                type: 'success'\n              })\n            }\n            this.reset()\n          })\n      }\n      ,\n      resetForm() {\n        this.$refs.form.clearValidate()\n        this.$refs.form.resetFields()\n        this.org = this.initOrg()\n      }\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n  .org {\n    margin: 10px;\n\n    .app-container {\n      margin: 0 0 10px 0 !important;\n    }\n  }\n\n  .el-card.is-always-shadow {\n    box-shadow: none;\n  }\n\n  .el-card {\n    border-radius: 0;\n    border: none;\n\n    .el-card__header {\n      padding: 10px 20px !important;\n      border-bottom: 1px solid #f1f1f1 !important;\n    }\n  }\n</style>\n"]}]}