{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\sendStatusIndex.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\resources\\sms\\sendStatusIndex.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from '@/components/Pagination'\nimport smsSendStatusApi from '@/api/SmsSendStatus.js'\nimport {convertEnum} from '@/utils/utils'\nimport { initMsgEnums, initQueryParams } from '@/utils/commons'\n\nexport default {\n  name: 'SmsSendStatusManage',\n  components: {Pagination},\n  filters: {\n    statusFilter(status) {\n      const map = {\n        false: 'danger',\n        true: 'success'\n      }\n      return map[status] || 'success'\n    }\n  },\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      dialog: {\n        isVisible: false,\n        type: 'add'\n      },\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {taskId: 0}\n      }),\n      selection: [],\n      // 以下已修改\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {SendStatus: {}}\n\n    }\n  },\n  computed: {\n    sendStatusFilters() {\n      return convertEnum(this.enums.SendStatus)\n    },\n    isVisible: {\n      get() {\n        return this.dialogVisible\n      },\n      set() {\n        // this.close()\n        // this.reset()\n      }\n    },\n  },\n  mounted() {\n    initMsgEnums('SendStatus', this.enums)\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    setTaskId(taskId) {\n      this.queryParams.model.taskId = taskId\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      const taskId = this.queryParams.model.taskId\n      this.queryParams = initQueryParams({\n        model: {taskId: taskId}\n      })\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      smsSendStatusApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        // if (key.includes('.')) {\n        //   const val = {};\n        //   val[key.split('.')[1]] = filters[key][0];\n        //   this.queryParams.model[key.split('.')[0]] = val;\n        // } else {\n        //   this.queryParams.model[key] = filters[key][0]\n        // }\n        if (key.includes('.')) {\n          this.queryParams.model[key.split('.')[0]] = filters[key];\n        } else {\n          this.queryParams.model[key] = filters[key]\n        }\n      }\n      this.search()\n    },\n    cellClick (row, column) {\n      if (column['columnKey'] === \"operation\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item)=>{\n        if(item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n      if(!flag){\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n}\n",{"version":3,"sources":["sendStatusIndex.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsFA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sendStatusIndex.vue","sourceRoot":"src/views/lamp/resources/sms","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.smsSendStatus.telNum')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.telNum\"/>\n      <el-input :placeholder=\"$t('table.smsSendStatus.bizId')\" class=\"filter-item search-item\"\n                v-model=\"queryParams.model.bizId\"/>\n      <el-input :placeholder=\"$t('table.smsSendStatus.ext')\" class=\"filter-item search-item\" v-model=\"queryParams.model.ext\"/>\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">{{ $t('table.search') }}</el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">{{ $t('table.reset') }}</el-button>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" :reserve-selection=\"true\"/>\n      <el-table-column :label=\"$t('table.smsSendStatus.telNum')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"telNum\" width=\"120px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.telNum }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"true\"\n        :filters=\"sendStatusFilters\"\n        :label=\"$t('table.smsSendStatus.sendStatus')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        column-key=\"sendStatus\"\n        prop=\"sendStatus\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.sendStatus.desc }}</span>\n        </template>\n      </el-table-column>\n\n      <el-table-column :label=\"$t('table.smsSendStatus.bizId')\" :show-overflow-tooltip=\"true\" align=\"center\"\n                       prop=\"bizId\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.bizId }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.smsSendStatus.ext')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"ext\"\n                       width=\"150px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.ext }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.smsSendStatus.code')\" :show-overflow-tooltip=\"true\" align=\"center\" prop=\"code\"\n                       width=\"120px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.code }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.smsSendStatus.message')\" :show-overflow-tooltip=\"true\" align=\"center\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.message }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.smsSendStatus.fee')\" align=\"center\" width=\"80px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.fee }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column :label=\"$t('table.createTime')\" align=\"center\" prop=\"createTime\" sortable=\"custom\" width=\"170px\">\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination :limit.sync=\"queryParams.size\" :page.sync=\"queryParams.current\" :total=\"Number(tableData.total)\"\n                @pagination=\"fetch\" v-show=\"tableData.total>0\"/>\n  </div>\n</template>\n\n<script>\n  import Pagination from '@/components/Pagination'\n  import smsSendStatusApi from '@/api/SmsSendStatus.js'\n  import {convertEnum} from '@/utils/utils'\n  import { initMsgEnums, initQueryParams } from '@/utils/commons'\n\n  export default {\n    name: 'SmsSendStatusManage',\n    components: {Pagination},\n    filters: {\n      statusFilter(status) {\n        const map = {\n          false: 'danger',\n          true: 'success'\n        }\n        return map[status] || 'success'\n      }\n    },\n    props: {\n      dialogVisible: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data() {\n      return {\n        dialog: {\n          isVisible: false,\n          type: 'add'\n        },\n        tableKey: 0,\n        queryParams: initQueryParams({\n          model: {taskId: 0}\n        }),\n        selection: [],\n        // 以下已修改\n        loading: false,\n        tableData: {\n          total: 0\n        },\n        enums: {SendStatus: {}}\n\n      }\n    },\n    computed: {\n      sendStatusFilters() {\n        return convertEnum(this.enums.SendStatus)\n      },\n      isVisible: {\n        get() {\n          return this.dialogVisible\n        },\n        set() {\n          // this.close()\n          // this.reset()\n        }\n      },\n    },\n    mounted() {\n      initMsgEnums('SendStatus', this.enums)\n    },\n    methods: {\n      onSelectChange(selection) {\n        this.selection = selection\n      },\n      search() {\n        this.fetch({\n          ...this.queryParams\n        })\n      },\n      setTaskId(taskId) {\n        this.queryParams.model.taskId = taskId\n        this.fetch({\n          ...this.queryParams\n        })\n      },\n      reset() {\n        const taskId = this.queryParams.model.taskId\n        this.queryParams = initQueryParams({\n          model: {taskId: taskId}\n        })\n        this.$refs.table.clearSort()\n        this.$refs.table.clearFilter()\n        this.search()\n      },\n      clearSelections() {\n        this.$refs.table.clearSelection()\n      },\n      fetch(params = {}) {\n        this.loading = true;\n        if (this.queryParams.timeRange) {\n          this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n          this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n        }\n\n        this.queryParams.current = params.current ? params.current : this.queryParams.current;\n        this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n        smsSendStatusApi.page(this.queryParams).then(response => {\n          const res = response.data;\n          if (res.isSuccess) {\n            this.tableData = res.data;\n          }\n        }).finally(() => this.loading = false);\n      },\n      sortChange(val) {\n        this.queryParams.sort = val.prop;\n        this.queryParams.order = val.order;\n        if (this.queryParams.sort) {\n          this.search();\n        }\n      },\n      filterChange(filters) {\n        for (const key in filters) {\n          // if (key.includes('.')) {\n          //   const val = {};\n          //   val[key.split('.')[1]] = filters[key][0];\n          //   this.queryParams.model[key.split('.')[0]] = val;\n          // } else {\n          //   this.queryParams.model[key] = filters[key][0]\n          // }\n          if (key.includes('.')) {\n            this.queryParams.model[key.split('.')[0]] = filters[key];\n          } else {\n            this.queryParams.model[key] = filters[key]\n          }\n        }\n        this.search()\n      },\n      cellClick (row, column) {\n        if (column['columnKey'] === \"operation\") {\n          return;\n        }\n        let flag = false;\n        this.selection.forEach((item)=>{\n          if(item.id === row.id) {\n            flag = true;\n            this.$refs.table.toggleRowSelection(row);\n          }\n        })\n        if(!flag){\n          this.$refs.table.toggleRowSelection(row, true);\n        }\n      }\n    }\n  }\n</script>\n<style lang=\"scss\" scoped>\n</style>\n"]}]}