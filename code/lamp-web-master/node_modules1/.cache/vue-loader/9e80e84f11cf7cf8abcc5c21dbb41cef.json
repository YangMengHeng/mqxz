{"remainingRequest":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\org\\user\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\src\\views\\lamp\\org\\user\\index.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master(finish\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Pagination from \"@/components/Pagination\";\nimport Treeselect from \"@riophae/vue-treeselect\";\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\";\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport FileImport from \"@/components/lamp/Import\"\nimport UserEdit from \"./edit\";\nimport UpdatePassword from \"./updatePassword\";\nimport UserView from \"./view\";\nimport userApi from \"@/api/User.js\";\nimport orgApi from \"@/api/Org.js\";\nimport {convertDict, convertEnum} from '@/utils/utils'\nimport {downloadFile, initDicts, initEnums, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"UserManage\",\n  directives: {elDragDialog},\n  components: {Pagination, UserEdit, UserView, Treeselect, FileImport, UpdatePassword},\n  filters: {\n    userAvatarFilter(name) {\n      return name.charAt(0);\n    },\n    sexFilter(state) {\n      const map = {\n        W: \"success\",\n        M: \"danger\",\n        N: \"info\"\n      };\n      return map[state] || \"info\";\n    },\n    stateFilter(state) {\n      const map = {\n        false: \"danger\",\n        true: \"success\"\n      };\n      return map[state] || \"success\";\n    }\n  },\n  data() {\n    return {\n      orgList: [],\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      updatePasswordDialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/authority/user/import`,\n        exportErrorUrl: `/authority/user/exportError`\n      },\n      userViewVisible: false,\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {\n          nation: [],\n          education: [],\n          positionStatus: [],\n          orgId: null,\n          station: '',\n          sex: [],\n        }\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {\n        Sex: {}\n      },\n      dicts: {\n        NATION: [],\n        POSITION_STATUS: [],\n        EDUCATION: [],\n      }\n    };\n  },\n  computed: {\n    currentUser() {\n      return this.$store.state.account.user;\n    },\n    sexList() {\n      return convertEnum(this.enums.Sex)\n    },\n    nationList() {\n      return convertDict(this.dicts.NATION)\n    },\n    educationList() {\n      return convertDict(this.dicts.EDUCATION)\n    },\n    positionStatusList() {\n      return convertDict(this.dicts.POSITION_STATUS)\n    }\n  },\n  watch: {\n    $route() {\n      if (this.$route.path === \"/user/user\") {\n        this.initOrg();\n      }\n    }\n  },\n  mounted() {\n    initEnums('Sex', this.enums);\n    initDicts(['NATION', 'POSITION_STATUS', 'EDUCATION'], this.dicts);\n    this.fetch();\n    this.initOrg();\n  },\n  methods: {\n    initOrg() {\n      orgApi.allTree({state: true}).then(response => {\n        const res = response.data;\n        this.orgList = res.data;\n      });\n    },\n    myAvatar(avatar) {\n      if (!avatar) {\n        return require(`@/assets/avatar/default.jpg`);\n      } else {\n        if (avatar.startsWith(\"http://\") || avatar.startsWith(\"https://\")) {\n          return avatar;\n        } else {\n          return require(`@/assets/avatar/${avatar}`);\n        }\n      }\n    },\n    viewClose() {\n      this.userViewVisible = false;\n    },\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    updatePasswordSuccess() {\n      this.search();\n    },\n    updatePasswordClose() {\n      this.updatePasswordDialog.isVisible = false;\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    loadListOptions({callback}) {\n      callback();\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams,\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        nation: [],\n        education: [],\n        positionStatus: [],\n        orgId: null,\n        station: '',\n        sex: []\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      userApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      userApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      let contain = false;\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          const ids = [];\n          this.selection.forEach(u => {\n            if (u.id === this.currentUser.id) {\n              contain = true;\n              return;\n            }\n            ids.push(u.id);\n          });\n          if (contain) {\n            this.$message({\n              message: this.$t(\"tips.containCurrentUser\"),\n              type: \"warning\"\n            });\n            this.clearSelections();\n          } else {\n            this.delete(ids);\n          }\n        })\n        .catch(() => {\n          this.clearSelections();\n        });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete(ids) {\n      userApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n        }\n        this.search();\n      });\n    },\n    add() {\n      this.dialog.type = \"add\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setUser(false, this.orgList, this.dicts, this.enums);\n    },\n    view(row) {\n      this.$refs.view.setUser(row, this.orgList, this.dicts, this.enums);\n      this.userViewVisible = true;\n    },\n    edit(row) {\n      this.$refs.edit.setUser(row, this.orgList, this.dicts, this.enums);\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    updatePassword(row) {\n      this.$refs.editPassword.setUser(row);\n      this.updatePasswordDialog.type = \"edit\";\n      this.updatePasswordDialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      userApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          this.queryParams.model[key.split('.')[0]] = filters[key];\n        } else {\n          this.queryParams.model[key] = filters[key]\n        }\n        if (key === 'state'){\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n};\n",{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgfile":"index.vue","sourceRoot":"src/views/lamp/org/user","sourcesContent":["<template>\n  <div class=\"app-container\">\n    <div class=\"filter-container\">\n      <el-input :placeholder=\"$t('table.user.account')\"\n                class=\"filter-item search-item\" clearable v-model=\"queryParams.model.account\"/>\n      <el-select clearable multiple :placeholder=\"$t('table.user.nation')\" v-model=\"queryParams.model.nation\"\n                 class=\"filter-item search-item\">\n        <el-option :key=\"index\" :label=\"item.name\" :value=\"item.code\" v-for=\"(item, key, index) in dicts.NATION\"/>\n      </el-select>\n      <treeselect clearable\n                  :clear-value-text=\"$t('common.clear')\"\n                  :load-options=\"loadListOptions\"\n                  :multiple=\"false\"\n                  :options=\"orgList\"\n                  :searchable=\"true\"\n                  class=\"filter-item search-item\"\n                  placeholder=\"组织\"\n                  v-model=\"queryParams.model.orgId\"\n      />\n      <el-date-picker\n        :range-separator=\"null\"\n        class=\"filter-item search-item date-range-item\"\n        end-placeholder=\"结束日期\"\n        format=\"yyyy-MM-dd HH:mm:ss\"\n        start-placeholder=\"开始日期\"\n        type=\"daterange\"\n        v-model=\"queryParams.timeRange\"\n        value-format=\"yyyy-MM-dd HH:mm:ss\"\n      />\n      <el-button @click=\"search\" class=\"filter-item\" plain type=\"primary\">\n        {{ $t(\"table.search\") }}\n      </el-button>\n      <el-button @click=\"reset\" class=\"filter-item\" plain type=\"warning\">\n        {{ $t(\"table.reset\") }}\n      </el-button>\n      <el-button @click=\"add\" class=\"filter-item\" plain type=\"danger\" v-has-permission=\"['authority:user:add']\">\n        {{ $t(\"table.add\") }}\n      </el-button>\n      <el-dropdown class=\"filter-item\" trigger=\"click\"\n                   v-has-any-permission=\"[\n          'authority:user:delete',\n          'authority:user:rest',\n          'authority:user:export',\n          'authority:user:import',\n        ]\">\n        <el-button>\n          {{ $t(\"table.more\") }}\n          <i class=\"el-icon-arrow-down el-icon--right\"/>\n        </el-button>\n        <el-dropdown-menu slot=\"dropdown\">\n          <el-dropdown-item @click.native=\"batchDelete\" v-has-permission=\"['authority:user:delete']\">\n            {{ $t(\"table.delete\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcel\" v-has-permission=\"['authority:user:export']\">\n            {{ $t(\"table.export\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"exportExcelPreview\" v-has-permission=\"['authority:user:export']\">\n            {{ $t(\"table.exportPreview\") }}\n          </el-dropdown-item>\n          <el-dropdown-item @click.native=\"importExcel\" v-has-permission=\"['authority:user:import']\">\n            {{ $t(\"table.import\") }}\n          </el-dropdown-item>\n        </el-dropdown-menu>\n      </el-dropdown>\n    </div>\n\n    <el-table\n      :data=\"tableData.records\"\n      :key=\"tableKey\"\n      @filter-change=\"filterChange\"\n      @selection-change=\"onSelectChange\"\n      @sort-change=\"sortChange\"\n      @cell-click=\"cellClick\"\n      border fit row-key=\"id\"\n      ref=\"table\"\n      style=\"width: 100%;\"\n      v-loading=\"loading\"\n    >\n      <el-table-column align=\"center\" type=\"selection\" width=\"40px\" column-key=\"selectionId\" :reserve-selection=\"true\"/>\n      <el-table-column\n        :label=\"$t('table.user.avatar')\"\n        align=\"center\"\n        prop=\"avatar\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <el-avatar\n            :key=\"scope.row.avatar\"\n            :src=\"myAvatar(scope.row.avatar)\"\n            fit=\"fill\"\n          >\n            <el-avatar>{{ scope.row.name | userAvatarFilter }}</el-avatar>\n          </el-avatar>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.user.account')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        prop=\"account\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.account }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.user.name')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        prop=\"name\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.name }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"true\"\n        :filters=\"sexList\"\n        column-key=\"sex.code\"\n        :label=\"$t('table.user.sex')\"\n        class-name=\"status-col\"\n        prop=\"sex.desc\"\n        width=\"70px\"\n      >\n        <template slot-scope=\"{ row }\">\n          <el-tag :type=\"row.sex ? row.sex['code'] :'' | sexFilter\">{{ row.sex ? row.sex.desc : '' }}</el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.user.email')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.email }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.user.nation')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"80px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.echoMap.nation ? scope.row.echoMap.nation : '' }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"true\"\n        :filters=\"educationList\"\n        column-key=\"education\"\n        :label=\"$t('table.user.education')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"80px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.echoMap.education ? scope.row.echoMap.education : '' }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"true\"\n        :filters=\"positionStatusList\"\n        column-key=\"positionStatus\"\n        :label=\"$t('table.user.positionStatus')\"\n        :show-overflow-tooltip=\"true\"\n        align=\"center\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.echoMap.positionStatus ? scope.row.echoMap.positionStatus : '' }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.user.orgId')\"\n        align=\"center\"\n        :show-overflow-tooltip=\"true\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{\n              scope.row.echoMap.orgId ? scope.row.echoMap.orgId.label : ''\n            }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.user.stationId')\"\n        align=\"center\"\n        :show-overflow-tooltip=\"true\"\n        width=\"100px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{\n              scope.row.echoMap.stationId ? scope.row.echoMap.stationId : ''\n            }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :filter-multiple=\"false\"\n        column-key=\"state\"\n        :filters=\"[\n          { text: $t('common.state.valid'), value: true },\n          { text: $t('common.state.invalid'), value: false }\n        ]\"\n        :label=\"$t('table.user.state')\"\n        class-name=\"status-col\"\n        width=\"70px\"\n      >\n        <template slot-scope=\"{ row }\">\n          <el-tag :type=\"row.state | stateFilter\">{{\n              row.state ? $t(\"common.state.valid\") : $t(\"common.state.invalid\")\n            }}\n          </el-tag>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.user.createTime')\"\n        align=\"center\"\n        prop=\"createTime\"\n        sortable=\"custom\"\n        width=\"170px\"\n      >\n        <template slot-scope=\"scope\">\n          <span>{{ scope.row.createTime }}</span>\n        </template>\n      </el-table-column>\n      <el-table-column\n        :label=\"$t('table.operation')\"\n        align=\"center\"\n        column-key=\"operation\"\n        class-name=\"small-padding fixed-width\"\n        width=\"130px\"\n      >\n        <template slot-scope=\"{ row }\">\n          <i\n            @click=\"view(row)\"\n            class=\"el-icon-view table-operation\"\n            style=\"color: #87d068;\"\n            v-hasPermission=\"['authority:user:view']\"\n          />\n          <i\n            @click=\"edit(row)\"\n            class=\"el-icon-edit table-operation\"\n            style=\"color: #2db7f5;\"\n            v-hasPermission=\"['authority:user:edit']\"\n          />\n          <i\n            @click=\"singleDelete(row)\"\n            class=\"el-icon-delete table-operation\"\n            style=\"color: #f50;\"\n            v-hasPermission=\"['authority:user:delete']\"\n          />\n          <i\n            @click=\"updatePassword(row)\"\n            class=\"el-icon-refresh-left\"\n            style=\"color: #f50;\"\n            v-hasPermission=\"['authority:user:edit']\"\n          />\n          <el-link\n            class=\"no-perm\"\n            v-has-no-permission=\"['authority:user:view', 'authority:user:edit', 'authority:user:delete']\"\n          >{{ $t(\"tips.noPermission\") }}\n          </el-link\n          >\n        </template>\n      </el-table-column>\n    </el-table>\n    <pagination\n      :limit.sync=\"queryParams.size\"\n      :page.sync=\"queryParams.current\"\n      :total=\"Number(tableData.total)\"\n      @pagination=\"fetch\"\n      v-show=\"tableData.total > 0\"\n    />\n    <user-edit\n      :dialog-visible=\"dialog.isVisible\"\n      :type=\"dialog.type\"\n      @close=\"editClose\"\n      @success=\"editSuccess\"\n      ref=\"edit\"\n    />\n    <update-password\n      :dialog-visible=\"updatePasswordDialog.isVisible\"\n      :type=\"updatePasswordDialog.type\"\n      @close=\"updatePasswordClose\"\n      @success=\"updatePasswordSuccess\"\n      ref=\"editPassword\"\n    />\n    <user-view\n      :dialog-visible=\"userViewVisible\"\n      @close=\"viewClose\"\n      ref=\"view\"\n    />\n    <file-import\n      ref=\"import\"\n      :dialog-visible=\"fileImport.isVisible\"\n      :type=\"fileImport.type\"\n      :exportErrorUrl=\"fileImport.exportErrorUrl\"\n      :action=\"fileImport.action\"\n      accept=\".xls,.xlsx\"\n      @close=\"importClose\"\n      @success=\"importSuccess\"\n    />\n    <el-dialog\n      v-el-drag-dialog\n      :close-on-click-modal=\"false\"\n      :close-on-press-escape=\"true\"\n      title=\"预览\"\n      width=\"80%\"\n      top=\"50px\"\n      :visible.sync=\"preview.isVisible\"\n    >\n      <el-scrollbar>\n        <div v-html=\"preview.context\"></div>\n      </el-scrollbar>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Pagination from \"@/components/Pagination\";\nimport Treeselect from \"@riophae/vue-treeselect\";\nimport \"@riophae/vue-treeselect/dist/vue-treeselect.css\";\nimport elDragDialog from '@/directive/el-drag-dialog'\nimport FileImport from \"@/components/lamp/Import\"\nimport UserEdit from \"./edit\";\nimport UpdatePassword from \"./updatePassword\";\nimport UserView from \"./view\";\nimport userApi from \"@/api/User.js\";\nimport orgApi from \"@/api/Org.js\";\nimport {convertDict, convertEnum} from '@/utils/utils'\nimport {downloadFile, initDicts, initEnums, initQueryParams} from '@/utils/commons'\n\nexport default {\n  name: \"UserManage\",\n  directives: {elDragDialog},\n  components: {Pagination, UserEdit, UserView, Treeselect, FileImport, UpdatePassword},\n  filters: {\n    userAvatarFilter(name) {\n      return name.charAt(0);\n    },\n    sexFilter(state) {\n      const map = {\n        W: \"success\",\n        M: \"danger\",\n        N: \"info\"\n      };\n      return map[state] || \"info\";\n    },\n    stateFilter(state) {\n      const map = {\n        false: \"danger\",\n        true: \"success\"\n      };\n      return map[state] || \"success\";\n    }\n  },\n  data() {\n    return {\n      orgList: [],\n      dialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      updatePasswordDialog: {\n        isVisible: false,\n        type: \"add\"\n      },\n      preview: {\n        isVisible: false,\n        context: ''\n      },\n      fileImport: {\n        isVisible: false,\n        type: \"import\",\n        action: `${process.env.VUE_APP_BASE_API}/authority/user/import`,\n        exportErrorUrl: `/authority/user/exportError`\n      },\n      userViewVisible: false,\n      tableKey: 0,\n      queryParams: initQueryParams({\n        model: {\n          nation: [],\n          education: [],\n          positionStatus: [],\n          orgId: null,\n          station: '',\n          sex: [],\n        }\n      }),\n      selection: [],\n      loading: false,\n      tableData: {\n        total: 0\n      },\n      enums: {\n        Sex: {}\n      },\n      dicts: {\n        NATION: [],\n        POSITION_STATUS: [],\n        EDUCATION: [],\n      }\n    };\n  },\n  computed: {\n    currentUser() {\n      return this.$store.state.account.user;\n    },\n    sexList() {\n      return convertEnum(this.enums.Sex)\n    },\n    nationList() {\n      return convertDict(this.dicts.NATION)\n    },\n    educationList() {\n      return convertDict(this.dicts.EDUCATION)\n    },\n    positionStatusList() {\n      return convertDict(this.dicts.POSITION_STATUS)\n    }\n  },\n  watch: {\n    $route() {\n      if (this.$route.path === \"/user/user\") {\n        this.initOrg();\n      }\n    }\n  },\n  mounted() {\n    initEnums('Sex', this.enums);\n    initDicts(['NATION', 'POSITION_STATUS', 'EDUCATION'], this.dicts);\n    this.fetch();\n    this.initOrg();\n  },\n  methods: {\n    initOrg() {\n      orgApi.allTree({state: true}).then(response => {\n        const res = response.data;\n        this.orgList = res.data;\n      });\n    },\n    myAvatar(avatar) {\n      if (!avatar) {\n        return require(`@/assets/avatar/default.jpg`);\n      } else {\n        if (avatar.startsWith(\"http://\") || avatar.startsWith(\"https://\")) {\n          return avatar;\n        } else {\n          return require(`@/assets/avatar/${avatar}`);\n        }\n      }\n    },\n    viewClose() {\n      this.userViewVisible = false;\n    },\n    editClose() {\n      this.dialog.isVisible = false;\n    },\n    editSuccess() {\n      this.search();\n    },\n    updatePasswordSuccess() {\n      this.search();\n    },\n    updatePasswordClose() {\n      this.updatePasswordDialog.isVisible = false;\n    },\n    onSelectChange(selection) {\n      this.selection = selection;\n    },\n    loadListOptions({callback}) {\n      callback();\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams,\n      });\n    },\n    reset() {\n      this.queryParams = initQueryParams({\n        nation: [],\n        education: [],\n        positionStatus: [],\n        orgId: null,\n        station: '',\n        sex: []\n      });\n      this.$refs.table.clearSort();\n      this.$refs.table.clearFilter();\n      this.search();\n    },\n    exportExcelPreview() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      userApi.preview(this.queryParams).then(response => {\n        const res = response.data;\n        this.preview.isVisible = true;\n        this.preview.context = res.data;\n      });\n    },\n    exportExcel() {\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n      this.queryParams.extra.fileName = '导出用户数据';\n      userApi.export(this.queryParams).then(response => {\n        downloadFile(response);\n      });\n    },\n    importExcel() {\n      this.fileImport.type = \"upload\";\n      this.fileImport.isVisible = true;\n      this.$refs.import.setModel(false);\n    },\n    importSuccess() {\n      this.search();\n    },\n    importClose() {\n      this.fileImport.isVisible = false;\n    },\n    singleDelete(row) {\n      this.$refs.table.clearSelection()\n      this.$refs.table.toggleRowSelection(row, true);\n      this.batchDelete();\n    },\n    batchDelete() {\n      if (!this.selection.length) {\n        this.$message({\n          message: this.$t(\"tips.noDataSelected\"),\n          type: \"warning\"\n        });\n        return;\n      }\n      let contain = false;\n      this.$confirm(this.$t(\"tips.confirmDelete\"), this.$t(\"common.tips\"), {\n        confirmButtonText: this.$t(\"common.confirm\"),\n        cancelButtonText: this.$t(\"common.cancel\"),\n        type: \"warning\"\n      })\n        .then(() => {\n          const ids = [];\n          this.selection.forEach(u => {\n            if (u.id === this.currentUser.id) {\n              contain = true;\n              return;\n            }\n            ids.push(u.id);\n          });\n          if (contain) {\n            this.$message({\n              message: this.$t(\"tips.containCurrentUser\"),\n              type: \"warning\"\n            });\n            this.clearSelections();\n          } else {\n            this.delete(ids);\n          }\n        })\n        .catch(() => {\n          this.clearSelections();\n        });\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection();\n    },\n    delete(ids) {\n      userApi.delete(ids).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: this.$t(\"tips.deleteSuccess\"),\n            type: \"success\"\n          });\n        }\n        this.search();\n      });\n    },\n    add() {\n      this.dialog.type = \"add\";\n      this.dialog.isVisible = true;\n      this.$refs.edit.setUser(false, this.orgList, this.dicts, this.enums);\n    },\n    view(row) {\n      this.$refs.view.setUser(row, this.orgList, this.dicts, this.enums);\n      this.userViewVisible = true;\n    },\n    edit(row) {\n      this.$refs.edit.setUser(row, this.orgList, this.dicts, this.enums);\n      this.dialog.type = \"edit\";\n      this.dialog.isVisible = true;\n    },\n    updatePassword(row) {\n      this.$refs.editPassword.setUser(row);\n      this.updatePasswordDialog.type = \"edit\";\n      this.updatePasswordDialog.isVisible = true;\n    },\n    fetch(params = {}) {\n      this.loading = true;\n      if (this.queryParams.timeRange) {\n        this.queryParams.extra.createTime_st = this.queryParams.timeRange[0];\n        this.queryParams.extra.createTime_ed = this.queryParams.timeRange[1];\n      }\n\n      this.queryParams.current = params.current ? params.current : this.queryParams.current;\n      this.queryParams.size = params.size ? params.size : this.queryParams.size;\n\n      userApi.page(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    sortChange(val) {\n      this.queryParams.sort = val.prop;\n      this.queryParams.order = val.order;\n      if (this.queryParams.sort) {\n        this.search();\n      }\n    },\n    filterChange(filters) {\n      for (const key in filters) {\n        if (key.includes('.')) {\n          this.queryParams.model[key.split('.')[0]] = filters[key];\n        } else {\n          this.queryParams.model[key] = filters[key]\n        }\n        if (key === 'state'){\n          this.queryParams.model[key] = filters[key][0];\n        }\n      }\n\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    }\n  }\n};\n</script>\n<style lang=\"scss\" scoped>\n\n\n</style>\n"]}]}