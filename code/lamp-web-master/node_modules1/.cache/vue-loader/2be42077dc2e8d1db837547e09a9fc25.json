{"remainingRequest":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\project\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\edit.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\project\\lamp-web-master\\src\\views\\lamp\\tenant\\user\\edit.vue","mtime":1679380940000},{"path":"E:\\project\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"E:\\project\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"E:\\project\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport globalUserApi from '@/api/GlobalUser.js'\nimport tenantApi from '@/api/Tenant.js'\n\nexport default {\n  name: 'GlobalUserEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      tenantList: [],\n      type: 'add',\n      user: this.initUser(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        account: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 4, max: 30, message: this.$t('rules.range4to10'), trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if (!this.user.id && this.user.tenantCode) {\n                const checkData = {\n                  tenantCode: this.user.tenantCode,\n                  account: value\n                }\n                globalUserApi.check(checkData)\n                  .then((response) => {\n                    const res = response.data\n                    if (res.data) {\n                      callback(this.$t('rules.usernameExist'))\n                    } else {\n                      callback()\n                    }\n                  })\n              } else {\n                callback()\n              }\n            }, trigger: 'blur'\n          }\n        ],\n        tenantCode: [{ required: true, message: this.$t('rules.require'), trigger: 'blur' }]\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted () {\n    this.initTenantList()\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initTenantList () {\n      tenantApi.list({status: {code: 'NORMAL'}})\n        .then((response) => {\n          const res = response.data\n          this.tenantList = res.data\n        })\n    },\n    initUser () {\n      return {\n        id: '',\n        tenantCode: '0000',\n        name: '',\n        account: '',\n        mobile: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    setUser (val) {\n      this.user = { ...val }\n    },\n    close () {\n      this.$emit('close')\n    },\n    submitForm () {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          if (this.type === 'add') {\n            this.save()\n          } else {\n            this.update()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    save () {\n      globalUserApi.save(this.user)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        })\n    },\n    update () {\n      globalUserApi.update(this.user)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        })\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.user = this.initUser()\n    }\n  }\n}\n",{"version":3,"sources":["edit.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"edit.vue","sourceRoot":"src/views/lamp/tenant/user","sourcesContent":["<template>\n  <el-dialog :close-on-click-modal=\"false\" :close-on-press-escape=\"false\" :title=\"title\" :visible.sync=\"isVisible\" :width=\"width\" top=\"50px\">\n    <el-form ref=\"form\" :model=\"user\" :rules=\"rules\" label-position=\"right\" label-width=\"130px\">\n      <el-form-item label=\"租户\" prop=\"tenantCode\">\n        <el-select v-model=\"user.tenantCode\" :disabled=\"type === 'edit'\" placeholder=\"企业\">\n          <el-option v-for=\"item in tenantList\" :key=\"item.code\" :label=\"item.name + '(' + item.code + ')'\" :value=\"item.code\" />\n        </el-select>\n      </el-form-item>\n      <el-form-item :label=\"$t('table.user.account')\" prop=\"account\">\n        <el-input v-model=\"user.account\" :disabled=\"type === 'edit'\" />\n      </el-form-item>\n      <el-form-item v-show=\"type === 'add'\" :label=\"$t('table.user.password')\" prop=\"password\">\n        <el-input v-model=\"user.password\" maxlength=\"64\" type=\"password\" />\n      </el-form-item>\n      <el-form-item v-show=\"type === 'add'\" :label=\"$t('table.user.confirmPassword')\" prop=\"confirmPassword\">\n        <el-input v-model=\"user.confirmPassword\" maxlength=\"64\" type=\"password\" />\n      </el-form-item>\n      <el-form-item :label=\"$t('table.user.name')\" prop=\"name\">\n        <el-input v-model=\"user.name\" maxlength=\"50\" />\n      </el-form-item>\n      <el-form-item :label=\"$t('table.user.mobile')\" prop=\"mobile\">\n        <el-input v-model=\"user.mobile\" maxlength=\"20\" />\n      </el-form-item>\n      <el-form-item :label=\"$t('table.user.email')\" prop=\"email\">\n        <el-input v-model=\"user.email\" maxlength=\"255\" />\n      </el-form-item>\n    </el-form>\n    <div slot=\"footer\" class=\"dialog-footer\">\n      <el-button plain type=\"warning\" @click=\"isVisible = false\">{{ $t('common.cancel') }}</el-button>\n      <el-button plain type=\"primary\" @click=\"submitForm\">{{ $t('common.confirm') }}</el-button>\n    </div>\n  </el-dialog>\n</template>\n<script>\nimport globalUserApi from '@/api/GlobalUser.js'\nimport tenantApi from '@/api/Tenant.js'\n\nexport default {\n  name: 'GlobalUserEdit',\n  props: {\n    dialogVisible: {\n      type: Boolean,\n      default: false\n    },\n    title: {\n      type: String,\n      default: ''\n    }\n  },\n  data () {\n    return {\n      tenantList: [],\n      type: 'add',\n      user: this.initUser(),\n      screenWidth: 0,\n      width: this.initWidth(),\n      rules: {\n        account: [\n          { required: true, message: this.$t('rules.require'), trigger: 'blur' },\n          { min: 4, max: 30, message: this.$t('rules.range4to10'), trigger: 'blur' },\n          {\n            validator: (rule, value, callback) => {\n              if (!this.user.id && this.user.tenantCode) {\n                const checkData = {\n                  tenantCode: this.user.tenantCode,\n                  account: value\n                }\n                globalUserApi.check(checkData)\n                  .then((response) => {\n                    const res = response.data\n                    if (res.data) {\n                      callback(this.$t('rules.usernameExist'))\n                    } else {\n                      callback()\n                    }\n                  })\n              } else {\n                callback()\n              }\n            }, trigger: 'blur'\n          }\n        ],\n        tenantCode: [{ required: true, message: this.$t('rules.require'), trigger: 'blur' }]\n      }\n    }\n  },\n  computed: {\n    isVisible: {\n      get () {\n        return this.dialogVisible\n      },\n      set () {\n        this.close()\n        this.reset()\n      }\n    }\n  },\n  mounted () {\n    this.initTenantList()\n    window.onresize = () => {\n      return (() => {\n        this.width = this.initWidth()\n      })()\n    }\n  },\n  methods: {\n    initTenantList () {\n      tenantApi.list({status: {code: 'NORMAL'}})\n        .then((response) => {\n          const res = response.data\n          this.tenantList = res.data\n        })\n    },\n    initUser () {\n      return {\n        id: '',\n        tenantCode: '0000',\n        name: '',\n        account: '',\n        mobile: '',\n        email: '',\n        password: '',\n        confirmPassword: ''\n      }\n    },\n    initWidth () {\n      this.screenWidth = document.body.clientWidth\n      if (this.screenWidth < 991) {\n        return '90%'\n      } else if (this.screenWidth < 1400) {\n        return '45%'\n      } else {\n        return '800px'\n      }\n    },\n    setUser (val) {\n      this.user = { ...val }\n    },\n    close () {\n      this.$emit('close')\n    },\n    submitForm () {\n      this.$refs.form.validate((valid) => {\n        if (valid) {\n          if (this.type === 'add') {\n            this.save()\n          } else {\n            this.update()\n          }\n        } else {\n          return false\n        }\n      })\n    },\n    save () {\n      globalUserApi.save(this.user)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.createSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        })\n    },\n    update () {\n      globalUserApi.update(this.user)\n        .then((response) => {\n          const res = response.data\n          if (res.isSuccess) {\n            this.isVisible = false\n            this.$message({\n              message: this.$t('tips.updateSuccess'),\n              type: 'success'\n            })\n            this.$emit('success')\n          }\n        })\n    },\n    reset () {\n      // 先清除校验，再清除表单，不然有奇怪的bug\n      this.$refs.form.clearValidate()\n      this.$refs.form.resetFields()\n      this.user = this.initUser()\n    }\n  }\n}\n</script>\n<style lang=\"scss\" >\n.avatar-uploader .el-upload {\n  border: 1px dashed #d9d9d9;\n  border-radius: 6px;\n  cursor: pointer;\n  position: relative;\n  overflow: hidden;\n}\n.avatar-uploader .el-upload:hover {\n  border-color: #409eff;\n}\n.avatar-uploader-icon {\n  font-size: 28px;\n  color: #8c939d;\n  width: 100px;\n  height: 100px;\n  line-height: 100px;\n  text-align: center;\n}\n.avatar {\n  width: 100px;\n  height: 100px;\n  display: block;\n}\n</style>\n"]}]}