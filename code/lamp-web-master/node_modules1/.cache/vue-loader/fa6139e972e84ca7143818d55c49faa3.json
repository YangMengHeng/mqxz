{"remainingRequest":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\online\\index.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\src\\views\\lamp\\system\\online\\index.vue","mtime":1679380940000},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\babel-loader\\lib\\index.js","mtime":1686711137609},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1686711136315},{"path":"C:\\Users\\Planck\\Desktop\\mycode\\lamp\\lamp-web-master\\node_modules\\vue-loader\\lib\\index.js","mtime":1686711137115}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport onlineApi from '@/api/Online.js'\n\nexport default {\n  name: 'OnlineList',\n  directives: {},\n  components: {},\n  filters: {},\n  data() {\n    return {\n      tableKey: 0,\n      loading: false,\n      selection: [],\n      queryParams: {\n        name: ''\n      },\n      tableData: [],\n    }\n  },\n  computed: {},\n  mounted() {\n    this.fetch()\n  },\n  methods: {\n    onSelectChange(selection) {\n      this.selection = selection\n    },\n    fetch() {\n      this.loading = true;\n      onlineApi.list(this.queryParams).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.tableData = res.data;\n        }\n      }).finally(() => this.loading = false);\n    },\n    clearSelections() {\n      this.$refs.table.clearSelection()\n    },\n    search() {\n      this.fetch({\n        ...this.queryParams\n      })\n    },\n    reset() {\n      this.queryParams = { name: ''}\n      this.$refs.table.clearSort()\n      this.$refs.table.clearFilter()\n      this.search()\n    },\n    sortChange(val) {\n      this.search();\n    },\n    filterChange(filters) {\n      // for (const key in filters) {\n      //   if (key.includes('.')) {\n      //     const val = {};\n      //     val[key.split('.')[1]] = filters[key][0];\n      //     this.queryParams.model[key.split('.')[0]] = val;\n      //   } else {\n      //     this.queryParams.model[key] = filters[key][0]\n      //   }\n      // }\n      this.search()\n    },\n    cellClick(row, column) {\n      if (column['columnKey'] !== \"selectionId\") {\n        return;\n      }\n      let flag = false;\n      this.selection.forEach((item) => {\n        if (item.id === row.id) {\n          flag = true;\n          this.$refs.table.toggleRowSelection(row);\n        }\n      })\n\n      if (!flag) {\n        this.$refs.table.toggleRowSelection(row, true);\n      }\n    },\n    onDelete(row) {\n      const param = {\n        userId: row.userId,\n        userToken: row.token,\n        clientId: row.clientId,\n      }\n      onlineApi.t(param).then(response => {\n        const res = response.data;\n        if (res.isSuccess) {\n          this.$message({\n            message: \"操作成功\",\n            type: 'success'\n          });\n          this.search();\n        } else {\n          this.$message({\n            message: response.msg,\n            type: 'error'\n          });\n        }\n      })\n    },\n  }\n}\n",null]}